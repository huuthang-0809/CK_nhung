
gas_sensor.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000300c  080001a0  080001a0  000011a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000e8  080031b0  080031b0  000041b0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003298  08003298  00005078  2**0
                  CONTENTS
  4 .ARM          00000008  08003298  08003298  00004298  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080032a0  080032a0  00005078  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080032a0  080032a0  000042a0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080032a4  080032a4  000042a4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000078  20000000  080032a8  00005000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000174  20000078  08003320  00005078  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200001ec  08003320  000051ec  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00005078  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000293d  00000000  00000000  000050a8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00000cc7  00000000  00000000  000079e5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000318  00000000  00000000  000086b0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 0000022b  00000000  00000000  000089c8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00015711  00000000  00000000  00008bf3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00004d86  00000000  00000000  0001e304  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00085352  00000000  00000000  0002308a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000a83dc  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00001364  00000000  00000000  000a8420  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000066  00000000  00000000  000a9784  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	@ (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	@ (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	@ (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000078 	.word	0x20000078
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08003194 	.word	0x08003194

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	@ (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	@ (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	@ (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	2000007c 	.word	0x2000007c
 80001dc:	08003194 	.word	0x08003194

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	@ 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpun>:
 8000b2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x10>
 8000b36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b3a:	d10a      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x20>
 8000b46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b4a:	d102      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0001 	mov.w	r0, #1
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_d2f>:
 8000b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b5c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000b60:	bf24      	itt	cs
 8000b62:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000b66:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000b6a:	d90d      	bls.n	8000b88 <__aeabi_d2f+0x30>
 8000b6c:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000b70:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000b74:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000b78:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000b7c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000b80:	bf08      	it	eq
 8000b82:	f020 0001 	biceq.w	r0, r0, #1
 8000b86:	4770      	bx	lr
 8000b88:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000b8c:	d121      	bne.n	8000bd2 <__aeabi_d2f+0x7a>
 8000b8e:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000b92:	bfbc      	itt	lt
 8000b94:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000b98:	4770      	bxlt	lr
 8000b9a:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000b9e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000ba2:	f1c2 0218 	rsb	r2, r2, #24
 8000ba6:	f1c2 0c20 	rsb	ip, r2, #32
 8000baa:	fa10 f30c 	lsls.w	r3, r0, ip
 8000bae:	fa20 f002 	lsr.w	r0, r0, r2
 8000bb2:	bf18      	it	ne
 8000bb4:	f040 0001 	orrne.w	r0, r0, #1
 8000bb8:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bbc:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000bc0:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000bc4:	ea40 000c 	orr.w	r0, r0, ip
 8000bc8:	fa23 f302 	lsr.w	r3, r3, r2
 8000bcc:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000bd0:	e7cc      	b.n	8000b6c <__aeabi_d2f+0x14>
 8000bd2:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000bd6:	d107      	bne.n	8000be8 <__aeabi_d2f+0x90>
 8000bd8:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000bdc:	bf1e      	ittt	ne
 8000bde:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000be2:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000be6:	4770      	bxne	lr
 8000be8:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000bec:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000bf0:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000bf4:	4770      	bx	lr
 8000bf6:	bf00      	nop

08000bf8 <TIM2_IRQHandler>:
#include "hardware.h"

static volatile uint8_t led_red_enable = 0;
const char* stateStrings[] = {"SAFE", "WARNING", "DANGER", "DANGER++"};

void TIM2_IRQHandler(void) {
 8000bf8:	b480      	push	{r7}
 8000bfa:	af00      	add	r7, sp, #0
    if (TIM2->SR & TIM_SR_UIF) {
 8000bfc:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8000c00:	691b      	ldr	r3, [r3, #16]
 8000c02:	f003 0301 	and.w	r3, r3, #1
 8000c06:	2b00      	cmp	r3, #0
 8000c08:	d019      	beq.n	8000c3e <TIM2_IRQHandler+0x46>
        TIM2->SR &= ~TIM_SR_UIF;
 8000c0a:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8000c0e:	691b      	ldr	r3, [r3, #16]
 8000c10:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8000c14:	f023 0301 	bic.w	r3, r3, #1
 8000c18:	6113      	str	r3, [r2, #16]
        if (led_red_enable) {
 8000c1a:	4b0b      	ldr	r3, [pc, #44]	@ (8000c48 <TIM2_IRQHandler+0x50>)
 8000c1c:	781b      	ldrb	r3, [r3, #0]
 8000c1e:	b2db      	uxtb	r3, r3
 8000c20:	2b00      	cmp	r3, #0
 8000c22:	d006      	beq.n	8000c32 <TIM2_IRQHandler+0x3a>
            GPIOB->ODR ^= (1 << 1);  // Toggle LED đỏ
 8000c24:	4b09      	ldr	r3, [pc, #36]	@ (8000c4c <TIM2_IRQHandler+0x54>)
 8000c26:	695b      	ldr	r3, [r3, #20]
 8000c28:	4a08      	ldr	r2, [pc, #32]	@ (8000c4c <TIM2_IRQHandler+0x54>)
 8000c2a:	f083 0302 	eor.w	r3, r3, #2
 8000c2e:	6153      	str	r3, [r2, #20]
        } else {
            GPIOB->ODR &= ~(1 << 1);
        }
    }
}
 8000c30:	e005      	b.n	8000c3e <TIM2_IRQHandler+0x46>
            GPIOB->ODR &= ~(1 << 1);
 8000c32:	4b06      	ldr	r3, [pc, #24]	@ (8000c4c <TIM2_IRQHandler+0x54>)
 8000c34:	695b      	ldr	r3, [r3, #20]
 8000c36:	4a05      	ldr	r2, [pc, #20]	@ (8000c4c <TIM2_IRQHandler+0x54>)
 8000c38:	f023 0302 	bic.w	r3, r3, #2
 8000c3c:	6153      	str	r3, [r2, #20]
}
 8000c3e:	bf00      	nop
 8000c40:	46bd      	mov	sp, r7
 8000c42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c46:	4770      	bx	lr
 8000c48:	20000094 	.word	0x20000094
 8000c4c:	40020400 	.word	0x40020400

08000c50 <handleAlarm>:

void handleAlarm(float gas_ppm) {
 8000c50:	b580      	push	{r7, lr}
 8000c52:	b086      	sub	sp, #24
 8000c54:	af00      	add	r7, sp, #0
 8000c56:	ed87 0a01 	vstr	s0, [r7, #4]
    if (gas_ppm > THRESHOLD_DANGER) {
 8000c5a:	edd7 7a01 	vldr	s15, [r7, #4]
 8000c5e:	ed9f 7a60 	vldr	s14, [pc, #384]	@ 8000de0 <handleAlarm+0x190>
 8000c62:	eef4 7ac7 	vcmpe.f32	s15, s14
 8000c66:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000c6a:	dd47      	ble.n	8000cfc <handleAlarm+0xac>
        GPIOB->ODR &= ~((1 << 2) | (1 << 3) | (1 << 4));
 8000c6c:	4b5d      	ldr	r3, [pc, #372]	@ (8000de4 <handleAlarm+0x194>)
 8000c6e:	695b      	ldr	r3, [r3, #20]
 8000c70:	4a5c      	ldr	r2, [pc, #368]	@ (8000de4 <handleAlarm+0x194>)
 8000c72:	f023 031c 	bic.w	r3, r3, #28
 8000c76:	6153      	str	r3, [r2, #20]
        GPIOA->ODR |= (1 << 1) | (1 << 5);
 8000c78:	4b5b      	ldr	r3, [pc, #364]	@ (8000de8 <handleAlarm+0x198>)
 8000c7a:	695b      	ldr	r3, [r3, #20]
 8000c7c:	4a5a      	ldr	r2, [pc, #360]	@ (8000de8 <handleAlarm+0x198>)
 8000c7e:	f043 0322 	orr.w	r3, r3, #34	@ 0x22
 8000c82:	6153      	str	r3, [r2, #20]
        GPIOA->ODR |= (1 << 6);
 8000c84:	4b58      	ldr	r3, [pc, #352]	@ (8000de8 <handleAlarm+0x198>)
 8000c86:	695b      	ldr	r3, [r3, #20]
 8000c88:	4a57      	ldr	r2, [pc, #348]	@ (8000de8 <handleAlarm+0x198>)
 8000c8a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8000c8e:	6153      	str	r3, [r2, #20]
        delay_ms(100);
 8000c90:	2064      	movs	r0, #100	@ 0x64
 8000c92:	f000 fac5 	bl	8001220 <delay_ms>
        GPIOA->ODR &= ~(1 << 6);
 8000c96:	4b54      	ldr	r3, [pc, #336]	@ (8000de8 <handleAlarm+0x198>)
 8000c98:	695b      	ldr	r3, [r3, #20]
 8000c9a:	4a53      	ldr	r2, [pc, #332]	@ (8000de8 <handleAlarm+0x198>)
 8000c9c:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8000ca0:	6153      	str	r3, [r2, #20]

        int base_ppm = (int)gas_ppm;
 8000ca2:	edd7 7a01 	vldr	s15, [r7, #4]
 8000ca6:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8000caa:	ee17 3a90 	vmov	r3, s15
 8000cae:	613b      	str	r3, [r7, #16]
        int step = (base_ppm - THRESHOLD_DANGER) / 1000;
 8000cb0:	693b      	ldr	r3, [r7, #16]
 8000cb2:	f5a3 539c 	sub.w	r3, r3, #4992	@ 0x1380
 8000cb6:	3b08      	subs	r3, #8
 8000cb8:	4a4c      	ldr	r2, [pc, #304]	@ (8000dec <handleAlarm+0x19c>)
 8000cba:	fb82 1203 	smull	r1, r2, r2, r3
 8000cbe:	1192      	asrs	r2, r2, #6
 8000cc0:	17db      	asrs	r3, r3, #31
 8000cc2:	1ad3      	subs	r3, r2, r3
 8000cc4:	60fb      	str	r3, [r7, #12]
        int blink_period = 500 - (step * 50); // Giảm 50ms mỗi mốc 1000 ppm
 8000cc6:	68fb      	ldr	r3, [r7, #12]
 8000cc8:	f06f 0231 	mvn.w	r2, #49	@ 0x31
 8000ccc:	fb02 f303 	mul.w	r3, r2, r3
 8000cd0:	f503 73fa 	add.w	r3, r3, #500	@ 0x1f4
 8000cd4:	617b      	str	r3, [r7, #20]
        if (blink_period < 100) blink_period = 100;
 8000cd6:	697b      	ldr	r3, [r7, #20]
 8000cd8:	2b63      	cmp	r3, #99	@ 0x63
 8000cda:	dc01      	bgt.n	8000ce0 <handleAlarm+0x90>
 8000cdc:	2364      	movs	r3, #100	@ 0x64
 8000cde:	617b      	str	r3, [r7, #20]

        TIM2->ARR = blink_period;
 8000ce0:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8000ce4:	697b      	ldr	r3, [r7, #20]
 8000ce6:	62d3      	str	r3, [r2, #44]	@ 0x2c
        GPIOB->ODR |= (1 << 1);
 8000ce8:	4b3e      	ldr	r3, [pc, #248]	@ (8000de4 <handleAlarm+0x194>)
 8000cea:	695b      	ldr	r3, [r3, #20]
 8000cec:	4a3d      	ldr	r2, [pc, #244]	@ (8000de4 <handleAlarm+0x194>)
 8000cee:	f043 0302 	orr.w	r3, r3, #2
 8000cf2:	6153      	str	r3, [r2, #20]
        led_red_enable = 1;
 8000cf4:	4b3e      	ldr	r3, [pc, #248]	@ (8000df0 <handleAlarm+0x1a0>)
 8000cf6:	2201      	movs	r2, #1
 8000cf8:	701a      	strb	r2, [r3, #0]
        GPIOB->ODR &= ~((1 << 1) | (1 << 2) | (1 << 4));
        GPIOA->ODR &= ~((1 << 1) | (1 << 5));
        GPIOB->ODR |= (1 << 3);
        led_red_enable = 0;
    }
}
 8000cfa:	e06c      	b.n	8000dd6 <handleAlarm+0x186>
    } else if (gas_ppm > THRESHOLD_WARNING) {
 8000cfc:	edd7 7a01 	vldr	s15, [r7, #4]
 8000d00:	ed9f 7a3c 	vldr	s14, [pc, #240]	@ 8000df4 <handleAlarm+0x1a4>
 8000d04:	eef4 7ac7 	vcmpe.f32	s15, s14
 8000d08:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000d0c:	dd29      	ble.n	8000d62 <handleAlarm+0x112>
        GPIOB->ODR &= ~((1 << 2) | (1 << 3) | (1 << 4));
 8000d0e:	4b35      	ldr	r3, [pc, #212]	@ (8000de4 <handleAlarm+0x194>)
 8000d10:	695b      	ldr	r3, [r3, #20]
 8000d12:	4a34      	ldr	r2, [pc, #208]	@ (8000de4 <handleAlarm+0x194>)
 8000d14:	f023 031c 	bic.w	r3, r3, #28
 8000d18:	6153      	str	r3, [r2, #20]
        GPIOA->ODR |= (1 << 1) | (1 << 5);
 8000d1a:	4b33      	ldr	r3, [pc, #204]	@ (8000de8 <handleAlarm+0x198>)
 8000d1c:	695b      	ldr	r3, [r3, #20]
 8000d1e:	4a32      	ldr	r2, [pc, #200]	@ (8000de8 <handleAlarm+0x198>)
 8000d20:	f043 0322 	orr.w	r3, r3, #34	@ 0x22
 8000d24:	6153      	str	r3, [r2, #20]
        GPIOA->ODR |= (1 << 6);
 8000d26:	4b30      	ldr	r3, [pc, #192]	@ (8000de8 <handleAlarm+0x198>)
 8000d28:	695b      	ldr	r3, [r3, #20]
 8000d2a:	4a2f      	ldr	r2, [pc, #188]	@ (8000de8 <handleAlarm+0x198>)
 8000d2c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8000d30:	6153      	str	r3, [r2, #20]
        delay_ms(100);
 8000d32:	2064      	movs	r0, #100	@ 0x64
 8000d34:	f000 fa74 	bl	8001220 <delay_ms>
        GPIOA->ODR &= ~(1 << 6);
 8000d38:	4b2b      	ldr	r3, [pc, #172]	@ (8000de8 <handleAlarm+0x198>)
 8000d3a:	695b      	ldr	r3, [r3, #20]
 8000d3c:	4a2a      	ldr	r2, [pc, #168]	@ (8000de8 <handleAlarm+0x198>)
 8000d3e:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8000d42:	6153      	str	r3, [r2, #20]
        TIM2->ARR = 1000;
 8000d44:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8000d48:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8000d4c:	62da      	str	r2, [r3, #44]	@ 0x2c
        GPIOB->ODR |= (1 << 1);
 8000d4e:	4b25      	ldr	r3, [pc, #148]	@ (8000de4 <handleAlarm+0x194>)
 8000d50:	695b      	ldr	r3, [r3, #20]
 8000d52:	4a24      	ldr	r2, [pc, #144]	@ (8000de4 <handleAlarm+0x194>)
 8000d54:	f043 0302 	orr.w	r3, r3, #2
 8000d58:	6153      	str	r3, [r2, #20]
        led_red_enable = 1;
 8000d5a:	4b25      	ldr	r3, [pc, #148]	@ (8000df0 <handleAlarm+0x1a0>)
 8000d5c:	2201      	movs	r2, #1
 8000d5e:	701a      	strb	r2, [r3, #0]
}
 8000d60:	e039      	b.n	8000dd6 <handleAlarm+0x186>
    } else if (gas_ppm > THRESHOLD_SAFE) {
 8000d62:	edd7 7a01 	vldr	s15, [r7, #4]
 8000d66:	ed9f 7a24 	vldr	s14, [pc, #144]	@ 8000df8 <handleAlarm+0x1a8>
 8000d6a:	eef4 7ac7 	vcmpe.f32	s15, s14
 8000d6e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000d72:	dd1b      	ble.n	8000dac <handleAlarm+0x15c>
        GPIOB->ODR &= ~((1 << 1) | (1 << 3) | (1 << 4));
 8000d74:	4b1b      	ldr	r3, [pc, #108]	@ (8000de4 <handleAlarm+0x194>)
 8000d76:	695b      	ldr	r3, [r3, #20]
 8000d78:	4a1a      	ldr	r2, [pc, #104]	@ (8000de4 <handleAlarm+0x194>)
 8000d7a:	f023 031a 	bic.w	r3, r3, #26
 8000d7e:	6153      	str	r3, [r2, #20]
        GPIOA->ODR &= ~((1 << 1) | (1 << 5));
 8000d80:	4b19      	ldr	r3, [pc, #100]	@ (8000de8 <handleAlarm+0x198>)
 8000d82:	695b      	ldr	r3, [r3, #20]
 8000d84:	4a18      	ldr	r2, [pc, #96]	@ (8000de8 <handleAlarm+0x198>)
 8000d86:	f023 0322 	bic.w	r3, r3, #34	@ 0x22
 8000d8a:	6153      	str	r3, [r2, #20]
        GPIOB->ODR |= (1 << 2);
 8000d8c:	4b15      	ldr	r3, [pc, #84]	@ (8000de4 <handleAlarm+0x194>)
 8000d8e:	695b      	ldr	r3, [r3, #20]
 8000d90:	4a14      	ldr	r2, [pc, #80]	@ (8000de4 <handleAlarm+0x194>)
 8000d92:	f043 0304 	orr.w	r3, r3, #4
 8000d96:	6153      	str	r3, [r2, #20]
        GPIOA->ODR |= (1 << 6);
 8000d98:	4b13      	ldr	r3, [pc, #76]	@ (8000de8 <handleAlarm+0x198>)
 8000d9a:	695b      	ldr	r3, [r3, #20]
 8000d9c:	4a12      	ldr	r2, [pc, #72]	@ (8000de8 <handleAlarm+0x198>)
 8000d9e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8000da2:	6153      	str	r3, [r2, #20]
        led_red_enable = 0;
 8000da4:	4b12      	ldr	r3, [pc, #72]	@ (8000df0 <handleAlarm+0x1a0>)
 8000da6:	2200      	movs	r2, #0
 8000da8:	701a      	strb	r2, [r3, #0]
}
 8000daa:	e014      	b.n	8000dd6 <handleAlarm+0x186>
        GPIOB->ODR &= ~((1 << 1) | (1 << 2) | (1 << 4));
 8000dac:	4b0d      	ldr	r3, [pc, #52]	@ (8000de4 <handleAlarm+0x194>)
 8000dae:	695b      	ldr	r3, [r3, #20]
 8000db0:	4a0c      	ldr	r2, [pc, #48]	@ (8000de4 <handleAlarm+0x194>)
 8000db2:	f023 0316 	bic.w	r3, r3, #22
 8000db6:	6153      	str	r3, [r2, #20]
        GPIOA->ODR &= ~((1 << 1) | (1 << 5));
 8000db8:	4b0b      	ldr	r3, [pc, #44]	@ (8000de8 <handleAlarm+0x198>)
 8000dba:	695b      	ldr	r3, [r3, #20]
 8000dbc:	4a0a      	ldr	r2, [pc, #40]	@ (8000de8 <handleAlarm+0x198>)
 8000dbe:	f023 0322 	bic.w	r3, r3, #34	@ 0x22
 8000dc2:	6153      	str	r3, [r2, #20]
        GPIOB->ODR |= (1 << 3);
 8000dc4:	4b07      	ldr	r3, [pc, #28]	@ (8000de4 <handleAlarm+0x194>)
 8000dc6:	695b      	ldr	r3, [r3, #20]
 8000dc8:	4a06      	ldr	r2, [pc, #24]	@ (8000de4 <handleAlarm+0x194>)
 8000dca:	f043 0308 	orr.w	r3, r3, #8
 8000dce:	6153      	str	r3, [r2, #20]
        led_red_enable = 0;
 8000dd0:	4b07      	ldr	r3, [pc, #28]	@ (8000df0 <handleAlarm+0x1a0>)
 8000dd2:	2200      	movs	r2, #0
 8000dd4:	701a      	strb	r2, [r3, #0]
}
 8000dd6:	bf00      	nop
 8000dd8:	3718      	adds	r7, #24
 8000dda:	46bd      	mov	sp, r7
 8000ddc:	bd80      	pop	{r7, pc}
 8000dde:	bf00      	nop
 8000de0:	459c4000 	.word	0x459c4000
 8000de4:	40020400 	.word	0x40020400
 8000de8:	40020000 	.word	0x40020000
 8000dec:	10624dd3 	.word	0x10624dd3
 8000df0:	20000094 	.word	0x20000094
 8000df4:	447a0000 	.word	0x447a0000
 8000df8:	43fa0000 	.word	0x43fa0000

08000dfc <getSystemState>:

SystemState getSystemState(float gas_ppm) {
 8000dfc:	b480      	push	{r7}
 8000dfe:	b083      	sub	sp, #12
 8000e00:	af00      	add	r7, sp, #0
 8000e02:	ed87 0a01 	vstr	s0, [r7, #4]
    if (gas_ppm > THRESHOLD_DANGER) return STATE_EXTREME_DANGER;
 8000e06:	edd7 7a01 	vldr	s15, [r7, #4]
 8000e0a:	ed9f 7a13 	vldr	s14, [pc, #76]	@ 8000e58 <getSystemState+0x5c>
 8000e0e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8000e12:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000e16:	dd01      	ble.n	8000e1c <getSystemState+0x20>
 8000e18:	2303      	movs	r3, #3
 8000e1a:	e016      	b.n	8000e4a <getSystemState+0x4e>
    else if (gas_ppm > THRESHOLD_WARNING) return STATE_DANGER;
 8000e1c:	edd7 7a01 	vldr	s15, [r7, #4]
 8000e20:	ed9f 7a0e 	vldr	s14, [pc, #56]	@ 8000e5c <getSystemState+0x60>
 8000e24:	eef4 7ac7 	vcmpe.f32	s15, s14
 8000e28:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000e2c:	dd01      	ble.n	8000e32 <getSystemState+0x36>
 8000e2e:	2302      	movs	r3, #2
 8000e30:	e00b      	b.n	8000e4a <getSystemState+0x4e>
    else if (gas_ppm > THRESHOLD_SAFE) return STATE_WARNING;
 8000e32:	edd7 7a01 	vldr	s15, [r7, #4]
 8000e36:	ed9f 7a0a 	vldr	s14, [pc, #40]	@ 8000e60 <getSystemState+0x64>
 8000e3a:	eef4 7ac7 	vcmpe.f32	s15, s14
 8000e3e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000e42:	dd01      	ble.n	8000e48 <getSystemState+0x4c>
 8000e44:	2301      	movs	r3, #1
 8000e46:	e000      	b.n	8000e4a <getSystemState+0x4e>
    else return STATE_SAFE;
 8000e48:	2300      	movs	r3, #0
}
 8000e4a:	4618      	mov	r0, r3
 8000e4c:	370c      	adds	r7, #12
 8000e4e:	46bd      	mov	sp, r7
 8000e50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e54:	4770      	bx	lr
 8000e56:	bf00      	nop
 8000e58:	459c4000 	.word	0x459c4000
 8000e5c:	447a0000 	.word	0x447a0000
 8000e60:	43fa0000 	.word	0x43fa0000

08000e64 <I2C1_WriteByte>:
#include "config.h"
#include "alarm.h"
#include <stdio.h>
#include <stdbool.h>

static void I2C1_WriteByte(uint8_t addr, uint8_t data) {
 8000e64:	b480      	push	{r7}
 8000e66:	b083      	sub	sp, #12
 8000e68:	af00      	add	r7, sp, #0
 8000e6a:	4603      	mov	r3, r0
 8000e6c:	460a      	mov	r2, r1
 8000e6e:	71fb      	strb	r3, [r7, #7]
 8000e70:	4613      	mov	r3, r2
 8000e72:	71bb      	strb	r3, [r7, #6]
    I2C1->CR1 |= I2C_CR1_START;
 8000e74:	4b1c      	ldr	r3, [pc, #112]	@ (8000ee8 <I2C1_WriteByte+0x84>)
 8000e76:	681b      	ldr	r3, [r3, #0]
 8000e78:	4a1b      	ldr	r2, [pc, #108]	@ (8000ee8 <I2C1_WriteByte+0x84>)
 8000e7a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000e7e:	6013      	str	r3, [r2, #0]
    while (!(I2C1->SR1 & I2C_SR1_SB));
 8000e80:	bf00      	nop
 8000e82:	4b19      	ldr	r3, [pc, #100]	@ (8000ee8 <I2C1_WriteByte+0x84>)
 8000e84:	695b      	ldr	r3, [r3, #20]
 8000e86:	f003 0301 	and.w	r3, r3, #1
 8000e8a:	2b00      	cmp	r3, #0
 8000e8c:	d0f9      	beq.n	8000e82 <I2C1_WriteByte+0x1e>
    (void)I2C1->SR1;
 8000e8e:	4b16      	ldr	r3, [pc, #88]	@ (8000ee8 <I2C1_WriteByte+0x84>)
 8000e90:	695b      	ldr	r3, [r3, #20]
    I2C1->DR = addr;
 8000e92:	4a15      	ldr	r2, [pc, #84]	@ (8000ee8 <I2C1_WriteByte+0x84>)
 8000e94:	79fb      	ldrb	r3, [r7, #7]
 8000e96:	6113      	str	r3, [r2, #16]
    while (!(I2C1->SR1 & I2C_SR1_ADDR));
 8000e98:	bf00      	nop
 8000e9a:	4b13      	ldr	r3, [pc, #76]	@ (8000ee8 <I2C1_WriteByte+0x84>)
 8000e9c:	695b      	ldr	r3, [r3, #20]
 8000e9e:	f003 0302 	and.w	r3, r3, #2
 8000ea2:	2b00      	cmp	r3, #0
 8000ea4:	d0f9      	beq.n	8000e9a <I2C1_WriteByte+0x36>
    (void)I2C1->SR1; (void)I2C1->SR2;
 8000ea6:	4b10      	ldr	r3, [pc, #64]	@ (8000ee8 <I2C1_WriteByte+0x84>)
 8000ea8:	695b      	ldr	r3, [r3, #20]
 8000eaa:	4b0f      	ldr	r3, [pc, #60]	@ (8000ee8 <I2C1_WriteByte+0x84>)
 8000eac:	699b      	ldr	r3, [r3, #24]
    while (!(I2C1->SR1 & I2C_SR1_TXE));
 8000eae:	bf00      	nop
 8000eb0:	4b0d      	ldr	r3, [pc, #52]	@ (8000ee8 <I2C1_WriteByte+0x84>)
 8000eb2:	695b      	ldr	r3, [r3, #20]
 8000eb4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000eb8:	2b00      	cmp	r3, #0
 8000eba:	d0f9      	beq.n	8000eb0 <I2C1_WriteByte+0x4c>
    I2C1->DR = data;
 8000ebc:	4a0a      	ldr	r2, [pc, #40]	@ (8000ee8 <I2C1_WriteByte+0x84>)
 8000ebe:	79bb      	ldrb	r3, [r7, #6]
 8000ec0:	6113      	str	r3, [r2, #16]
    while (!(I2C1->SR1 & I2C_SR1_TXE));
 8000ec2:	bf00      	nop
 8000ec4:	4b08      	ldr	r3, [pc, #32]	@ (8000ee8 <I2C1_WriteByte+0x84>)
 8000ec6:	695b      	ldr	r3, [r3, #20]
 8000ec8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000ecc:	2b00      	cmp	r3, #0
 8000ece:	d0f9      	beq.n	8000ec4 <I2C1_WriteByte+0x60>
    I2C1->CR1 |= I2C_CR1_STOP;
 8000ed0:	4b05      	ldr	r3, [pc, #20]	@ (8000ee8 <I2C1_WriteByte+0x84>)
 8000ed2:	681b      	ldr	r3, [r3, #0]
 8000ed4:	4a04      	ldr	r2, [pc, #16]	@ (8000ee8 <I2C1_WriteByte+0x84>)
 8000ed6:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8000eda:	6013      	str	r3, [r2, #0]
}
 8000edc:	bf00      	nop
 8000ede:	370c      	adds	r7, #12
 8000ee0:	46bd      	mov	sp, r7
 8000ee2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ee6:	4770      	bx	lr
 8000ee8:	40005400 	.word	0x40005400

08000eec <lcd_send_cmd>:

static void lcd_send_cmd(uint8_t cmd) {
 8000eec:	b580      	push	{r7, lr}
 8000eee:	b086      	sub	sp, #24
 8000ef0:	af00      	add	r7, sp, #0
 8000ef2:	4603      	mov	r3, r0
 8000ef4:	71fb      	strb	r3, [r7, #7]
    uint8_t high = cmd & 0xF0;
 8000ef6:	79fb      	ldrb	r3, [r7, #7]
 8000ef8:	f023 030f 	bic.w	r3, r3, #15
 8000efc:	74fb      	strb	r3, [r7, #19]
    uint8_t low = (cmd << 4) & 0xF0;
 8000efe:	79fb      	ldrb	r3, [r7, #7]
 8000f00:	011b      	lsls	r3, r3, #4
 8000f02:	74bb      	strb	r3, [r7, #18]
    uint8_t data_t[4] = {
 8000f04:	7cfb      	ldrb	r3, [r7, #19]
 8000f06:	f043 030c 	orr.w	r3, r3, #12
 8000f0a:	b2db      	uxtb	r3, r3
 8000f0c:	733b      	strb	r3, [r7, #12]
 8000f0e:	7cfb      	ldrb	r3, [r7, #19]
 8000f10:	f043 0308 	orr.w	r3, r3, #8
 8000f14:	b2db      	uxtb	r3, r3
 8000f16:	737b      	strb	r3, [r7, #13]
 8000f18:	7cbb      	ldrb	r3, [r7, #18]
 8000f1a:	f043 030c 	orr.w	r3, r3, #12
 8000f1e:	b2db      	uxtb	r3, r3
 8000f20:	73bb      	strb	r3, [r7, #14]
 8000f22:	7cbb      	ldrb	r3, [r7, #18]
 8000f24:	f043 0308 	orr.w	r3, r3, #8
 8000f28:	b2db      	uxtb	r3, r3
 8000f2a:	73fb      	strb	r3, [r7, #15]
        high | 0x0C, high | 0x08,
        low | 0x0C, low | 0x08
    };
    for (int i = 0; i < 4; i++) {
 8000f2c:	2300      	movs	r3, #0
 8000f2e:	617b      	str	r3, [r7, #20]
 8000f30:	e00e      	b.n	8000f50 <lcd_send_cmd+0x64>
        I2C1_WriteByte(LCD_ADDR, data_t[i]);
 8000f32:	f107 020c 	add.w	r2, r7, #12
 8000f36:	697b      	ldr	r3, [r7, #20]
 8000f38:	4413      	add	r3, r2
 8000f3a:	781b      	ldrb	r3, [r3, #0]
 8000f3c:	4619      	mov	r1, r3
 8000f3e:	204e      	movs	r0, #78	@ 0x4e
 8000f40:	f7ff ff90 	bl	8000e64 <I2C1_WriteByte>
        delay_ms(1);
 8000f44:	2001      	movs	r0, #1
 8000f46:	f000 f96b 	bl	8001220 <delay_ms>
    for (int i = 0; i < 4; i++) {
 8000f4a:	697b      	ldr	r3, [r7, #20]
 8000f4c:	3301      	adds	r3, #1
 8000f4e:	617b      	str	r3, [r7, #20]
 8000f50:	697b      	ldr	r3, [r7, #20]
 8000f52:	2b03      	cmp	r3, #3
 8000f54:	dded      	ble.n	8000f32 <lcd_send_cmd+0x46>
    }
}
 8000f56:	bf00      	nop
 8000f58:	bf00      	nop
 8000f5a:	3718      	adds	r7, #24
 8000f5c:	46bd      	mov	sp, r7
 8000f5e:	bd80      	pop	{r7, pc}

08000f60 <lcd_send_data>:

static void lcd_send_data(uint8_t data) {
 8000f60:	b580      	push	{r7, lr}
 8000f62:	b086      	sub	sp, #24
 8000f64:	af00      	add	r7, sp, #0
 8000f66:	4603      	mov	r3, r0
 8000f68:	71fb      	strb	r3, [r7, #7]
    uint8_t high = data & 0xF0;
 8000f6a:	79fb      	ldrb	r3, [r7, #7]
 8000f6c:	f023 030f 	bic.w	r3, r3, #15
 8000f70:	74fb      	strb	r3, [r7, #19]
    uint8_t low = (data << 4) & 0xF0;
 8000f72:	79fb      	ldrb	r3, [r7, #7]
 8000f74:	011b      	lsls	r3, r3, #4
 8000f76:	74bb      	strb	r3, [r7, #18]
    uint8_t data_t[4] = {
 8000f78:	7cfb      	ldrb	r3, [r7, #19]
 8000f7a:	f043 030d 	orr.w	r3, r3, #13
 8000f7e:	b2db      	uxtb	r3, r3
 8000f80:	733b      	strb	r3, [r7, #12]
 8000f82:	7cfb      	ldrb	r3, [r7, #19]
 8000f84:	f043 0309 	orr.w	r3, r3, #9
 8000f88:	b2db      	uxtb	r3, r3
 8000f8a:	737b      	strb	r3, [r7, #13]
 8000f8c:	7cbb      	ldrb	r3, [r7, #18]
 8000f8e:	f043 030d 	orr.w	r3, r3, #13
 8000f92:	b2db      	uxtb	r3, r3
 8000f94:	73bb      	strb	r3, [r7, #14]
 8000f96:	7cbb      	ldrb	r3, [r7, #18]
 8000f98:	f043 0309 	orr.w	r3, r3, #9
 8000f9c:	b2db      	uxtb	r3, r3
 8000f9e:	73fb      	strb	r3, [r7, #15]
        high | 0x0D, high | 0x09,
        low | 0x0D, low | 0x09
    };
    for (int i = 0; i < 4; i++) {
 8000fa0:	2300      	movs	r3, #0
 8000fa2:	617b      	str	r3, [r7, #20]
 8000fa4:	e00e      	b.n	8000fc4 <lcd_send_data+0x64>
        I2C1_WriteByte(LCD_ADDR, data_t[i]);
 8000fa6:	f107 020c 	add.w	r2, r7, #12
 8000faa:	697b      	ldr	r3, [r7, #20]
 8000fac:	4413      	add	r3, r2
 8000fae:	781b      	ldrb	r3, [r3, #0]
 8000fb0:	4619      	mov	r1, r3
 8000fb2:	204e      	movs	r0, #78	@ 0x4e
 8000fb4:	f7ff ff56 	bl	8000e64 <I2C1_WriteByte>
        delay_ms(1);
 8000fb8:	2001      	movs	r0, #1
 8000fba:	f000 f931 	bl	8001220 <delay_ms>
    for (int i = 0; i < 4; i++) {
 8000fbe:	697b      	ldr	r3, [r7, #20]
 8000fc0:	3301      	adds	r3, #1
 8000fc2:	617b      	str	r3, [r7, #20]
 8000fc4:	697b      	ldr	r3, [r7, #20]
 8000fc6:	2b03      	cmp	r3, #3
 8000fc8:	dded      	ble.n	8000fa6 <lcd_send_data+0x46>
    }
}
 8000fca:	bf00      	nop
 8000fcc:	bf00      	nop
 8000fce:	3718      	adds	r7, #24
 8000fd0:	46bd      	mov	sp, r7
 8000fd2:	bd80      	pop	{r7, pc}

08000fd4 <lcd_set_cursor>:

static void lcd_set_cursor(uint8_t row, uint8_t col) {
 8000fd4:	b580      	push	{r7, lr}
 8000fd6:	b084      	sub	sp, #16
 8000fd8:	af00      	add	r7, sp, #0
 8000fda:	4603      	mov	r3, r0
 8000fdc:	460a      	mov	r2, r1
 8000fde:	71fb      	strb	r3, [r7, #7]
 8000fe0:	4613      	mov	r3, r2
 8000fe2:	71bb      	strb	r3, [r7, #6]
    uint8_t addr = (row == 0) ? (0x80 + col) : (0xC0 + col);
 8000fe4:	79fb      	ldrb	r3, [r7, #7]
 8000fe6:	2b00      	cmp	r3, #0
 8000fe8:	d103      	bne.n	8000ff2 <lcd_set_cursor+0x1e>
 8000fea:	79bb      	ldrb	r3, [r7, #6]
 8000fec:	3b80      	subs	r3, #128	@ 0x80
 8000fee:	b2db      	uxtb	r3, r3
 8000ff0:	e002      	b.n	8000ff8 <lcd_set_cursor+0x24>
 8000ff2:	79bb      	ldrb	r3, [r7, #6]
 8000ff4:	3b40      	subs	r3, #64	@ 0x40
 8000ff6:	b2db      	uxtb	r3, r3
 8000ff8:	73fb      	strb	r3, [r7, #15]
    lcd_send_cmd(addr);
 8000ffa:	7bfb      	ldrb	r3, [r7, #15]
 8000ffc:	4618      	mov	r0, r3
 8000ffe:	f7ff ff75 	bl	8000eec <lcd_send_cmd>
}
 8001002:	bf00      	nop
 8001004:	3710      	adds	r7, #16
 8001006:	46bd      	mov	sp, r7
 8001008:	bd80      	pop	{r7, pc}

0800100a <lcd_send_string>:

static void lcd_send_string(char *str) {
 800100a:	b580      	push	{r7, lr}
 800100c:	b082      	sub	sp, #8
 800100e:	af00      	add	r7, sp, #0
 8001010:	6078      	str	r0, [r7, #4]
    while (*str) lcd_send_data(*str++);
 8001012:	e006      	b.n	8001022 <lcd_send_string+0x18>
 8001014:	687b      	ldr	r3, [r7, #4]
 8001016:	1c5a      	adds	r2, r3, #1
 8001018:	607a      	str	r2, [r7, #4]
 800101a:	781b      	ldrb	r3, [r3, #0]
 800101c:	4618      	mov	r0, r3
 800101e:	f7ff ff9f 	bl	8000f60 <lcd_send_data>
 8001022:	687b      	ldr	r3, [r7, #4]
 8001024:	781b      	ldrb	r3, [r3, #0]
 8001026:	2b00      	cmp	r3, #0
 8001028:	d1f4      	bne.n	8001014 <lcd_send_string+0xa>
}
 800102a:	bf00      	nop
 800102c:	bf00      	nop
 800102e:	3708      	adds	r7, #8
 8001030:	46bd      	mov	sp, r7
 8001032:	bd80      	pop	{r7, pc}

08001034 <display_init>:

void display_init(void) {
 8001034:	b580      	push	{r7, lr}
 8001036:	af00      	add	r7, sp, #0
    delay_ms(50);
 8001038:	2032      	movs	r0, #50	@ 0x32
 800103a:	f000 f8f1 	bl	8001220 <delay_ms>
    lcd_send_cmd(0x33);
 800103e:	2033      	movs	r0, #51	@ 0x33
 8001040:	f7ff ff54 	bl	8000eec <lcd_send_cmd>
    lcd_send_cmd(0x32);
 8001044:	2032      	movs	r0, #50	@ 0x32
 8001046:	f7ff ff51 	bl	8000eec <lcd_send_cmd>
    lcd_send_cmd(0x28);
 800104a:	2028      	movs	r0, #40	@ 0x28
 800104c:	f7ff ff4e 	bl	8000eec <lcd_send_cmd>
    lcd_send_cmd(0x0C);
 8001050:	200c      	movs	r0, #12
 8001052:	f7ff ff4b 	bl	8000eec <lcd_send_cmd>
    lcd_send_cmd(0x06);
 8001056:	2006      	movs	r0, #6
 8001058:	f7ff ff48 	bl	8000eec <lcd_send_cmd>
    lcd_send_cmd(0x01);
 800105c:	2001      	movs	r0, #1
 800105e:	f7ff ff45 	bl	8000eec <lcd_send_cmd>
    delay_ms(2);
 8001062:	2002      	movs	r0, #2
 8001064:	f000 f8dc 	bl	8001220 <delay_ms>
}
 8001068:	bf00      	nop
 800106a:	bd80      	pop	{r7, pc}

0800106c <updateDisplay>:

void updateDisplay(float gas_ppm, bool is_reset) {
 800106c:	b580      	push	{r7, lr}
 800106e:	b08a      	sub	sp, #40	@ 0x28
 8001070:	af00      	add	r7, sp, #0
 8001072:	ed87 0a01 	vstr	s0, [r7, #4]
 8001076:	4603      	mov	r3, r0
 8001078:	70fb      	strb	r3, [r7, #3]
    char buffer[20];
    if (is_reset) {
 800107a:	78fb      	ldrb	r3, [r7, #3]
 800107c:	2b00      	cmp	r3, #0
 800107e:	d020      	beq.n	80010c2 <updateDisplay+0x56>
        // Hiển thị trạng thái reset
        snprintf(buffer, sizeof(buffer), "%-16s", "Gas: -- ppm"); // Padding lên 16 ký tự
 8001080:	f107 000c 	add.w	r0, r7, #12
 8001084:	4b2a      	ldr	r3, [pc, #168]	@ (8001130 <updateDisplay+0xc4>)
 8001086:	4a2b      	ldr	r2, [pc, #172]	@ (8001134 <updateDisplay+0xc8>)
 8001088:	2114      	movs	r1, #20
 800108a:	f000 fc77 	bl	800197c <sniprintf>
        lcd_set_cursor(0, 0);
 800108e:	2100      	movs	r1, #0
 8001090:	2000      	movs	r0, #0
 8001092:	f7ff ff9f 	bl	8000fd4 <lcd_set_cursor>
        lcd_send_string(buffer);
 8001096:	f107 030c 	add.w	r3, r7, #12
 800109a:	4618      	mov	r0, r3
 800109c:	f7ff ffb5 	bl	800100a <lcd_send_string>
        snprintf(buffer, sizeof(buffer), "%-16s", "Status: RESET"); // Padding lên 16 ký tự
 80010a0:	f107 000c 	add.w	r0, r7, #12
 80010a4:	4b24      	ldr	r3, [pc, #144]	@ (8001138 <updateDisplay+0xcc>)
 80010a6:	4a23      	ldr	r2, [pc, #140]	@ (8001134 <updateDisplay+0xc8>)
 80010a8:	2114      	movs	r1, #20
 80010aa:	f000 fc67 	bl	800197c <sniprintf>
        lcd_set_cursor(1, 0);
 80010ae:	2100      	movs	r1, #0
 80010b0:	2001      	movs	r0, #1
 80010b2:	f7ff ff8f 	bl	8000fd4 <lcd_set_cursor>
        lcd_send_string(buffer);
 80010b6:	f107 030c 	add.w	r3, r7, #12
 80010ba:	4618      	mov	r0, r3
 80010bc:	f7ff ffa5 	bl	800100a <lcd_send_string>
        const char* status = stateStrings[state];
        snprintf(buffer, sizeof(buffer), "Status: %-8s", status); // Padding trạng thái lên 16 ký tự
        lcd_set_cursor(1, 0);
        lcd_send_string(buffer);
    }
}
 80010c0:	e031      	b.n	8001126 <updateDisplay+0xba>
        snprintf(buffer, sizeof(buffer), "Gas: %5d ppm    ", (int)gas_ppm); // Padding lên 16 ký tự
 80010c2:	edd7 7a01 	vldr	s15, [r7, #4]
 80010c6:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80010ca:	f107 000c 	add.w	r0, r7, #12
 80010ce:	ee17 3a90 	vmov	r3, s15
 80010d2:	4a1a      	ldr	r2, [pc, #104]	@ (800113c <updateDisplay+0xd0>)
 80010d4:	2114      	movs	r1, #20
 80010d6:	f000 fc51 	bl	800197c <sniprintf>
        lcd_set_cursor(0, 0);
 80010da:	2100      	movs	r1, #0
 80010dc:	2000      	movs	r0, #0
 80010de:	f7ff ff79 	bl	8000fd4 <lcd_set_cursor>
        lcd_send_string(buffer);
 80010e2:	f107 030c 	add.w	r3, r7, #12
 80010e6:	4618      	mov	r0, r3
 80010e8:	f7ff ff8f 	bl	800100a <lcd_send_string>
        SystemState state = getSystemState(gas_ppm);
 80010ec:	ed97 0a01 	vldr	s0, [r7, #4]
 80010f0:	f7ff fe84 	bl	8000dfc <getSystemState>
 80010f4:	4603      	mov	r3, r0
 80010f6:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
        const char* status = stateStrings[state];
 80010fa:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80010fe:	4a10      	ldr	r2, [pc, #64]	@ (8001140 <updateDisplay+0xd4>)
 8001100:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001104:	623b      	str	r3, [r7, #32]
        snprintf(buffer, sizeof(buffer), "Status: %-8s", status); // Padding trạng thái lên 16 ký tự
 8001106:	f107 000c 	add.w	r0, r7, #12
 800110a:	6a3b      	ldr	r3, [r7, #32]
 800110c:	4a0d      	ldr	r2, [pc, #52]	@ (8001144 <updateDisplay+0xd8>)
 800110e:	2114      	movs	r1, #20
 8001110:	f000 fc34 	bl	800197c <sniprintf>
        lcd_set_cursor(1, 0);
 8001114:	2100      	movs	r1, #0
 8001116:	2001      	movs	r0, #1
 8001118:	f7ff ff5c 	bl	8000fd4 <lcd_set_cursor>
        lcd_send_string(buffer);
 800111c:	f107 030c 	add.w	r3, r7, #12
 8001120:	4618      	mov	r0, r3
 8001122:	f7ff ff72 	bl	800100a <lcd_send_string>
}
 8001126:	bf00      	nop
 8001128:	3728      	adds	r7, #40	@ 0x28
 800112a:	46bd      	mov	sp, r7
 800112c:	bd80      	pop	{r7, pc}
 800112e:	bf00      	nop
 8001130:	080031d4 	.word	0x080031d4
 8001134:	080031e0 	.word	0x080031e0
 8001138:	080031e8 	.word	0x080031e8
 800113c:	080031f8 	.word	0x080031f8
 8001140:	20000000 	.word	0x20000000
 8001144:	0800320c 	.word	0x0800320c

08001148 <updateDisplayStopped>:

void updateDisplayStopped(void) {
 8001148:	b580      	push	{r7, lr}
 800114a:	b086      	sub	sp, #24
 800114c:	af00      	add	r7, sp, #0
    char buffer[20];
    snprintf(buffer, sizeof(buffer), "%-16s", ""); // 16 khoảng trắng
 800114e:	1d38      	adds	r0, r7, #4
 8001150:	4b0f      	ldr	r3, [pc, #60]	@ (8001190 <updateDisplayStopped+0x48>)
 8001152:	4a10      	ldr	r2, [pc, #64]	@ (8001194 <updateDisplayStopped+0x4c>)
 8001154:	2114      	movs	r1, #20
 8001156:	f000 fc11 	bl	800197c <sniprintf>
    lcd_set_cursor(0, 0);
 800115a:	2100      	movs	r1, #0
 800115c:	2000      	movs	r0, #0
 800115e:	f7ff ff39 	bl	8000fd4 <lcd_set_cursor>
    lcd_send_string(buffer);
 8001162:	1d3b      	adds	r3, r7, #4
 8001164:	4618      	mov	r0, r3
 8001166:	f7ff ff50 	bl	800100a <lcd_send_string>
    snprintf(buffer, sizeof(buffer), "%-16s", "Status: STOPPED"); // Padding lên 16 ký tự
 800116a:	1d38      	adds	r0, r7, #4
 800116c:	4b0a      	ldr	r3, [pc, #40]	@ (8001198 <updateDisplayStopped+0x50>)
 800116e:	4a09      	ldr	r2, [pc, #36]	@ (8001194 <updateDisplayStopped+0x4c>)
 8001170:	2114      	movs	r1, #20
 8001172:	f000 fc03 	bl	800197c <sniprintf>
    lcd_set_cursor(1, 0);
 8001176:	2100      	movs	r1, #0
 8001178:	2001      	movs	r0, #1
 800117a:	f7ff ff2b 	bl	8000fd4 <lcd_set_cursor>
    lcd_send_string(buffer);
 800117e:	1d3b      	adds	r3, r7, #4
 8001180:	4618      	mov	r0, r3
 8001182:	f7ff ff42 	bl	800100a <lcd_send_string>
}
 8001186:	bf00      	nop
 8001188:	3718      	adds	r7, #24
 800118a:	46bd      	mov	sp, r7
 800118c:	bd80      	pop	{r7, pc}
 800118e:	bf00      	nop
 8001190:	0800321c 	.word	0x0800321c
 8001194:	080031e0 	.word	0x080031e0
 8001198:	08003220 	.word	0x08003220

0800119c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800119c:	b480      	push	{r7}
 800119e:	b083      	sub	sp, #12
 80011a0:	af00      	add	r7, sp, #0
 80011a2:	4603      	mov	r3, r0
 80011a4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80011a6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80011aa:	2b00      	cmp	r3, #0
 80011ac:	db0b      	blt.n	80011c6 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80011ae:	79fb      	ldrb	r3, [r7, #7]
 80011b0:	f003 021f 	and.w	r2, r3, #31
 80011b4:	4907      	ldr	r1, [pc, #28]	@ (80011d4 <__NVIC_EnableIRQ+0x38>)
 80011b6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80011ba:	095b      	lsrs	r3, r3, #5
 80011bc:	2001      	movs	r0, #1
 80011be:	fa00 f202 	lsl.w	r2, r0, r2
 80011c2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80011c6:	bf00      	nop
 80011c8:	370c      	adds	r7, #12
 80011ca:	46bd      	mov	sp, r7
 80011cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011d0:	4770      	bx	lr
 80011d2:	bf00      	nop
 80011d4:	e000e100 	.word	0xe000e100

080011d8 <__NVIC_DisableIRQ>:
  \details Disables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
 80011d8:	b480      	push	{r7}
 80011da:	b083      	sub	sp, #12
 80011dc:	af00      	add	r7, sp, #0
 80011de:	4603      	mov	r3, r0
 80011e0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80011e2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80011e6:	2b00      	cmp	r3, #0
 80011e8:	db12      	blt.n	8001210 <__NVIC_DisableIRQ+0x38>
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80011ea:	79fb      	ldrb	r3, [r7, #7]
 80011ec:	f003 021f 	and.w	r2, r3, #31
 80011f0:	490a      	ldr	r1, [pc, #40]	@ (800121c <__NVIC_DisableIRQ+0x44>)
 80011f2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80011f6:	095b      	lsrs	r3, r3, #5
 80011f8:	2001      	movs	r0, #1
 80011fa:	fa00 f202 	lsl.w	r2, r0, r2
 80011fe:	3320      	adds	r3, #32
 8001200:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8001204:	f3bf 8f4f 	dsb	sy
}
 8001208:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 800120a:	f3bf 8f6f 	isb	sy
}
 800120e:	bf00      	nop
    __DSB();
    __ISB();
  }
}
 8001210:	bf00      	nop
 8001212:	370c      	adds	r7, #12
 8001214:	46bd      	mov	sp, r7
 8001216:	f85d 7b04 	ldr.w	r7, [sp], #4
 800121a:	4770      	bx	lr
 800121c:	e000e100 	.word	0xe000e100

08001220 <delay_ms>:
static volatile uint8_t prev_btn2 = 1;
extern volatile uint8_t system_running;
extern volatile uint32_t safe_timer;

// Hàm delay bằng SysTick
void delay_ms(uint32_t ms) {
 8001220:	b480      	push	{r7}
 8001222:	b085      	sub	sp, #20
 8001224:	af00      	add	r7, sp, #0
 8001226:	6078      	str	r0, [r7, #4]
    SysTick->LOAD = 16000 - 1;  // 1ms với HCLK 16MHz
 8001228:	4b11      	ldr	r3, [pc, #68]	@ (8001270 <delay_ms+0x50>)
 800122a:	f643 627f 	movw	r2, #15999	@ 0x3e7f
 800122e:	605a      	str	r2, [r3, #4]
    SysTick->VAL = 0;
 8001230:	4b0f      	ldr	r3, [pc, #60]	@ (8001270 <delay_ms+0x50>)
 8001232:	2200      	movs	r2, #0
 8001234:	609a      	str	r2, [r3, #8]
    SysTick->CTRL = 5;
 8001236:	4b0e      	ldr	r3, [pc, #56]	@ (8001270 <delay_ms+0x50>)
 8001238:	2205      	movs	r2, #5
 800123a:	601a      	str	r2, [r3, #0]
    for(uint32_t i = 0; i < ms; i++) {
 800123c:	2300      	movs	r3, #0
 800123e:	60fb      	str	r3, [r7, #12]
 8001240:	e009      	b.n	8001256 <delay_ms+0x36>
        while(!(SysTick->CTRL & (1 << 16)));
 8001242:	bf00      	nop
 8001244:	4b0a      	ldr	r3, [pc, #40]	@ (8001270 <delay_ms+0x50>)
 8001246:	681b      	ldr	r3, [r3, #0]
 8001248:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800124c:	2b00      	cmp	r3, #0
 800124e:	d0f9      	beq.n	8001244 <delay_ms+0x24>
    for(uint32_t i = 0; i < ms; i++) {
 8001250:	68fb      	ldr	r3, [r7, #12]
 8001252:	3301      	adds	r3, #1
 8001254:	60fb      	str	r3, [r7, #12]
 8001256:	68fa      	ldr	r2, [r7, #12]
 8001258:	687b      	ldr	r3, [r7, #4]
 800125a:	429a      	cmp	r2, r3
 800125c:	d3f1      	bcc.n	8001242 <delay_ms+0x22>
    }
    SysTick->CTRL = 0;
 800125e:	4b04      	ldr	r3, [pc, #16]	@ (8001270 <delay_ms+0x50>)
 8001260:	2200      	movs	r2, #0
 8001262:	601a      	str	r2, [r3, #0]
}
 8001264:	bf00      	nop
 8001266:	3714      	adds	r7, #20
 8001268:	46bd      	mov	sp, r7
 800126a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800126e:	4770      	bx	lr
 8001270:	e000e010 	.word	0xe000e010

08001274 <SystemClock_Config>:

// Cấu hình clock (HSI 16MHz mặc định)
static void SystemClock_Config(void) {
 8001274:	b480      	push	{r7}
 8001276:	af00      	add	r7, sp, #0

}
 8001278:	bf00      	nop
 800127a:	46bd      	mov	sp, r7
 800127c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001280:	4770      	bx	lr
	...

08001284 <GPIO_Init>:

// Cấu hình GPIO cho LED, relay, còi và nút bấm
static void GPIO_Init(void) {
 8001284:	b480      	push	{r7}
 8001286:	af00      	add	r7, sp, #0
    RCC->AHB1ENR |= RCC_AHB1ENR_GPIOAEN | RCC_AHB1ENR_GPIOBEN | RCC_AHB1ENR_GPIOCEN;
 8001288:	4b30      	ldr	r3, [pc, #192]	@ (800134c <GPIO_Init+0xc8>)
 800128a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800128c:	4a2f      	ldr	r2, [pc, #188]	@ (800134c <GPIO_Init+0xc8>)
 800128e:	f043 0307 	orr.w	r3, r3, #7
 8001292:	6313      	str	r3, [r2, #48]	@ 0x30

    // PC13, PC12: input pull-up cho SW1, SW2
    GPIOC->MODER &= ~((3 << (13 * 2)) | (3 << (12 * 2)));
 8001294:	4b2e      	ldr	r3, [pc, #184]	@ (8001350 <GPIO_Init+0xcc>)
 8001296:	681b      	ldr	r3, [r3, #0]
 8001298:	4a2d      	ldr	r2, [pc, #180]	@ (8001350 <GPIO_Init+0xcc>)
 800129a:	f023 6370 	bic.w	r3, r3, #251658240	@ 0xf000000
 800129e:	6013      	str	r3, [r2, #0]
    GPIOC->PUPDR &= ~((3 << (13 * 2)) | (3 << (12 * 2)));
 80012a0:	4b2b      	ldr	r3, [pc, #172]	@ (8001350 <GPIO_Init+0xcc>)
 80012a2:	68db      	ldr	r3, [r3, #12]
 80012a4:	4a2a      	ldr	r2, [pc, #168]	@ (8001350 <GPIO_Init+0xcc>)
 80012a6:	f023 6370 	bic.w	r3, r3, #251658240	@ 0xf000000
 80012aa:	60d3      	str	r3, [r2, #12]
    GPIOC->PUPDR |= (1 << (13 * 2)) | (1 << (12 * 2));
 80012ac:	4b28      	ldr	r3, [pc, #160]	@ (8001350 <GPIO_Init+0xcc>)
 80012ae:	68db      	ldr	r3, [r3, #12]
 80012b0:	4a27      	ldr	r2, [pc, #156]	@ (8001350 <GPIO_Init+0xcc>)
 80012b2:	f043 63a0 	orr.w	r3, r3, #83886080	@ 0x5000000
 80012b6:	60d3      	str	r3, [r2, #12]

    // PA1 (relay), PA5 (còi), PA6 (ESP): output
    GPIOA->MODER &= ~((3 << (1 * 2)) | (3 << (5 * 2)) | (3 << (6 * 2)));
 80012b8:	4b26      	ldr	r3, [pc, #152]	@ (8001354 <GPIO_Init+0xd0>)
 80012ba:	681b      	ldr	r3, [r3, #0]
 80012bc:	4a25      	ldr	r2, [pc, #148]	@ (8001354 <GPIO_Init+0xd0>)
 80012be:	f423 5370 	bic.w	r3, r3, #15360	@ 0x3c00
 80012c2:	f023 030c 	bic.w	r3, r3, #12
 80012c6:	6013      	str	r3, [r2, #0]
    GPIOA->MODER |= (1 << (1 * 2)) | (1 << (5 * 2)) | (1 << (6 * 2));
 80012c8:	4b22      	ldr	r3, [pc, #136]	@ (8001354 <GPIO_Init+0xd0>)
 80012ca:	681b      	ldr	r3, [r3, #0]
 80012cc:	4a21      	ldr	r2, [pc, #132]	@ (8001354 <GPIO_Init+0xd0>)
 80012ce:	f443 53a0 	orr.w	r3, r3, #5120	@ 0x1400
 80012d2:	f043 0304 	orr.w	r3, r3, #4
 80012d6:	6013      	str	r3, [r2, #0]
    GPIOA->OTYPER &= ~((1 << 1) | (1 << 5) | (1 << 6));
 80012d8:	4b1e      	ldr	r3, [pc, #120]	@ (8001354 <GPIO_Init+0xd0>)
 80012da:	685b      	ldr	r3, [r3, #4]
 80012dc:	4a1d      	ldr	r2, [pc, #116]	@ (8001354 <GPIO_Init+0xd0>)
 80012de:	f023 0362 	bic.w	r3, r3, #98	@ 0x62
 80012e2:	6053      	str	r3, [r2, #4]
    GPIOA->OSPEEDR |= (3 << (1 * 2)) | (3 << (5 * 2)) | (2 << (6 * 2));
 80012e4:	4b1b      	ldr	r3, [pc, #108]	@ (8001354 <GPIO_Init+0xd0>)
 80012e6:	689b      	ldr	r3, [r3, #8]
 80012e8:	4a1a      	ldr	r2, [pc, #104]	@ (8001354 <GPIO_Init+0xd0>)
 80012ea:	f443 5330 	orr.w	r3, r3, #11264	@ 0x2c00
 80012ee:	f043 030c 	orr.w	r3, r3, #12
 80012f2:	6093      	str	r3, [r2, #8]
    GPIOA->PUPDR &= ~((3 << (1 * 2)) | (3 << (5 * 2)) | (3 << (6 * 2)));
 80012f4:	4b17      	ldr	r3, [pc, #92]	@ (8001354 <GPIO_Init+0xd0>)
 80012f6:	68db      	ldr	r3, [r3, #12]
 80012f8:	4a16      	ldr	r2, [pc, #88]	@ (8001354 <GPIO_Init+0xd0>)
 80012fa:	f423 5370 	bic.w	r3, r3, #15360	@ 0x3c00
 80012fe:	f023 030c 	bic.w	r3, r3, #12
 8001302:	60d3      	str	r3, [r2, #12]

    // PB1 (LED đỏ), PB2 (LED vàng), PB3 (LED xanh), PB4 (LED xanh lá): output
    GPIOB->MODER &= ~((3 << (1 * 2)) | (3 << (2 * 2)) | (3 << (3 * 2)) | (3 << (4 * 2)));
 8001304:	4b14      	ldr	r3, [pc, #80]	@ (8001358 <GPIO_Init+0xd4>)
 8001306:	681b      	ldr	r3, [r3, #0]
 8001308:	4a13      	ldr	r2, [pc, #76]	@ (8001358 <GPIO_Init+0xd4>)
 800130a:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 800130e:	6013      	str	r3, [r2, #0]
    GPIOB->MODER |= (1 << (1 * 2)) | (1 << (2 * 2)) | (1 << (3 * 2)) | (1 << (4 * 2));
 8001310:	4b11      	ldr	r3, [pc, #68]	@ (8001358 <GPIO_Init+0xd4>)
 8001312:	681b      	ldr	r3, [r3, #0]
 8001314:	4a10      	ldr	r2, [pc, #64]	@ (8001358 <GPIO_Init+0xd4>)
 8001316:	f443 73aa 	orr.w	r3, r3, #340	@ 0x154
 800131a:	6013      	str	r3, [r2, #0]
    GPIOB->OTYPER &= ~((1 << 1) | (1 << 2) | (1 << 3) | (1 << 4));
 800131c:	4b0e      	ldr	r3, [pc, #56]	@ (8001358 <GPIO_Init+0xd4>)
 800131e:	685b      	ldr	r3, [r3, #4]
 8001320:	4a0d      	ldr	r2, [pc, #52]	@ (8001358 <GPIO_Init+0xd4>)
 8001322:	f023 031e 	bic.w	r3, r3, #30
 8001326:	6053      	str	r3, [r2, #4]
    GPIOB->OSPEEDR |= (3 << (1 * 2)) | (3 << (2 * 2)) | (3 << (3 * 2)) | (3 << (4 * 2));
 8001328:	4b0b      	ldr	r3, [pc, #44]	@ (8001358 <GPIO_Init+0xd4>)
 800132a:	689b      	ldr	r3, [r3, #8]
 800132c:	4a0a      	ldr	r2, [pc, #40]	@ (8001358 <GPIO_Init+0xd4>)
 800132e:	f443 737f 	orr.w	r3, r3, #1020	@ 0x3fc
 8001332:	6093      	str	r3, [r2, #8]
    GPIOB->PUPDR &= ~((3 << (1 * 2)) | (3 << (2 * 2)) | (3 << (3 * 2)) | (3 << (4 * 2)));
 8001334:	4b08      	ldr	r3, [pc, #32]	@ (8001358 <GPIO_Init+0xd4>)
 8001336:	68db      	ldr	r3, [r3, #12]
 8001338:	4a07      	ldr	r2, [pc, #28]	@ (8001358 <GPIO_Init+0xd4>)
 800133a:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 800133e:	60d3      	str	r3, [r2, #12]
}
 8001340:	bf00      	nop
 8001342:	46bd      	mov	sp, r7
 8001344:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001348:	4770      	bx	lr
 800134a:	bf00      	nop
 800134c:	40023800 	.word	0x40023800
 8001350:	40020800 	.word	0x40020800
 8001354:	40020000 	.word	0x40020000
 8001358:	40020400 	.word	0x40020400

0800135c <ADC1_Init>:

// Cấu hình ADC1 tại PA0
static void ADC1_Init(void) {
 800135c:	b480      	push	{r7}
 800135e:	af00      	add	r7, sp, #0
    RCC->APB2ENR |= RCC_APB2ENR_ADC1EN;
 8001360:	4b17      	ldr	r3, [pc, #92]	@ (80013c0 <ADC1_Init+0x64>)
 8001362:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001364:	4a16      	ldr	r2, [pc, #88]	@ (80013c0 <ADC1_Init+0x64>)
 8001366:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800136a:	6453      	str	r3, [r2, #68]	@ 0x44
    RCC->AHB1ENR |= RCC_AHB1ENR_GPIOAEN;
 800136c:	4b14      	ldr	r3, [pc, #80]	@ (80013c0 <ADC1_Init+0x64>)
 800136e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001370:	4a13      	ldr	r2, [pc, #76]	@ (80013c0 <ADC1_Init+0x64>)
 8001372:	f043 0301 	orr.w	r3, r3, #1
 8001376:	6313      	str	r3, [r2, #48]	@ 0x30

    GPIOA->MODER |= (3 << (0 * 2));
 8001378:	4b12      	ldr	r3, [pc, #72]	@ (80013c4 <ADC1_Init+0x68>)
 800137a:	681b      	ldr	r3, [r3, #0]
 800137c:	4a11      	ldr	r2, [pc, #68]	@ (80013c4 <ADC1_Init+0x68>)
 800137e:	f043 0303 	orr.w	r3, r3, #3
 8001382:	6013      	str	r3, [r2, #0]
    GPIOA->PUPDR &= ~(3 << (0 * 2));
 8001384:	4b0f      	ldr	r3, [pc, #60]	@ (80013c4 <ADC1_Init+0x68>)
 8001386:	68db      	ldr	r3, [r3, #12]
 8001388:	4a0e      	ldr	r2, [pc, #56]	@ (80013c4 <ADC1_Init+0x68>)
 800138a:	f023 0303 	bic.w	r3, r3, #3
 800138e:	60d3      	str	r3, [r2, #12]

    ADC1->CR2 = 0;
 8001390:	4b0d      	ldr	r3, [pc, #52]	@ (80013c8 <ADC1_Init+0x6c>)
 8001392:	2200      	movs	r2, #0
 8001394:	609a      	str	r2, [r3, #8]
    ADC1->SQR3 = 0;
 8001396:	4b0c      	ldr	r3, [pc, #48]	@ (80013c8 <ADC1_Init+0x6c>)
 8001398:	2200      	movs	r2, #0
 800139a:	635a      	str	r2, [r3, #52]	@ 0x34
    ADC1->SMPR2 |= (7 << 0);
 800139c:	4b0a      	ldr	r3, [pc, #40]	@ (80013c8 <ADC1_Init+0x6c>)
 800139e:	691b      	ldr	r3, [r3, #16]
 80013a0:	4a09      	ldr	r2, [pc, #36]	@ (80013c8 <ADC1_Init+0x6c>)
 80013a2:	f043 0307 	orr.w	r3, r3, #7
 80013a6:	6113      	str	r3, [r2, #16]
    ADC1->CR2 |= ADC_CR2_ADON;
 80013a8:	4b07      	ldr	r3, [pc, #28]	@ (80013c8 <ADC1_Init+0x6c>)
 80013aa:	689b      	ldr	r3, [r3, #8]
 80013ac:	4a06      	ldr	r2, [pc, #24]	@ (80013c8 <ADC1_Init+0x6c>)
 80013ae:	f043 0301 	orr.w	r3, r3, #1
 80013b2:	6093      	str	r3, [r2, #8]
}
 80013b4:	bf00      	nop
 80013b6:	46bd      	mov	sp, r7
 80013b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013bc:	4770      	bx	lr
 80013be:	bf00      	nop
 80013c0:	40023800 	.word	0x40023800
 80013c4:	40020000 	.word	0x40020000
 80013c8:	40012000 	.word	0x40012000

080013cc <I2C1_Init>:

// Cấu hình I2C1 cho LCD
static void I2C1_Init(void) {
 80013cc:	b480      	push	{r7}
 80013ce:	af00      	add	r7, sp, #0
    RCC->AHB1ENR |= RCC_AHB1ENR_GPIOBEN;
 80013d0:	4b21      	ldr	r3, [pc, #132]	@ (8001458 <I2C1_Init+0x8c>)
 80013d2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80013d4:	4a20      	ldr	r2, [pc, #128]	@ (8001458 <I2C1_Init+0x8c>)
 80013d6:	f043 0302 	orr.w	r3, r3, #2
 80013da:	6313      	str	r3, [r2, #48]	@ 0x30
    RCC->APB1ENR |= RCC_APB1ENR_I2C1EN;
 80013dc:	4b1e      	ldr	r3, [pc, #120]	@ (8001458 <I2C1_Init+0x8c>)
 80013de:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80013e0:	4a1d      	ldr	r2, [pc, #116]	@ (8001458 <I2C1_Init+0x8c>)
 80013e2:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 80013e6:	6413      	str	r3, [r2, #64]	@ 0x40

    GPIOB->MODER &= ~((3 << (8 * 2)) | (3 << (9 * 2)));
 80013e8:	4b1c      	ldr	r3, [pc, #112]	@ (800145c <I2C1_Init+0x90>)
 80013ea:	681b      	ldr	r3, [r3, #0]
 80013ec:	4a1b      	ldr	r2, [pc, #108]	@ (800145c <I2C1_Init+0x90>)
 80013ee:	f423 2370 	bic.w	r3, r3, #983040	@ 0xf0000
 80013f2:	6013      	str	r3, [r2, #0]
    GPIOB->MODER |= (2 << (8 * 2)) | (2 << (9 * 2));
 80013f4:	4b19      	ldr	r3, [pc, #100]	@ (800145c <I2C1_Init+0x90>)
 80013f6:	681b      	ldr	r3, [r3, #0]
 80013f8:	4a18      	ldr	r2, [pc, #96]	@ (800145c <I2C1_Init+0x90>)
 80013fa:	f443 2320 	orr.w	r3, r3, #655360	@ 0xa0000
 80013fe:	6013      	str	r3, [r2, #0]
    GPIOB->AFR[1] &= ~((0xF << 0) | (0xF << 4));
 8001400:	4b16      	ldr	r3, [pc, #88]	@ (800145c <I2C1_Init+0x90>)
 8001402:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001404:	4a15      	ldr	r2, [pc, #84]	@ (800145c <I2C1_Init+0x90>)
 8001406:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 800140a:	6253      	str	r3, [r2, #36]	@ 0x24
    GPIOB->AFR[1] |= (4 << 0) | (4 << 4);
 800140c:	4b13      	ldr	r3, [pc, #76]	@ (800145c <I2C1_Init+0x90>)
 800140e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001410:	4a12      	ldr	r2, [pc, #72]	@ (800145c <I2C1_Init+0x90>)
 8001412:	f043 0344 	orr.w	r3, r3, #68	@ 0x44
 8001416:	6253      	str	r3, [r2, #36]	@ 0x24
    GPIOB->OTYPER |= (1 << 8) | (1 << 9);
 8001418:	4b10      	ldr	r3, [pc, #64]	@ (800145c <I2C1_Init+0x90>)
 800141a:	685b      	ldr	r3, [r3, #4]
 800141c:	4a0f      	ldr	r2, [pc, #60]	@ (800145c <I2C1_Init+0x90>)
 800141e:	f443 7340 	orr.w	r3, r3, #768	@ 0x300
 8001422:	6053      	str	r3, [r2, #4]
    GPIOB->PUPDR &= ~((3 << (8 * 2)) | (3 << (9 * 2)));
 8001424:	4b0d      	ldr	r3, [pc, #52]	@ (800145c <I2C1_Init+0x90>)
 8001426:	68db      	ldr	r3, [r3, #12]
 8001428:	4a0c      	ldr	r2, [pc, #48]	@ (800145c <I2C1_Init+0x90>)
 800142a:	f423 2370 	bic.w	r3, r3, #983040	@ 0xf0000
 800142e:	60d3      	str	r3, [r2, #12]

    I2C1->CR2 = 16;
 8001430:	4b0b      	ldr	r3, [pc, #44]	@ (8001460 <I2C1_Init+0x94>)
 8001432:	2210      	movs	r2, #16
 8001434:	605a      	str	r2, [r3, #4]
    I2C1->CCR = 80;
 8001436:	4b0a      	ldr	r3, [pc, #40]	@ (8001460 <I2C1_Init+0x94>)
 8001438:	2250      	movs	r2, #80	@ 0x50
 800143a:	61da      	str	r2, [r3, #28]
    I2C1->TRISE = 17;
 800143c:	4b08      	ldr	r3, [pc, #32]	@ (8001460 <I2C1_Init+0x94>)
 800143e:	2211      	movs	r2, #17
 8001440:	621a      	str	r2, [r3, #32]
    I2C1->CR1 |= I2C_CR1_PE;
 8001442:	4b07      	ldr	r3, [pc, #28]	@ (8001460 <I2C1_Init+0x94>)
 8001444:	681b      	ldr	r3, [r3, #0]
 8001446:	4a06      	ldr	r2, [pc, #24]	@ (8001460 <I2C1_Init+0x94>)
 8001448:	f043 0301 	orr.w	r3, r3, #1
 800144c:	6013      	str	r3, [r2, #0]
}
 800144e:	bf00      	nop
 8001450:	46bd      	mov	sp, r7
 8001452:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001456:	4770      	bx	lr
 8001458:	40023800 	.word	0x40023800
 800145c:	40020400 	.word	0x40020400
 8001460:	40005400 	.word	0x40005400

08001464 <Timer2_Init>:

// Cấu hình Timer2 cho nhấp nháy LED
static void Timer2_Init(void) {
 8001464:	b580      	push	{r7, lr}
 8001466:	af00      	add	r7, sp, #0
    RCC->APB1ENR |= RCC_APB1ENR_TIM2EN;
 8001468:	4b12      	ldr	r3, [pc, #72]	@ (80014b4 <Timer2_Init+0x50>)
 800146a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800146c:	4a11      	ldr	r2, [pc, #68]	@ (80014b4 <Timer2_Init+0x50>)
 800146e:	f043 0301 	orr.w	r3, r3, #1
 8001472:	6413      	str	r3, [r2, #64]	@ 0x40
    TIM2->PSC = 36000 - 1;
 8001474:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8001478:	f648 429f 	movw	r2, #35999	@ 0x8c9f
 800147c:	629a      	str	r2, [r3, #40]	@ 0x28
    TIM2->ARR = 500;
 800147e:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8001482:	f44f 72fa 	mov.w	r2, #500	@ 0x1f4
 8001486:	62da      	str	r2, [r3, #44]	@ 0x2c
    TIM2->DIER |= TIM_DIER_UIE;
 8001488:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 800148c:	68db      	ldr	r3, [r3, #12]
 800148e:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8001492:	f043 0301 	orr.w	r3, r3, #1
 8001496:	60d3      	str	r3, [r2, #12]
    TIM2->CR1 |= TIM_CR1_CEN;
 8001498:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 800149c:	681b      	ldr	r3, [r3, #0]
 800149e:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 80014a2:	f043 0301 	orr.w	r3, r3, #1
 80014a6:	6013      	str	r3, [r2, #0]
    NVIC_EnableIRQ(TIM2_IRQn);
 80014a8:	201c      	movs	r0, #28
 80014aa:	f7ff fe77 	bl	800119c <__NVIC_EnableIRQ>
}
 80014ae:	bf00      	nop
 80014b0:	bd80      	pop	{r7, pc}
 80014b2:	bf00      	nop
 80014b4:	40023800 	.word	0x40023800

080014b8 <initHardware>:

// Khởi tạo tất cả phần cứng
void initHardware(void) {
 80014b8:	b580      	push	{r7, lr}
 80014ba:	af00      	add	r7, sp, #0
    SystemClock_Config();
 80014bc:	f7ff feda 	bl	8001274 <SystemClock_Config>
    GPIO_Init();
 80014c0:	f7ff fee0 	bl	8001284 <GPIO_Init>
    ADC1_Init();
 80014c4:	f7ff ff4a 	bl	800135c <ADC1_Init>
    I2C1_Init();
 80014c8:	f7ff ff80 	bl	80013cc <I2C1_Init>
    USART2_Init();
 80014cc:	f000 f884 	bl	80015d8 <USART2_Init>
    Timer2_Init();
 80014d0:	f7ff ffc8 	bl	8001464 <Timer2_Init>
}
 80014d4:	bf00      	nop
 80014d6:	bd80      	pop	{r7, pc}

080014d8 <handleSystemState>:

// Xử lý trạng thái nút bấm
void handleSystemState(void) {
 80014d8:	b580      	push	{r7, lr}
 80014da:	b082      	sub	sp, #8
 80014dc:	af00      	add	r7, sp, #0
    uint8_t btn1 = (GPIOC->IDR & (1 << 13)) ? 1 : 0;  // SW1 - PC13
 80014de:	4b37      	ldr	r3, [pc, #220]	@ (80015bc <handleSystemState+0xe4>)
 80014e0:	691b      	ldr	r3, [r3, #16]
 80014e2:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80014e6:	2b00      	cmp	r3, #0
 80014e8:	bf14      	ite	ne
 80014ea:	2301      	movne	r3, #1
 80014ec:	2300      	moveq	r3, #0
 80014ee:	b2db      	uxtb	r3, r3
 80014f0:	71fb      	strb	r3, [r7, #7]
    uint8_t btn2 = (GPIOC->IDR & (1 << 12)) ? 1 : 0;  // SW2 - PC12
 80014f2:	4b32      	ldr	r3, [pc, #200]	@ (80015bc <handleSystemState+0xe4>)
 80014f4:	691b      	ldr	r3, [r3, #16]
 80014f6:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80014fa:	2b00      	cmp	r3, #0
 80014fc:	bf14      	ite	ne
 80014fe:	2301      	movne	r3, #1
 8001500:	2300      	moveq	r3, #0
 8001502:	b2db      	uxtb	r3, r3
 8001504:	71bb      	strb	r3, [r7, #6]

    // Phát hiện cạnh xuống SW1
    if (prev_btn1 == 1 && btn1 == 0) {
 8001506:	4b2e      	ldr	r3, [pc, #184]	@ (80015c0 <handleSystemState+0xe8>)
 8001508:	781b      	ldrb	r3, [r3, #0]
 800150a:	b2db      	uxtb	r3, r3
 800150c:	2b01      	cmp	r3, #1
 800150e:	d11c      	bne.n	800154a <handleSystemState+0x72>
 8001510:	79fb      	ldrb	r3, [r7, #7]
 8001512:	2b00      	cmp	r3, #0
 8001514:	d119      	bne.n	800154a <handleSystemState+0x72>
        system_running = !system_running;
 8001516:	4b2b      	ldr	r3, [pc, #172]	@ (80015c4 <handleSystemState+0xec>)
 8001518:	781b      	ldrb	r3, [r3, #0]
 800151a:	b2db      	uxtb	r3, r3
 800151c:	2b00      	cmp	r3, #0
 800151e:	bf0c      	ite	eq
 8001520:	2301      	moveq	r3, #1
 8001522:	2300      	movne	r3, #0
 8001524:	b2db      	uxtb	r3, r3
 8001526:	461a      	mov	r2, r3
 8001528:	4b26      	ldr	r3, [pc, #152]	@ (80015c4 <handleSystemState+0xec>)
 800152a:	701a      	strb	r2, [r3, #0]
        GPIOB->ODR &= ~((1 << 1) | (1 << 2) | (1 << 3) | (1 << 4));
 800152c:	4b26      	ldr	r3, [pc, #152]	@ (80015c8 <handleSystemState+0xf0>)
 800152e:	695b      	ldr	r3, [r3, #20]
 8001530:	4a25      	ldr	r2, [pc, #148]	@ (80015c8 <handleSystemState+0xf0>)
 8001532:	f023 031e 	bic.w	r3, r3, #30
 8001536:	6153      	str	r3, [r2, #20]
        GPIOA->ODR &= ~((1 << 1) | (1 << 5) | (1 << 6));
 8001538:	4b24      	ldr	r3, [pc, #144]	@ (80015cc <handleSystemState+0xf4>)
 800153a:	695b      	ldr	r3, [r3, #20]
 800153c:	4a23      	ldr	r2, [pc, #140]	@ (80015cc <handleSystemState+0xf4>)
 800153e:	f023 0362 	bic.w	r3, r3, #98	@ 0x62
 8001542:	6153      	str	r3, [r2, #20]
        delay_ms(200);
 8001544:	20c8      	movs	r0, #200	@ 0xc8
 8001546:	f7ff fe6b 	bl	8001220 <delay_ms>
    }
    prev_btn1 = btn1;
 800154a:	4a1d      	ldr	r2, [pc, #116]	@ (80015c0 <handleSystemState+0xe8>)
 800154c:	79fb      	ldrb	r3, [r7, #7]
 800154e:	7013      	strb	r3, [r2, #0]

    // Phát hiện cạnh xuống SW2
    if (prev_btn2 == 1 && btn2 == 0) {
 8001550:	4b1f      	ldr	r3, [pc, #124]	@ (80015d0 <handleSystemState+0xf8>)
 8001552:	781b      	ldrb	r3, [r3, #0]
 8001554:	b2db      	uxtb	r3, r3
 8001556:	2b01      	cmp	r3, #1
 8001558:	d128      	bne.n	80015ac <handleSystemState+0xd4>
 800155a:	79bb      	ldrb	r3, [r7, #6]
 800155c:	2b00      	cmp	r3, #0
 800155e:	d125      	bne.n	80015ac <handleSystemState+0xd4>
        system_running = 1; // Đảm bảo hệ thống hoạt động
 8001560:	4b18      	ldr	r3, [pc, #96]	@ (80015c4 <handleSystemState+0xec>)
 8001562:	2201      	movs	r2, #1
 8001564:	701a      	strb	r2, [r3, #0]
        safe_timer = 5; // Đặt thời gian reset là 5 giây
 8001566:	4b1b      	ldr	r3, [pc, #108]	@ (80015d4 <handleSystemState+0xfc>)
 8001568:	2205      	movs	r2, #5
 800156a:	601a      	str	r2, [r3, #0]
        TIM2->CR1 &= ~TIM_CR1_CEN;
 800156c:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8001570:	681b      	ldr	r3, [r3, #0]
 8001572:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8001576:	f023 0301 	bic.w	r3, r3, #1
 800157a:	6013      	str	r3, [r2, #0]
        NVIC_DisableIRQ(TIM2_IRQn);
 800157c:	201c      	movs	r0, #28
 800157e:	f7ff fe2b 	bl	80011d8 <__NVIC_DisableIRQ>
        GPIOB->ODR &= ~((1 << 1) | (1 << 2) | (1 << 4));
 8001582:	4b11      	ldr	r3, [pc, #68]	@ (80015c8 <handleSystemState+0xf0>)
 8001584:	695b      	ldr	r3, [r3, #20]
 8001586:	4a10      	ldr	r2, [pc, #64]	@ (80015c8 <handleSystemState+0xf0>)
 8001588:	f023 0316 	bic.w	r3, r3, #22
 800158c:	6153      	str	r3, [r2, #20]
        GPIOB->ODR |= (1 << 3);
 800158e:	4b0e      	ldr	r3, [pc, #56]	@ (80015c8 <handleSystemState+0xf0>)
 8001590:	695b      	ldr	r3, [r3, #20]
 8001592:	4a0d      	ldr	r2, [pc, #52]	@ (80015c8 <handleSystemState+0xf0>)
 8001594:	f043 0308 	orr.w	r3, r3, #8
 8001598:	6153      	str	r3, [r2, #20]
        GPIOA->ODR &= ~((1 << 1) | (1 << 5) | (1 << 6));
 800159a:	4b0c      	ldr	r3, [pc, #48]	@ (80015cc <handleSystemState+0xf4>)
 800159c:	695b      	ldr	r3, [r3, #20]
 800159e:	4a0b      	ldr	r2, [pc, #44]	@ (80015cc <handleSystemState+0xf4>)
 80015a0:	f023 0362 	bic.w	r3, r3, #98	@ 0x62
 80015a4:	6153      	str	r3, [r2, #20]
        delay_ms(200);
 80015a6:	20c8      	movs	r0, #200	@ 0xc8
 80015a8:	f7ff fe3a 	bl	8001220 <delay_ms>
    }
    prev_btn2 = btn2;
 80015ac:	4a08      	ldr	r2, [pc, #32]	@ (80015d0 <handleSystemState+0xf8>)
 80015ae:	79bb      	ldrb	r3, [r7, #6]
 80015b0:	7013      	strb	r3, [r2, #0]
}
 80015b2:	bf00      	nop
 80015b4:	3708      	adds	r7, #8
 80015b6:	46bd      	mov	sp, r7
 80015b8:	bd80      	pop	{r7, pc}
 80015ba:	bf00      	nop
 80015bc:	40020800 	.word	0x40020800
 80015c0:	20000010 	.word	0x20000010
 80015c4:	20000012 	.word	0x20000012
 80015c8:	40020400 	.word	0x40020400
 80015cc:	40020000 	.word	0x40020000
 80015d0:	20000011 	.word	0x20000011
 80015d4:	20000098 	.word	0x20000098

080015d8 <USART2_Init>:

// Khởi tạo USART2 @115200
void USART2_Init(void) {
 80015d8:	b480      	push	{r7}
 80015da:	b083      	sub	sp, #12
 80015dc:	af00      	add	r7, sp, #0
    RCC->AHB1ENR |= RCC_AHB1ENR_GPIOAEN;
 80015de:	4b1f      	ldr	r3, [pc, #124]	@ (800165c <USART2_Init+0x84>)
 80015e0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80015e2:	4a1e      	ldr	r2, [pc, #120]	@ (800165c <USART2_Init+0x84>)
 80015e4:	f043 0301 	orr.w	r3, r3, #1
 80015e8:	6313      	str	r3, [r2, #48]	@ 0x30
    RCC->APB1ENR |= RCC_APB1ENR_USART2EN;
 80015ea:	4b1c      	ldr	r3, [pc, #112]	@ (800165c <USART2_Init+0x84>)
 80015ec:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80015ee:	4a1b      	ldr	r2, [pc, #108]	@ (800165c <USART2_Init+0x84>)
 80015f0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80015f4:	6413      	str	r3, [r2, #64]	@ 0x40

    GPIOA->MODER &= ~((3 << (2 * 2)) | (3 << (3 * 2)));
 80015f6:	4b1a      	ldr	r3, [pc, #104]	@ (8001660 <USART2_Init+0x88>)
 80015f8:	681b      	ldr	r3, [r3, #0]
 80015fa:	4a19      	ldr	r2, [pc, #100]	@ (8001660 <USART2_Init+0x88>)
 80015fc:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8001600:	6013      	str	r3, [r2, #0]
    GPIOA->MODER |= (2 << (2 * 2)) | (2 << (3 * 2));
 8001602:	4b17      	ldr	r3, [pc, #92]	@ (8001660 <USART2_Init+0x88>)
 8001604:	681b      	ldr	r3, [r3, #0]
 8001606:	4a16      	ldr	r2, [pc, #88]	@ (8001660 <USART2_Init+0x88>)
 8001608:	f043 03a0 	orr.w	r3, r3, #160	@ 0xa0
 800160c:	6013      	str	r3, [r2, #0]
    GPIOA->AFR[0] &= ~((0xF << (2 * 4)) | (0xF << (3 * 4)));
 800160e:	4b14      	ldr	r3, [pc, #80]	@ (8001660 <USART2_Init+0x88>)
 8001610:	6a1b      	ldr	r3, [r3, #32]
 8001612:	4a13      	ldr	r2, [pc, #76]	@ (8001660 <USART2_Init+0x88>)
 8001614:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8001618:	6213      	str	r3, [r2, #32]
    GPIOA->AFR[0] |= (7 << (2 * 4)) | (7 << (3 * 4));
 800161a:	4b11      	ldr	r3, [pc, #68]	@ (8001660 <USART2_Init+0x88>)
 800161c:	6a1b      	ldr	r3, [r3, #32]
 800161e:	4a10      	ldr	r2, [pc, #64]	@ (8001660 <USART2_Init+0x88>)
 8001620:	f443 43ee 	orr.w	r3, r3, #30464	@ 0x7700
 8001624:	6213      	str	r3, [r2, #32]

    uint32_t div = (16 * 1000000 + 115200 / 2) / 115200;
 8001626:	238b      	movs	r3, #139	@ 0x8b
 8001628:	607b      	str	r3, [r7, #4]
    USART2->BRR = div;
 800162a:	4a0e      	ldr	r2, [pc, #56]	@ (8001664 <USART2_Init+0x8c>)
 800162c:	687b      	ldr	r3, [r7, #4]
 800162e:	6093      	str	r3, [r2, #8]
    USART2->CR1 = USART_CR1_TE | USART_CR1_RE | USART_CR1_UE;
 8001630:	4b0c      	ldr	r3, [pc, #48]	@ (8001664 <USART2_Init+0x8c>)
 8001632:	f242 020c 	movw	r2, #8204	@ 0x200c
 8001636:	60da      	str	r2, [r3, #12]
    for (volatile int i = 0; i < 1000; i++);
 8001638:	2300      	movs	r3, #0
 800163a:	603b      	str	r3, [r7, #0]
 800163c:	e002      	b.n	8001644 <USART2_Init+0x6c>
 800163e:	683b      	ldr	r3, [r7, #0]
 8001640:	3301      	adds	r3, #1
 8001642:	603b      	str	r3, [r7, #0]
 8001644:	683b      	ldr	r3, [r7, #0]
 8001646:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800164a:	dbf8      	blt.n	800163e <USART2_Init+0x66>
}
 800164c:	bf00      	nop
 800164e:	bf00      	nop
 8001650:	370c      	adds	r7, #12
 8001652:	46bd      	mov	sp, r7
 8001654:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001658:	4770      	bx	lr
 800165a:	bf00      	nop
 800165c:	40023800 	.word	0x40023800
 8001660:	40020000 	.word	0x40020000
 8001664:	40004400 	.word	0x40004400

08001668 <main>:
#include "alarm.h"

volatile uint8_t system_running = 1;
volatile uint32_t safe_timer = 0;

int main(void) {
 8001668:	b580      	push	{r7, lr}
 800166a:	b082      	sub	sp, #8
 800166c:	af00      	add	r7, sp, #0
    initHardware();
 800166e:	f7ff ff23 	bl	80014b8 <initHardware>
    display_init();
 8001672:	f7ff fcdf 	bl	8001034 <display_init>
    while (1) {
        handleSystemState();
 8001676:	f7ff ff2f 	bl	80014d8 <handleSystemState>
        if (system_running) {
 800167a:	4b1b      	ldr	r3, [pc, #108]	@ (80016e8 <main+0x80>)
 800167c:	781b      	ldrb	r3, [r3, #0]
 800167e:	b2db      	uxtb	r3, r3
 8001680:	2b00      	cmp	r3, #0
 8001682:	d023      	beq.n	80016cc <main+0x64>
            float gas_ppm;
            if (readGasSensor(&gas_ppm)) {
 8001684:	1d3b      	adds	r3, r7, #4
 8001686:	4618      	mov	r0, r3
 8001688:	f000 f852 	bl	8001730 <readGasSensor>
 800168c:	4603      	mov	r3, r0
 800168e:	2b00      	cmp	r3, #0
 8001690:	d024      	beq.n	80016dc <main+0x74>
                if (safe_timer > 0) {
 8001692:	4b16      	ldr	r3, [pc, #88]	@ (80016ec <main+0x84>)
 8001694:	681b      	ldr	r3, [r3, #0]
 8001696:	2b00      	cmp	r3, #0
 8001698:	d00a      	beq.n	80016b0 <main+0x48>
                    // Trạng thái reset: Đặt hệ thống về trạng thái an toàn tạm thời
                    updateDisplay(0.0, true);
 800169a:	2001      	movs	r0, #1
 800169c:	ed9f 0a14 	vldr	s0, [pc, #80]	@ 80016f0 <main+0x88>
 80016a0:	f7ff fce4 	bl	800106c <updateDisplay>
                    safe_timer--; // Giảm thời gian reset
 80016a4:	4b11      	ldr	r3, [pc, #68]	@ (80016ec <main+0x84>)
 80016a6:	681b      	ldr	r3, [r3, #0]
 80016a8:	3b01      	subs	r3, #1
 80016aa:	4a10      	ldr	r2, [pc, #64]	@ (80016ec <main+0x84>)
 80016ac:	6013      	str	r3, [r2, #0]
 80016ae:	e015      	b.n	80016dc <main+0x74>
                } else {
                    // Hoạt động bình thường
                    handleAlarm(gas_ppm);
 80016b0:	edd7 7a01 	vldr	s15, [r7, #4]
 80016b4:	eeb0 0a67 	vmov.f32	s0, s15
 80016b8:	f7ff faca 	bl	8000c50 <handleAlarm>
                    updateDisplay(gas_ppm, false);
 80016bc:	edd7 7a01 	vldr	s15, [r7, #4]
 80016c0:	2000      	movs	r0, #0
 80016c2:	eeb0 0a67 	vmov.f32	s0, s15
 80016c6:	f7ff fcd1 	bl	800106c <updateDisplay>
 80016ca:	e007      	b.n	80016dc <main+0x74>
                }
            }
        } else {
            updateDisplayStopped();
 80016cc:	f7ff fd3c 	bl	8001148 <updateDisplayStopped>
            GPIOB->ODR |= (1 << 4);  // LED xanh lá
 80016d0:	4b08      	ldr	r3, [pc, #32]	@ (80016f4 <main+0x8c>)
 80016d2:	695b      	ldr	r3, [r3, #20]
 80016d4:	4a07      	ldr	r2, [pc, #28]	@ (80016f4 <main+0x8c>)
 80016d6:	f043 0310 	orr.w	r3, r3, #16
 80016da:	6153      	str	r3, [r2, #20]
        }
        delay_ms(1000);
 80016dc:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 80016e0:	f7ff fd9e 	bl	8001220 <delay_ms>
        handleSystemState();
 80016e4:	e7c7      	b.n	8001676 <main+0xe>
 80016e6:	bf00      	nop
 80016e8:	20000012 	.word	0x20000012
 80016ec:	20000098 	.word	0x20000098
 80016f0:	00000000 	.word	0x00000000
 80016f4:	40020400 	.word	0x40020400

080016f8 <Read_ADC1>:
#include "sensor.h"
#include "stm32f4xx.h"
#include "config.h"
#include <math.h>

static uint16_t Read_ADC1(void) {
 80016f8:	b480      	push	{r7}
 80016fa:	af00      	add	r7, sp, #0
    ADC1->SR = 0;
 80016fc:	4b0b      	ldr	r3, [pc, #44]	@ (800172c <Read_ADC1+0x34>)
 80016fe:	2200      	movs	r2, #0
 8001700:	601a      	str	r2, [r3, #0]
    ADC1->CR2 |= ADC_CR2_SWSTART;
 8001702:	4b0a      	ldr	r3, [pc, #40]	@ (800172c <Read_ADC1+0x34>)
 8001704:	689b      	ldr	r3, [r3, #8]
 8001706:	4a09      	ldr	r2, [pc, #36]	@ (800172c <Read_ADC1+0x34>)
 8001708:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 800170c:	6093      	str	r3, [r2, #8]
    while (!(ADC1->SR & ADC_SR_EOC));
 800170e:	bf00      	nop
 8001710:	4b06      	ldr	r3, [pc, #24]	@ (800172c <Read_ADC1+0x34>)
 8001712:	681b      	ldr	r3, [r3, #0]
 8001714:	f003 0302 	and.w	r3, r3, #2
 8001718:	2b00      	cmp	r3, #0
 800171a:	d0f9      	beq.n	8001710 <Read_ADC1+0x18>
    return ADC1->DR;
 800171c:	4b03      	ldr	r3, [pc, #12]	@ (800172c <Read_ADC1+0x34>)
 800171e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001720:	b29b      	uxth	r3, r3
}
 8001722:	4618      	mov	r0, r3
 8001724:	46bd      	mov	sp, r7
 8001726:	f85d 7b04 	ldr.w	r7, [sp], #4
 800172a:	4770      	bx	lr
 800172c:	40012000 	.word	0x40012000

08001730 <readGasSensor>:

bool readGasSensor(float *gas_ppm) {
 8001730:	b580      	push	{r7, lr}
 8001732:	b086      	sub	sp, #24
 8001734:	af00      	add	r7, sp, #0
 8001736:	6078      	str	r0, [r7, #4]
    uint16_t adc_val = Read_ADC1();
 8001738:	f7ff ffde 	bl	80016f8 <Read_ADC1>
 800173c:	4603      	mov	r3, r0
 800173e:	827b      	strh	r3, [r7, #18]
    float adc_voltage = (adc_val / 4095.0f) * VOLTAGE_REF; // Tính điện áp đầu ra
 8001740:	8a7b      	ldrh	r3, [r7, #18]
 8001742:	ee07 3a90 	vmov	s15, r3
 8001746:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800174a:	eddf 6a2b 	vldr	s13, [pc, #172]	@ 80017f8 <readGasSensor+0xc8>
 800174e:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001752:	ed9f 7a2a 	vldr	s14, [pc, #168]	@ 80017fc <readGasSensor+0xcc>
 8001756:	ee67 7a87 	vmul.f32	s15, s15, s14
 800175a:	edc7 7a03 	vstr	s15, [r7, #12]
    float Rs;
    if (adc_voltage > 0.0f) {
 800175e:	edd7 7a03 	vldr	s15, [r7, #12]
 8001762:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001766:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800176a:	dd0c      	ble.n	8001786 <readGasSensor+0x56>
        Rs = (VCC * RL / adc_voltage) - RL; // Tính Rs
 800176c:	eddf 6a24 	vldr	s13, [pc, #144]	@ 8001800 <readGasSensor+0xd0>
 8001770:	ed97 7a03 	vldr	s14, [r7, #12]
 8001774:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001778:	ed9f 7a22 	vldr	s14, [pc, #136]	@ 8001804 <readGasSensor+0xd4>
 800177c:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8001780:	edc7 7a05 	vstr	s15, [r7, #20]
 8001784:	e002      	b.n	800178c <readGasSensor+0x5c>
    } else {
        Rs = 0.0f;
 8001786:	f04f 0300 	mov.w	r3, #0
 800178a:	617b      	str	r3, [r7, #20]
    }
    float ratio = (R0 > 0.0f) ? (Rs / R0) : 0.0f; // Tính tỉ lệ Rs/R0, tránh chia cho 0
 800178c:	ed97 7a05 	vldr	s14, [r7, #20]
 8001790:	eddf 6a1d 	vldr	s13, [pc, #116]	@ 8001808 <readGasSensor+0xd8>
 8001794:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001798:	edc7 7a02 	vstr	s15, [r7, #8]
    *gas_ppm = (ratio > 0.0f) ? (100.0f * pow(ratio, -2.5f)) : 0.0f; // Tính ppm
 800179c:	edd7 7a02 	vldr	s15, [r7, #8]
 80017a0:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80017a4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80017a8:	dd19      	ble.n	80017de <readGasSensor+0xae>
 80017aa:	68b8      	ldr	r0, [r7, #8]
 80017ac:	f7fe fecc 	bl	8000548 <__aeabi_f2d>
 80017b0:	4602      	mov	r2, r0
 80017b2:	460b      	mov	r3, r1
 80017b4:	ed9f 1b0e 	vldr	d1, [pc, #56]	@ 80017f0 <readGasSensor+0xc0>
 80017b8:	ec43 2b10 	vmov	d0, r2, r3
 80017bc:	f000 fd8a 	bl	80022d4 <pow>
 80017c0:	ec51 0b10 	vmov	r0, r1, d0
 80017c4:	f04f 0200 	mov.w	r2, #0
 80017c8:	4b10      	ldr	r3, [pc, #64]	@ (800180c <readGasSensor+0xdc>)
 80017ca:	f7fe ff15 	bl	80005f8 <__aeabi_dmul>
 80017ce:	4602      	mov	r2, r0
 80017d0:	460b      	mov	r3, r1
 80017d2:	4610      	mov	r0, r2
 80017d4:	4619      	mov	r1, r3
 80017d6:	f7ff f9bf 	bl	8000b58 <__aeabi_d2f>
 80017da:	4603      	mov	r3, r0
 80017dc:	e001      	b.n	80017e2 <readGasSensor+0xb2>
 80017de:	f04f 0300 	mov.w	r3, #0
 80017e2:	687a      	ldr	r2, [r7, #4]
 80017e4:	6013      	str	r3, [r2, #0]
    return true;
 80017e6:	2301      	movs	r3, #1
}
 80017e8:	4618      	mov	r0, r3
 80017ea:	3718      	adds	r7, #24
 80017ec:	46bd      	mov	sp, r7
 80017ee:	bd80      	pop	{r7, pc}
 80017f0:	00000000 	.word	0x00000000
 80017f4:	c0040000 	.word	0xc0040000
 80017f8:	457ff000 	.word	0x457ff000
 80017fc:	40533333 	.word	0x40533333
 8001800:	47435000 	.word	0x47435000
 8001804:	461c4000 	.word	0x461c4000
 8001808:	471a5100 	.word	0x471a5100
 800180c:	40590000 	.word	0x40590000

08001810 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001810:	b480      	push	{r7}
 8001812:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001814:	bf00      	nop
 8001816:	e7fd      	b.n	8001814 <NMI_Handler+0x4>

08001818 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001818:	b480      	push	{r7}
 800181a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800181c:	bf00      	nop
 800181e:	e7fd      	b.n	800181c <HardFault_Handler+0x4>

08001820 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001820:	b480      	push	{r7}
 8001822:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001824:	bf00      	nop
 8001826:	e7fd      	b.n	8001824 <MemManage_Handler+0x4>

08001828 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001828:	b480      	push	{r7}
 800182a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800182c:	bf00      	nop
 800182e:	e7fd      	b.n	800182c <BusFault_Handler+0x4>

08001830 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001830:	b480      	push	{r7}
 8001832:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001834:	bf00      	nop
 8001836:	e7fd      	b.n	8001834 <UsageFault_Handler+0x4>

08001838 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001838:	b480      	push	{r7}
 800183a:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800183c:	bf00      	nop
 800183e:	46bd      	mov	sp, r7
 8001840:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001844:	4770      	bx	lr

08001846 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001846:	b480      	push	{r7}
 8001848:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800184a:	bf00      	nop
 800184c:	46bd      	mov	sp, r7
 800184e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001852:	4770      	bx	lr

08001854 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001854:	b480      	push	{r7}
 8001856:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001858:	bf00      	nop
 800185a:	46bd      	mov	sp, r7
 800185c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001860:	4770      	bx	lr

08001862 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001862:	b580      	push	{r7, lr}
 8001864:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001866:	f000 f875 	bl	8001954 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800186a:	bf00      	nop
 800186c:	bd80      	pop	{r7, pc}
	...

08001870 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001870:	b580      	push	{r7, lr}
 8001872:	b086      	sub	sp, #24
 8001874:	af00      	add	r7, sp, #0
 8001876:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001878:	4a14      	ldr	r2, [pc, #80]	@ (80018cc <_sbrk+0x5c>)
 800187a:	4b15      	ldr	r3, [pc, #84]	@ (80018d0 <_sbrk+0x60>)
 800187c:	1ad3      	subs	r3, r2, r3
 800187e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001880:	697b      	ldr	r3, [r7, #20]
 8001882:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001884:	4b13      	ldr	r3, [pc, #76]	@ (80018d4 <_sbrk+0x64>)
 8001886:	681b      	ldr	r3, [r3, #0]
 8001888:	2b00      	cmp	r3, #0
 800188a:	d102      	bne.n	8001892 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800188c:	4b11      	ldr	r3, [pc, #68]	@ (80018d4 <_sbrk+0x64>)
 800188e:	4a12      	ldr	r2, [pc, #72]	@ (80018d8 <_sbrk+0x68>)
 8001890:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001892:	4b10      	ldr	r3, [pc, #64]	@ (80018d4 <_sbrk+0x64>)
 8001894:	681a      	ldr	r2, [r3, #0]
 8001896:	687b      	ldr	r3, [r7, #4]
 8001898:	4413      	add	r3, r2
 800189a:	693a      	ldr	r2, [r7, #16]
 800189c:	429a      	cmp	r2, r3
 800189e:	d207      	bcs.n	80018b0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80018a0:	f000 f8a0 	bl	80019e4 <__errno>
 80018a4:	4603      	mov	r3, r0
 80018a6:	220c      	movs	r2, #12
 80018a8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80018aa:	f04f 33ff 	mov.w	r3, #4294967295
 80018ae:	e009      	b.n	80018c4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80018b0:	4b08      	ldr	r3, [pc, #32]	@ (80018d4 <_sbrk+0x64>)
 80018b2:	681b      	ldr	r3, [r3, #0]
 80018b4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80018b6:	4b07      	ldr	r3, [pc, #28]	@ (80018d4 <_sbrk+0x64>)
 80018b8:	681a      	ldr	r2, [r3, #0]
 80018ba:	687b      	ldr	r3, [r7, #4]
 80018bc:	4413      	add	r3, r2
 80018be:	4a05      	ldr	r2, [pc, #20]	@ (80018d4 <_sbrk+0x64>)
 80018c0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80018c2:	68fb      	ldr	r3, [r7, #12]
}
 80018c4:	4618      	mov	r0, r3
 80018c6:	3718      	adds	r7, #24
 80018c8:	46bd      	mov	sp, r7
 80018ca:	bd80      	pop	{r7, pc}
 80018cc:	20020000 	.word	0x20020000
 80018d0:	00000400 	.word	0x00000400
 80018d4:	2000009c 	.word	0x2000009c
 80018d8:	200001f0 	.word	0x200001f0

080018dc <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80018dc:	b480      	push	{r7}
 80018de:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80018e0:	4b06      	ldr	r3, [pc, #24]	@ (80018fc <SystemInit+0x20>)
 80018e2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80018e6:	4a05      	ldr	r2, [pc, #20]	@ (80018fc <SystemInit+0x20>)
 80018e8:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80018ec:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80018f0:	bf00      	nop
 80018f2:	46bd      	mov	sp, r7
 80018f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018f8:	4770      	bx	lr
 80018fa:	bf00      	nop
 80018fc:	e000ed00 	.word	0xe000ed00

08001900 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8001900:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8001938 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8001904:	f7ff ffea 	bl	80018dc <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001908:	480c      	ldr	r0, [pc, #48]	@ (800193c <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800190a:	490d      	ldr	r1, [pc, #52]	@ (8001940 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 800190c:	4a0d      	ldr	r2, [pc, #52]	@ (8001944 <LoopFillZerobss+0x1a>)
  movs r3, #0
 800190e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001910:	e002      	b.n	8001918 <LoopCopyDataInit>

08001912 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001912:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001914:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001916:	3304      	adds	r3, #4

08001918 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001918:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800191a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800191c:	d3f9      	bcc.n	8001912 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800191e:	4a0a      	ldr	r2, [pc, #40]	@ (8001948 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001920:	4c0a      	ldr	r4, [pc, #40]	@ (800194c <LoopFillZerobss+0x22>)
  movs r3, #0
 8001922:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001924:	e001      	b.n	800192a <LoopFillZerobss>

08001926 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001926:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001928:	3204      	adds	r2, #4

0800192a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800192a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800192c:	d3fb      	bcc.n	8001926 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800192e:	f000 f85f 	bl	80019f0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001932:	f7ff fe99 	bl	8001668 <main>
  bx  lr    
 8001936:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8001938:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 800193c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001940:	20000078 	.word	0x20000078
  ldr r2, =_sidata
 8001944:	080032a8 	.word	0x080032a8
  ldr r2, =_sbss
 8001948:	20000078 	.word	0x20000078
  ldr r4, =_ebss
 800194c:	200001ec 	.word	0x200001ec

08001950 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001950:	e7fe      	b.n	8001950 <ADC_IRQHandler>
	...

08001954 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001954:	b480      	push	{r7}
 8001956:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001958:	4b06      	ldr	r3, [pc, #24]	@ (8001974 <HAL_IncTick+0x20>)
 800195a:	781b      	ldrb	r3, [r3, #0]
 800195c:	461a      	mov	r2, r3
 800195e:	4b06      	ldr	r3, [pc, #24]	@ (8001978 <HAL_IncTick+0x24>)
 8001960:	681b      	ldr	r3, [r3, #0]
 8001962:	4413      	add	r3, r2
 8001964:	4a04      	ldr	r2, [pc, #16]	@ (8001978 <HAL_IncTick+0x24>)
 8001966:	6013      	str	r3, [r2, #0]
}
 8001968:	bf00      	nop
 800196a:	46bd      	mov	sp, r7
 800196c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001970:	4770      	bx	lr
 8001972:	bf00      	nop
 8001974:	20000013 	.word	0x20000013
 8001978:	200000a0 	.word	0x200000a0

0800197c <sniprintf>:
 800197c:	b40c      	push	{r2, r3}
 800197e:	b530      	push	{r4, r5, lr}
 8001980:	4b17      	ldr	r3, [pc, #92]	@ (80019e0 <sniprintf+0x64>)
 8001982:	1e0c      	subs	r4, r1, #0
 8001984:	681d      	ldr	r5, [r3, #0]
 8001986:	b09d      	sub	sp, #116	@ 0x74
 8001988:	da08      	bge.n	800199c <sniprintf+0x20>
 800198a:	238b      	movs	r3, #139	@ 0x8b
 800198c:	602b      	str	r3, [r5, #0]
 800198e:	f04f 30ff 	mov.w	r0, #4294967295
 8001992:	b01d      	add	sp, #116	@ 0x74
 8001994:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8001998:	b002      	add	sp, #8
 800199a:	4770      	bx	lr
 800199c:	f44f 7302 	mov.w	r3, #520	@ 0x208
 80019a0:	f8ad 3014 	strh.w	r3, [sp, #20]
 80019a4:	bf14      	ite	ne
 80019a6:	f104 33ff 	addne.w	r3, r4, #4294967295
 80019aa:	4623      	moveq	r3, r4
 80019ac:	9304      	str	r3, [sp, #16]
 80019ae:	9307      	str	r3, [sp, #28]
 80019b0:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80019b4:	9002      	str	r0, [sp, #8]
 80019b6:	9006      	str	r0, [sp, #24]
 80019b8:	f8ad 3016 	strh.w	r3, [sp, #22]
 80019bc:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 80019be:	ab21      	add	r3, sp, #132	@ 0x84
 80019c0:	a902      	add	r1, sp, #8
 80019c2:	4628      	mov	r0, r5
 80019c4:	9301      	str	r3, [sp, #4]
 80019c6:	f000 f98d 	bl	8001ce4 <_svfiprintf_r>
 80019ca:	1c43      	adds	r3, r0, #1
 80019cc:	bfbc      	itt	lt
 80019ce:	238b      	movlt	r3, #139	@ 0x8b
 80019d0:	602b      	strlt	r3, [r5, #0]
 80019d2:	2c00      	cmp	r4, #0
 80019d4:	d0dd      	beq.n	8001992 <sniprintf+0x16>
 80019d6:	9b02      	ldr	r3, [sp, #8]
 80019d8:	2200      	movs	r2, #0
 80019da:	701a      	strb	r2, [r3, #0]
 80019dc:	e7d9      	b.n	8001992 <sniprintf+0x16>
 80019de:	bf00      	nop
 80019e0:	20000014 	.word	0x20000014

080019e4 <__errno>:
 80019e4:	4b01      	ldr	r3, [pc, #4]	@ (80019ec <__errno+0x8>)
 80019e6:	6818      	ldr	r0, [r3, #0]
 80019e8:	4770      	bx	lr
 80019ea:	bf00      	nop
 80019ec:	20000014 	.word	0x20000014

080019f0 <__libc_init_array>:
 80019f0:	b570      	push	{r4, r5, r6, lr}
 80019f2:	4d0d      	ldr	r5, [pc, #52]	@ (8001a28 <__libc_init_array+0x38>)
 80019f4:	4c0d      	ldr	r4, [pc, #52]	@ (8001a2c <__libc_init_array+0x3c>)
 80019f6:	1b64      	subs	r4, r4, r5
 80019f8:	10a4      	asrs	r4, r4, #2
 80019fa:	2600      	movs	r6, #0
 80019fc:	42a6      	cmp	r6, r4
 80019fe:	d109      	bne.n	8001a14 <__libc_init_array+0x24>
 8001a00:	4d0b      	ldr	r5, [pc, #44]	@ (8001a30 <__libc_init_array+0x40>)
 8001a02:	4c0c      	ldr	r4, [pc, #48]	@ (8001a34 <__libc_init_array+0x44>)
 8001a04:	f001 fbc6 	bl	8003194 <_init>
 8001a08:	1b64      	subs	r4, r4, r5
 8001a0a:	10a4      	asrs	r4, r4, #2
 8001a0c:	2600      	movs	r6, #0
 8001a0e:	42a6      	cmp	r6, r4
 8001a10:	d105      	bne.n	8001a1e <__libc_init_array+0x2e>
 8001a12:	bd70      	pop	{r4, r5, r6, pc}
 8001a14:	f855 3b04 	ldr.w	r3, [r5], #4
 8001a18:	4798      	blx	r3
 8001a1a:	3601      	adds	r6, #1
 8001a1c:	e7ee      	b.n	80019fc <__libc_init_array+0xc>
 8001a1e:	f855 3b04 	ldr.w	r3, [r5], #4
 8001a22:	4798      	blx	r3
 8001a24:	3601      	adds	r6, #1
 8001a26:	e7f2      	b.n	8001a0e <__libc_init_array+0x1e>
 8001a28:	080032a0 	.word	0x080032a0
 8001a2c:	080032a0 	.word	0x080032a0
 8001a30:	080032a0 	.word	0x080032a0
 8001a34:	080032a4 	.word	0x080032a4

08001a38 <__retarget_lock_acquire_recursive>:
 8001a38:	4770      	bx	lr

08001a3a <__retarget_lock_release_recursive>:
 8001a3a:	4770      	bx	lr

08001a3c <_free_r>:
 8001a3c:	b538      	push	{r3, r4, r5, lr}
 8001a3e:	4605      	mov	r5, r0
 8001a40:	2900      	cmp	r1, #0
 8001a42:	d041      	beq.n	8001ac8 <_free_r+0x8c>
 8001a44:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8001a48:	1f0c      	subs	r4, r1, #4
 8001a4a:	2b00      	cmp	r3, #0
 8001a4c:	bfb8      	it	lt
 8001a4e:	18e4      	addlt	r4, r4, r3
 8001a50:	f000 f8e0 	bl	8001c14 <__malloc_lock>
 8001a54:	4a1d      	ldr	r2, [pc, #116]	@ (8001acc <_free_r+0x90>)
 8001a56:	6813      	ldr	r3, [r2, #0]
 8001a58:	b933      	cbnz	r3, 8001a68 <_free_r+0x2c>
 8001a5a:	6063      	str	r3, [r4, #4]
 8001a5c:	6014      	str	r4, [r2, #0]
 8001a5e:	4628      	mov	r0, r5
 8001a60:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8001a64:	f000 b8dc 	b.w	8001c20 <__malloc_unlock>
 8001a68:	42a3      	cmp	r3, r4
 8001a6a:	d908      	bls.n	8001a7e <_free_r+0x42>
 8001a6c:	6820      	ldr	r0, [r4, #0]
 8001a6e:	1821      	adds	r1, r4, r0
 8001a70:	428b      	cmp	r3, r1
 8001a72:	bf01      	itttt	eq
 8001a74:	6819      	ldreq	r1, [r3, #0]
 8001a76:	685b      	ldreq	r3, [r3, #4]
 8001a78:	1809      	addeq	r1, r1, r0
 8001a7a:	6021      	streq	r1, [r4, #0]
 8001a7c:	e7ed      	b.n	8001a5a <_free_r+0x1e>
 8001a7e:	461a      	mov	r2, r3
 8001a80:	685b      	ldr	r3, [r3, #4]
 8001a82:	b10b      	cbz	r3, 8001a88 <_free_r+0x4c>
 8001a84:	42a3      	cmp	r3, r4
 8001a86:	d9fa      	bls.n	8001a7e <_free_r+0x42>
 8001a88:	6811      	ldr	r1, [r2, #0]
 8001a8a:	1850      	adds	r0, r2, r1
 8001a8c:	42a0      	cmp	r0, r4
 8001a8e:	d10b      	bne.n	8001aa8 <_free_r+0x6c>
 8001a90:	6820      	ldr	r0, [r4, #0]
 8001a92:	4401      	add	r1, r0
 8001a94:	1850      	adds	r0, r2, r1
 8001a96:	4283      	cmp	r3, r0
 8001a98:	6011      	str	r1, [r2, #0]
 8001a9a:	d1e0      	bne.n	8001a5e <_free_r+0x22>
 8001a9c:	6818      	ldr	r0, [r3, #0]
 8001a9e:	685b      	ldr	r3, [r3, #4]
 8001aa0:	6053      	str	r3, [r2, #4]
 8001aa2:	4408      	add	r0, r1
 8001aa4:	6010      	str	r0, [r2, #0]
 8001aa6:	e7da      	b.n	8001a5e <_free_r+0x22>
 8001aa8:	d902      	bls.n	8001ab0 <_free_r+0x74>
 8001aaa:	230c      	movs	r3, #12
 8001aac:	602b      	str	r3, [r5, #0]
 8001aae:	e7d6      	b.n	8001a5e <_free_r+0x22>
 8001ab0:	6820      	ldr	r0, [r4, #0]
 8001ab2:	1821      	adds	r1, r4, r0
 8001ab4:	428b      	cmp	r3, r1
 8001ab6:	bf04      	itt	eq
 8001ab8:	6819      	ldreq	r1, [r3, #0]
 8001aba:	685b      	ldreq	r3, [r3, #4]
 8001abc:	6063      	str	r3, [r4, #4]
 8001abe:	bf04      	itt	eq
 8001ac0:	1809      	addeq	r1, r1, r0
 8001ac2:	6021      	streq	r1, [r4, #0]
 8001ac4:	6054      	str	r4, [r2, #4]
 8001ac6:	e7ca      	b.n	8001a5e <_free_r+0x22>
 8001ac8:	bd38      	pop	{r3, r4, r5, pc}
 8001aca:	bf00      	nop
 8001acc:	200001e8 	.word	0x200001e8

08001ad0 <sbrk_aligned>:
 8001ad0:	b570      	push	{r4, r5, r6, lr}
 8001ad2:	4e0f      	ldr	r6, [pc, #60]	@ (8001b10 <sbrk_aligned+0x40>)
 8001ad4:	460c      	mov	r4, r1
 8001ad6:	6831      	ldr	r1, [r6, #0]
 8001ad8:	4605      	mov	r5, r0
 8001ada:	b911      	cbnz	r1, 8001ae2 <sbrk_aligned+0x12>
 8001adc:	f000 fba6 	bl	800222c <_sbrk_r>
 8001ae0:	6030      	str	r0, [r6, #0]
 8001ae2:	4621      	mov	r1, r4
 8001ae4:	4628      	mov	r0, r5
 8001ae6:	f000 fba1 	bl	800222c <_sbrk_r>
 8001aea:	1c43      	adds	r3, r0, #1
 8001aec:	d103      	bne.n	8001af6 <sbrk_aligned+0x26>
 8001aee:	f04f 34ff 	mov.w	r4, #4294967295
 8001af2:	4620      	mov	r0, r4
 8001af4:	bd70      	pop	{r4, r5, r6, pc}
 8001af6:	1cc4      	adds	r4, r0, #3
 8001af8:	f024 0403 	bic.w	r4, r4, #3
 8001afc:	42a0      	cmp	r0, r4
 8001afe:	d0f8      	beq.n	8001af2 <sbrk_aligned+0x22>
 8001b00:	1a21      	subs	r1, r4, r0
 8001b02:	4628      	mov	r0, r5
 8001b04:	f000 fb92 	bl	800222c <_sbrk_r>
 8001b08:	3001      	adds	r0, #1
 8001b0a:	d1f2      	bne.n	8001af2 <sbrk_aligned+0x22>
 8001b0c:	e7ef      	b.n	8001aee <sbrk_aligned+0x1e>
 8001b0e:	bf00      	nop
 8001b10:	200001e4 	.word	0x200001e4

08001b14 <_malloc_r>:
 8001b14:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8001b18:	1ccd      	adds	r5, r1, #3
 8001b1a:	f025 0503 	bic.w	r5, r5, #3
 8001b1e:	3508      	adds	r5, #8
 8001b20:	2d0c      	cmp	r5, #12
 8001b22:	bf38      	it	cc
 8001b24:	250c      	movcc	r5, #12
 8001b26:	2d00      	cmp	r5, #0
 8001b28:	4606      	mov	r6, r0
 8001b2a:	db01      	blt.n	8001b30 <_malloc_r+0x1c>
 8001b2c:	42a9      	cmp	r1, r5
 8001b2e:	d904      	bls.n	8001b3a <_malloc_r+0x26>
 8001b30:	230c      	movs	r3, #12
 8001b32:	6033      	str	r3, [r6, #0]
 8001b34:	2000      	movs	r0, #0
 8001b36:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8001b3a:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8001c10 <_malloc_r+0xfc>
 8001b3e:	f000 f869 	bl	8001c14 <__malloc_lock>
 8001b42:	f8d8 3000 	ldr.w	r3, [r8]
 8001b46:	461c      	mov	r4, r3
 8001b48:	bb44      	cbnz	r4, 8001b9c <_malloc_r+0x88>
 8001b4a:	4629      	mov	r1, r5
 8001b4c:	4630      	mov	r0, r6
 8001b4e:	f7ff ffbf 	bl	8001ad0 <sbrk_aligned>
 8001b52:	1c43      	adds	r3, r0, #1
 8001b54:	4604      	mov	r4, r0
 8001b56:	d158      	bne.n	8001c0a <_malloc_r+0xf6>
 8001b58:	f8d8 4000 	ldr.w	r4, [r8]
 8001b5c:	4627      	mov	r7, r4
 8001b5e:	2f00      	cmp	r7, #0
 8001b60:	d143      	bne.n	8001bea <_malloc_r+0xd6>
 8001b62:	2c00      	cmp	r4, #0
 8001b64:	d04b      	beq.n	8001bfe <_malloc_r+0xea>
 8001b66:	6823      	ldr	r3, [r4, #0]
 8001b68:	4639      	mov	r1, r7
 8001b6a:	4630      	mov	r0, r6
 8001b6c:	eb04 0903 	add.w	r9, r4, r3
 8001b70:	f000 fb5c 	bl	800222c <_sbrk_r>
 8001b74:	4581      	cmp	r9, r0
 8001b76:	d142      	bne.n	8001bfe <_malloc_r+0xea>
 8001b78:	6821      	ldr	r1, [r4, #0]
 8001b7a:	1a6d      	subs	r5, r5, r1
 8001b7c:	4629      	mov	r1, r5
 8001b7e:	4630      	mov	r0, r6
 8001b80:	f7ff ffa6 	bl	8001ad0 <sbrk_aligned>
 8001b84:	3001      	adds	r0, #1
 8001b86:	d03a      	beq.n	8001bfe <_malloc_r+0xea>
 8001b88:	6823      	ldr	r3, [r4, #0]
 8001b8a:	442b      	add	r3, r5
 8001b8c:	6023      	str	r3, [r4, #0]
 8001b8e:	f8d8 3000 	ldr.w	r3, [r8]
 8001b92:	685a      	ldr	r2, [r3, #4]
 8001b94:	bb62      	cbnz	r2, 8001bf0 <_malloc_r+0xdc>
 8001b96:	f8c8 7000 	str.w	r7, [r8]
 8001b9a:	e00f      	b.n	8001bbc <_malloc_r+0xa8>
 8001b9c:	6822      	ldr	r2, [r4, #0]
 8001b9e:	1b52      	subs	r2, r2, r5
 8001ba0:	d420      	bmi.n	8001be4 <_malloc_r+0xd0>
 8001ba2:	2a0b      	cmp	r2, #11
 8001ba4:	d917      	bls.n	8001bd6 <_malloc_r+0xc2>
 8001ba6:	1961      	adds	r1, r4, r5
 8001ba8:	42a3      	cmp	r3, r4
 8001baa:	6025      	str	r5, [r4, #0]
 8001bac:	bf18      	it	ne
 8001bae:	6059      	strne	r1, [r3, #4]
 8001bb0:	6863      	ldr	r3, [r4, #4]
 8001bb2:	bf08      	it	eq
 8001bb4:	f8c8 1000 	streq.w	r1, [r8]
 8001bb8:	5162      	str	r2, [r4, r5]
 8001bba:	604b      	str	r3, [r1, #4]
 8001bbc:	4630      	mov	r0, r6
 8001bbe:	f000 f82f 	bl	8001c20 <__malloc_unlock>
 8001bc2:	f104 000b 	add.w	r0, r4, #11
 8001bc6:	1d23      	adds	r3, r4, #4
 8001bc8:	f020 0007 	bic.w	r0, r0, #7
 8001bcc:	1ac2      	subs	r2, r0, r3
 8001bce:	bf1c      	itt	ne
 8001bd0:	1a1b      	subne	r3, r3, r0
 8001bd2:	50a3      	strne	r3, [r4, r2]
 8001bd4:	e7af      	b.n	8001b36 <_malloc_r+0x22>
 8001bd6:	6862      	ldr	r2, [r4, #4]
 8001bd8:	42a3      	cmp	r3, r4
 8001bda:	bf0c      	ite	eq
 8001bdc:	f8c8 2000 	streq.w	r2, [r8]
 8001be0:	605a      	strne	r2, [r3, #4]
 8001be2:	e7eb      	b.n	8001bbc <_malloc_r+0xa8>
 8001be4:	4623      	mov	r3, r4
 8001be6:	6864      	ldr	r4, [r4, #4]
 8001be8:	e7ae      	b.n	8001b48 <_malloc_r+0x34>
 8001bea:	463c      	mov	r4, r7
 8001bec:	687f      	ldr	r7, [r7, #4]
 8001bee:	e7b6      	b.n	8001b5e <_malloc_r+0x4a>
 8001bf0:	461a      	mov	r2, r3
 8001bf2:	685b      	ldr	r3, [r3, #4]
 8001bf4:	42a3      	cmp	r3, r4
 8001bf6:	d1fb      	bne.n	8001bf0 <_malloc_r+0xdc>
 8001bf8:	2300      	movs	r3, #0
 8001bfa:	6053      	str	r3, [r2, #4]
 8001bfc:	e7de      	b.n	8001bbc <_malloc_r+0xa8>
 8001bfe:	230c      	movs	r3, #12
 8001c00:	6033      	str	r3, [r6, #0]
 8001c02:	4630      	mov	r0, r6
 8001c04:	f000 f80c 	bl	8001c20 <__malloc_unlock>
 8001c08:	e794      	b.n	8001b34 <_malloc_r+0x20>
 8001c0a:	6005      	str	r5, [r0, #0]
 8001c0c:	e7d6      	b.n	8001bbc <_malloc_r+0xa8>
 8001c0e:	bf00      	nop
 8001c10:	200001e8 	.word	0x200001e8

08001c14 <__malloc_lock>:
 8001c14:	4801      	ldr	r0, [pc, #4]	@ (8001c1c <__malloc_lock+0x8>)
 8001c16:	f7ff bf0f 	b.w	8001a38 <__retarget_lock_acquire_recursive>
 8001c1a:	bf00      	nop
 8001c1c:	200001e0 	.word	0x200001e0

08001c20 <__malloc_unlock>:
 8001c20:	4801      	ldr	r0, [pc, #4]	@ (8001c28 <__malloc_unlock+0x8>)
 8001c22:	f7ff bf0a 	b.w	8001a3a <__retarget_lock_release_recursive>
 8001c26:	bf00      	nop
 8001c28:	200001e0 	.word	0x200001e0

08001c2c <__ssputs_r>:
 8001c2c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8001c30:	688e      	ldr	r6, [r1, #8]
 8001c32:	461f      	mov	r7, r3
 8001c34:	42be      	cmp	r6, r7
 8001c36:	680b      	ldr	r3, [r1, #0]
 8001c38:	4682      	mov	sl, r0
 8001c3a:	460c      	mov	r4, r1
 8001c3c:	4690      	mov	r8, r2
 8001c3e:	d82d      	bhi.n	8001c9c <__ssputs_r+0x70>
 8001c40:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8001c44:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8001c48:	d026      	beq.n	8001c98 <__ssputs_r+0x6c>
 8001c4a:	6965      	ldr	r5, [r4, #20]
 8001c4c:	6909      	ldr	r1, [r1, #16]
 8001c4e:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8001c52:	eba3 0901 	sub.w	r9, r3, r1
 8001c56:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8001c5a:	1c7b      	adds	r3, r7, #1
 8001c5c:	444b      	add	r3, r9
 8001c5e:	106d      	asrs	r5, r5, #1
 8001c60:	429d      	cmp	r5, r3
 8001c62:	bf38      	it	cc
 8001c64:	461d      	movcc	r5, r3
 8001c66:	0553      	lsls	r3, r2, #21
 8001c68:	d527      	bpl.n	8001cba <__ssputs_r+0x8e>
 8001c6a:	4629      	mov	r1, r5
 8001c6c:	f7ff ff52 	bl	8001b14 <_malloc_r>
 8001c70:	4606      	mov	r6, r0
 8001c72:	b360      	cbz	r0, 8001cce <__ssputs_r+0xa2>
 8001c74:	6921      	ldr	r1, [r4, #16]
 8001c76:	464a      	mov	r2, r9
 8001c78:	f000 fae8 	bl	800224c <memcpy>
 8001c7c:	89a3      	ldrh	r3, [r4, #12]
 8001c7e:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8001c82:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001c86:	81a3      	strh	r3, [r4, #12]
 8001c88:	6126      	str	r6, [r4, #16]
 8001c8a:	6165      	str	r5, [r4, #20]
 8001c8c:	444e      	add	r6, r9
 8001c8e:	eba5 0509 	sub.w	r5, r5, r9
 8001c92:	6026      	str	r6, [r4, #0]
 8001c94:	60a5      	str	r5, [r4, #8]
 8001c96:	463e      	mov	r6, r7
 8001c98:	42be      	cmp	r6, r7
 8001c9a:	d900      	bls.n	8001c9e <__ssputs_r+0x72>
 8001c9c:	463e      	mov	r6, r7
 8001c9e:	6820      	ldr	r0, [r4, #0]
 8001ca0:	4632      	mov	r2, r6
 8001ca2:	4641      	mov	r1, r8
 8001ca4:	f000 faa8 	bl	80021f8 <memmove>
 8001ca8:	68a3      	ldr	r3, [r4, #8]
 8001caa:	1b9b      	subs	r3, r3, r6
 8001cac:	60a3      	str	r3, [r4, #8]
 8001cae:	6823      	ldr	r3, [r4, #0]
 8001cb0:	4433      	add	r3, r6
 8001cb2:	6023      	str	r3, [r4, #0]
 8001cb4:	2000      	movs	r0, #0
 8001cb6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8001cba:	462a      	mov	r2, r5
 8001cbc:	f000 fad4 	bl	8002268 <_realloc_r>
 8001cc0:	4606      	mov	r6, r0
 8001cc2:	2800      	cmp	r0, #0
 8001cc4:	d1e0      	bne.n	8001c88 <__ssputs_r+0x5c>
 8001cc6:	6921      	ldr	r1, [r4, #16]
 8001cc8:	4650      	mov	r0, sl
 8001cca:	f7ff feb7 	bl	8001a3c <_free_r>
 8001cce:	230c      	movs	r3, #12
 8001cd0:	f8ca 3000 	str.w	r3, [sl]
 8001cd4:	89a3      	ldrh	r3, [r4, #12]
 8001cd6:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8001cda:	81a3      	strh	r3, [r4, #12]
 8001cdc:	f04f 30ff 	mov.w	r0, #4294967295
 8001ce0:	e7e9      	b.n	8001cb6 <__ssputs_r+0x8a>
	...

08001ce4 <_svfiprintf_r>:
 8001ce4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001ce8:	4698      	mov	r8, r3
 8001cea:	898b      	ldrh	r3, [r1, #12]
 8001cec:	061b      	lsls	r3, r3, #24
 8001cee:	b09d      	sub	sp, #116	@ 0x74
 8001cf0:	4607      	mov	r7, r0
 8001cf2:	460d      	mov	r5, r1
 8001cf4:	4614      	mov	r4, r2
 8001cf6:	d510      	bpl.n	8001d1a <_svfiprintf_r+0x36>
 8001cf8:	690b      	ldr	r3, [r1, #16]
 8001cfa:	b973      	cbnz	r3, 8001d1a <_svfiprintf_r+0x36>
 8001cfc:	2140      	movs	r1, #64	@ 0x40
 8001cfe:	f7ff ff09 	bl	8001b14 <_malloc_r>
 8001d02:	6028      	str	r0, [r5, #0]
 8001d04:	6128      	str	r0, [r5, #16]
 8001d06:	b930      	cbnz	r0, 8001d16 <_svfiprintf_r+0x32>
 8001d08:	230c      	movs	r3, #12
 8001d0a:	603b      	str	r3, [r7, #0]
 8001d0c:	f04f 30ff 	mov.w	r0, #4294967295
 8001d10:	b01d      	add	sp, #116	@ 0x74
 8001d12:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8001d16:	2340      	movs	r3, #64	@ 0x40
 8001d18:	616b      	str	r3, [r5, #20]
 8001d1a:	2300      	movs	r3, #0
 8001d1c:	9309      	str	r3, [sp, #36]	@ 0x24
 8001d1e:	2320      	movs	r3, #32
 8001d20:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8001d24:	f8cd 800c 	str.w	r8, [sp, #12]
 8001d28:	2330      	movs	r3, #48	@ 0x30
 8001d2a:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 8001ec8 <_svfiprintf_r+0x1e4>
 8001d2e:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8001d32:	f04f 0901 	mov.w	r9, #1
 8001d36:	4623      	mov	r3, r4
 8001d38:	469a      	mov	sl, r3
 8001d3a:	f813 2b01 	ldrb.w	r2, [r3], #1
 8001d3e:	b10a      	cbz	r2, 8001d44 <_svfiprintf_r+0x60>
 8001d40:	2a25      	cmp	r2, #37	@ 0x25
 8001d42:	d1f9      	bne.n	8001d38 <_svfiprintf_r+0x54>
 8001d44:	ebba 0b04 	subs.w	fp, sl, r4
 8001d48:	d00b      	beq.n	8001d62 <_svfiprintf_r+0x7e>
 8001d4a:	465b      	mov	r3, fp
 8001d4c:	4622      	mov	r2, r4
 8001d4e:	4629      	mov	r1, r5
 8001d50:	4638      	mov	r0, r7
 8001d52:	f7ff ff6b 	bl	8001c2c <__ssputs_r>
 8001d56:	3001      	adds	r0, #1
 8001d58:	f000 80a7 	beq.w	8001eaa <_svfiprintf_r+0x1c6>
 8001d5c:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8001d5e:	445a      	add	r2, fp
 8001d60:	9209      	str	r2, [sp, #36]	@ 0x24
 8001d62:	f89a 3000 	ldrb.w	r3, [sl]
 8001d66:	2b00      	cmp	r3, #0
 8001d68:	f000 809f 	beq.w	8001eaa <_svfiprintf_r+0x1c6>
 8001d6c:	2300      	movs	r3, #0
 8001d6e:	f04f 32ff 	mov.w	r2, #4294967295
 8001d72:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8001d76:	f10a 0a01 	add.w	sl, sl, #1
 8001d7a:	9304      	str	r3, [sp, #16]
 8001d7c:	9307      	str	r3, [sp, #28]
 8001d7e:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8001d82:	931a      	str	r3, [sp, #104]	@ 0x68
 8001d84:	4654      	mov	r4, sl
 8001d86:	2205      	movs	r2, #5
 8001d88:	f814 1b01 	ldrb.w	r1, [r4], #1
 8001d8c:	484e      	ldr	r0, [pc, #312]	@ (8001ec8 <_svfiprintf_r+0x1e4>)
 8001d8e:	f7fe fa27 	bl	80001e0 <memchr>
 8001d92:	9a04      	ldr	r2, [sp, #16]
 8001d94:	b9d8      	cbnz	r0, 8001dce <_svfiprintf_r+0xea>
 8001d96:	06d0      	lsls	r0, r2, #27
 8001d98:	bf44      	itt	mi
 8001d9a:	2320      	movmi	r3, #32
 8001d9c:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8001da0:	0711      	lsls	r1, r2, #28
 8001da2:	bf44      	itt	mi
 8001da4:	232b      	movmi	r3, #43	@ 0x2b
 8001da6:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8001daa:	f89a 3000 	ldrb.w	r3, [sl]
 8001dae:	2b2a      	cmp	r3, #42	@ 0x2a
 8001db0:	d015      	beq.n	8001dde <_svfiprintf_r+0xfa>
 8001db2:	9a07      	ldr	r2, [sp, #28]
 8001db4:	4654      	mov	r4, sl
 8001db6:	2000      	movs	r0, #0
 8001db8:	f04f 0c0a 	mov.w	ip, #10
 8001dbc:	4621      	mov	r1, r4
 8001dbe:	f811 3b01 	ldrb.w	r3, [r1], #1
 8001dc2:	3b30      	subs	r3, #48	@ 0x30
 8001dc4:	2b09      	cmp	r3, #9
 8001dc6:	d94b      	bls.n	8001e60 <_svfiprintf_r+0x17c>
 8001dc8:	b1b0      	cbz	r0, 8001df8 <_svfiprintf_r+0x114>
 8001dca:	9207      	str	r2, [sp, #28]
 8001dcc:	e014      	b.n	8001df8 <_svfiprintf_r+0x114>
 8001dce:	eba0 0308 	sub.w	r3, r0, r8
 8001dd2:	fa09 f303 	lsl.w	r3, r9, r3
 8001dd6:	4313      	orrs	r3, r2
 8001dd8:	9304      	str	r3, [sp, #16]
 8001dda:	46a2      	mov	sl, r4
 8001ddc:	e7d2      	b.n	8001d84 <_svfiprintf_r+0xa0>
 8001dde:	9b03      	ldr	r3, [sp, #12]
 8001de0:	1d19      	adds	r1, r3, #4
 8001de2:	681b      	ldr	r3, [r3, #0]
 8001de4:	9103      	str	r1, [sp, #12]
 8001de6:	2b00      	cmp	r3, #0
 8001de8:	bfbb      	ittet	lt
 8001dea:	425b      	neglt	r3, r3
 8001dec:	f042 0202 	orrlt.w	r2, r2, #2
 8001df0:	9307      	strge	r3, [sp, #28]
 8001df2:	9307      	strlt	r3, [sp, #28]
 8001df4:	bfb8      	it	lt
 8001df6:	9204      	strlt	r2, [sp, #16]
 8001df8:	7823      	ldrb	r3, [r4, #0]
 8001dfa:	2b2e      	cmp	r3, #46	@ 0x2e
 8001dfc:	d10a      	bne.n	8001e14 <_svfiprintf_r+0x130>
 8001dfe:	7863      	ldrb	r3, [r4, #1]
 8001e00:	2b2a      	cmp	r3, #42	@ 0x2a
 8001e02:	d132      	bne.n	8001e6a <_svfiprintf_r+0x186>
 8001e04:	9b03      	ldr	r3, [sp, #12]
 8001e06:	1d1a      	adds	r2, r3, #4
 8001e08:	681b      	ldr	r3, [r3, #0]
 8001e0a:	9203      	str	r2, [sp, #12]
 8001e0c:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8001e10:	3402      	adds	r4, #2
 8001e12:	9305      	str	r3, [sp, #20]
 8001e14:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 8001ed8 <_svfiprintf_r+0x1f4>
 8001e18:	7821      	ldrb	r1, [r4, #0]
 8001e1a:	2203      	movs	r2, #3
 8001e1c:	4650      	mov	r0, sl
 8001e1e:	f7fe f9df 	bl	80001e0 <memchr>
 8001e22:	b138      	cbz	r0, 8001e34 <_svfiprintf_r+0x150>
 8001e24:	9b04      	ldr	r3, [sp, #16]
 8001e26:	eba0 000a 	sub.w	r0, r0, sl
 8001e2a:	2240      	movs	r2, #64	@ 0x40
 8001e2c:	4082      	lsls	r2, r0
 8001e2e:	4313      	orrs	r3, r2
 8001e30:	3401      	adds	r4, #1
 8001e32:	9304      	str	r3, [sp, #16]
 8001e34:	f814 1b01 	ldrb.w	r1, [r4], #1
 8001e38:	4824      	ldr	r0, [pc, #144]	@ (8001ecc <_svfiprintf_r+0x1e8>)
 8001e3a:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8001e3e:	2206      	movs	r2, #6
 8001e40:	f7fe f9ce 	bl	80001e0 <memchr>
 8001e44:	2800      	cmp	r0, #0
 8001e46:	d036      	beq.n	8001eb6 <_svfiprintf_r+0x1d2>
 8001e48:	4b21      	ldr	r3, [pc, #132]	@ (8001ed0 <_svfiprintf_r+0x1ec>)
 8001e4a:	bb1b      	cbnz	r3, 8001e94 <_svfiprintf_r+0x1b0>
 8001e4c:	9b03      	ldr	r3, [sp, #12]
 8001e4e:	3307      	adds	r3, #7
 8001e50:	f023 0307 	bic.w	r3, r3, #7
 8001e54:	3308      	adds	r3, #8
 8001e56:	9303      	str	r3, [sp, #12]
 8001e58:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8001e5a:	4433      	add	r3, r6
 8001e5c:	9309      	str	r3, [sp, #36]	@ 0x24
 8001e5e:	e76a      	b.n	8001d36 <_svfiprintf_r+0x52>
 8001e60:	fb0c 3202 	mla	r2, ip, r2, r3
 8001e64:	460c      	mov	r4, r1
 8001e66:	2001      	movs	r0, #1
 8001e68:	e7a8      	b.n	8001dbc <_svfiprintf_r+0xd8>
 8001e6a:	2300      	movs	r3, #0
 8001e6c:	3401      	adds	r4, #1
 8001e6e:	9305      	str	r3, [sp, #20]
 8001e70:	4619      	mov	r1, r3
 8001e72:	f04f 0c0a 	mov.w	ip, #10
 8001e76:	4620      	mov	r0, r4
 8001e78:	f810 2b01 	ldrb.w	r2, [r0], #1
 8001e7c:	3a30      	subs	r2, #48	@ 0x30
 8001e7e:	2a09      	cmp	r2, #9
 8001e80:	d903      	bls.n	8001e8a <_svfiprintf_r+0x1a6>
 8001e82:	2b00      	cmp	r3, #0
 8001e84:	d0c6      	beq.n	8001e14 <_svfiprintf_r+0x130>
 8001e86:	9105      	str	r1, [sp, #20]
 8001e88:	e7c4      	b.n	8001e14 <_svfiprintf_r+0x130>
 8001e8a:	fb0c 2101 	mla	r1, ip, r1, r2
 8001e8e:	4604      	mov	r4, r0
 8001e90:	2301      	movs	r3, #1
 8001e92:	e7f0      	b.n	8001e76 <_svfiprintf_r+0x192>
 8001e94:	ab03      	add	r3, sp, #12
 8001e96:	9300      	str	r3, [sp, #0]
 8001e98:	462a      	mov	r2, r5
 8001e9a:	4b0e      	ldr	r3, [pc, #56]	@ (8001ed4 <_svfiprintf_r+0x1f0>)
 8001e9c:	a904      	add	r1, sp, #16
 8001e9e:	4638      	mov	r0, r7
 8001ea0:	f3af 8000 	nop.w
 8001ea4:	1c42      	adds	r2, r0, #1
 8001ea6:	4606      	mov	r6, r0
 8001ea8:	d1d6      	bne.n	8001e58 <_svfiprintf_r+0x174>
 8001eaa:	89ab      	ldrh	r3, [r5, #12]
 8001eac:	065b      	lsls	r3, r3, #25
 8001eae:	f53f af2d 	bmi.w	8001d0c <_svfiprintf_r+0x28>
 8001eb2:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8001eb4:	e72c      	b.n	8001d10 <_svfiprintf_r+0x2c>
 8001eb6:	ab03      	add	r3, sp, #12
 8001eb8:	9300      	str	r3, [sp, #0]
 8001eba:	462a      	mov	r2, r5
 8001ebc:	4b05      	ldr	r3, [pc, #20]	@ (8001ed4 <_svfiprintf_r+0x1f0>)
 8001ebe:	a904      	add	r1, sp, #16
 8001ec0:	4638      	mov	r0, r7
 8001ec2:	f000 f879 	bl	8001fb8 <_printf_i>
 8001ec6:	e7ed      	b.n	8001ea4 <_svfiprintf_r+0x1c0>
 8001ec8:	08003230 	.word	0x08003230
 8001ecc:	0800323a 	.word	0x0800323a
 8001ed0:	00000000 	.word	0x00000000
 8001ed4:	08001c2d 	.word	0x08001c2d
 8001ed8:	08003236 	.word	0x08003236

08001edc <_printf_common>:
 8001edc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8001ee0:	4616      	mov	r6, r2
 8001ee2:	4698      	mov	r8, r3
 8001ee4:	688a      	ldr	r2, [r1, #8]
 8001ee6:	690b      	ldr	r3, [r1, #16]
 8001ee8:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8001eec:	4293      	cmp	r3, r2
 8001eee:	bfb8      	it	lt
 8001ef0:	4613      	movlt	r3, r2
 8001ef2:	6033      	str	r3, [r6, #0]
 8001ef4:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8001ef8:	4607      	mov	r7, r0
 8001efa:	460c      	mov	r4, r1
 8001efc:	b10a      	cbz	r2, 8001f02 <_printf_common+0x26>
 8001efe:	3301      	adds	r3, #1
 8001f00:	6033      	str	r3, [r6, #0]
 8001f02:	6823      	ldr	r3, [r4, #0]
 8001f04:	0699      	lsls	r1, r3, #26
 8001f06:	bf42      	ittt	mi
 8001f08:	6833      	ldrmi	r3, [r6, #0]
 8001f0a:	3302      	addmi	r3, #2
 8001f0c:	6033      	strmi	r3, [r6, #0]
 8001f0e:	6825      	ldr	r5, [r4, #0]
 8001f10:	f015 0506 	ands.w	r5, r5, #6
 8001f14:	d106      	bne.n	8001f24 <_printf_common+0x48>
 8001f16:	f104 0a19 	add.w	sl, r4, #25
 8001f1a:	68e3      	ldr	r3, [r4, #12]
 8001f1c:	6832      	ldr	r2, [r6, #0]
 8001f1e:	1a9b      	subs	r3, r3, r2
 8001f20:	42ab      	cmp	r3, r5
 8001f22:	dc26      	bgt.n	8001f72 <_printf_common+0x96>
 8001f24:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8001f28:	6822      	ldr	r2, [r4, #0]
 8001f2a:	3b00      	subs	r3, #0
 8001f2c:	bf18      	it	ne
 8001f2e:	2301      	movne	r3, #1
 8001f30:	0692      	lsls	r2, r2, #26
 8001f32:	d42b      	bmi.n	8001f8c <_printf_common+0xb0>
 8001f34:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8001f38:	4641      	mov	r1, r8
 8001f3a:	4638      	mov	r0, r7
 8001f3c:	47c8      	blx	r9
 8001f3e:	3001      	adds	r0, #1
 8001f40:	d01e      	beq.n	8001f80 <_printf_common+0xa4>
 8001f42:	6823      	ldr	r3, [r4, #0]
 8001f44:	6922      	ldr	r2, [r4, #16]
 8001f46:	f003 0306 	and.w	r3, r3, #6
 8001f4a:	2b04      	cmp	r3, #4
 8001f4c:	bf02      	ittt	eq
 8001f4e:	68e5      	ldreq	r5, [r4, #12]
 8001f50:	6833      	ldreq	r3, [r6, #0]
 8001f52:	1aed      	subeq	r5, r5, r3
 8001f54:	68a3      	ldr	r3, [r4, #8]
 8001f56:	bf0c      	ite	eq
 8001f58:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8001f5c:	2500      	movne	r5, #0
 8001f5e:	4293      	cmp	r3, r2
 8001f60:	bfc4      	itt	gt
 8001f62:	1a9b      	subgt	r3, r3, r2
 8001f64:	18ed      	addgt	r5, r5, r3
 8001f66:	2600      	movs	r6, #0
 8001f68:	341a      	adds	r4, #26
 8001f6a:	42b5      	cmp	r5, r6
 8001f6c:	d11a      	bne.n	8001fa4 <_printf_common+0xc8>
 8001f6e:	2000      	movs	r0, #0
 8001f70:	e008      	b.n	8001f84 <_printf_common+0xa8>
 8001f72:	2301      	movs	r3, #1
 8001f74:	4652      	mov	r2, sl
 8001f76:	4641      	mov	r1, r8
 8001f78:	4638      	mov	r0, r7
 8001f7a:	47c8      	blx	r9
 8001f7c:	3001      	adds	r0, #1
 8001f7e:	d103      	bne.n	8001f88 <_printf_common+0xac>
 8001f80:	f04f 30ff 	mov.w	r0, #4294967295
 8001f84:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8001f88:	3501      	adds	r5, #1
 8001f8a:	e7c6      	b.n	8001f1a <_printf_common+0x3e>
 8001f8c:	18e1      	adds	r1, r4, r3
 8001f8e:	1c5a      	adds	r2, r3, #1
 8001f90:	2030      	movs	r0, #48	@ 0x30
 8001f92:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8001f96:	4422      	add	r2, r4
 8001f98:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8001f9c:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8001fa0:	3302      	adds	r3, #2
 8001fa2:	e7c7      	b.n	8001f34 <_printf_common+0x58>
 8001fa4:	2301      	movs	r3, #1
 8001fa6:	4622      	mov	r2, r4
 8001fa8:	4641      	mov	r1, r8
 8001faa:	4638      	mov	r0, r7
 8001fac:	47c8      	blx	r9
 8001fae:	3001      	adds	r0, #1
 8001fb0:	d0e6      	beq.n	8001f80 <_printf_common+0xa4>
 8001fb2:	3601      	adds	r6, #1
 8001fb4:	e7d9      	b.n	8001f6a <_printf_common+0x8e>
	...

08001fb8 <_printf_i>:
 8001fb8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8001fbc:	7e0f      	ldrb	r7, [r1, #24]
 8001fbe:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8001fc0:	2f78      	cmp	r7, #120	@ 0x78
 8001fc2:	4691      	mov	r9, r2
 8001fc4:	4680      	mov	r8, r0
 8001fc6:	460c      	mov	r4, r1
 8001fc8:	469a      	mov	sl, r3
 8001fca:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8001fce:	d807      	bhi.n	8001fe0 <_printf_i+0x28>
 8001fd0:	2f62      	cmp	r7, #98	@ 0x62
 8001fd2:	d80a      	bhi.n	8001fea <_printf_i+0x32>
 8001fd4:	2f00      	cmp	r7, #0
 8001fd6:	f000 80d2 	beq.w	800217e <_printf_i+0x1c6>
 8001fda:	2f58      	cmp	r7, #88	@ 0x58
 8001fdc:	f000 80b9 	beq.w	8002152 <_printf_i+0x19a>
 8001fe0:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8001fe4:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8001fe8:	e03a      	b.n	8002060 <_printf_i+0xa8>
 8001fea:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8001fee:	2b15      	cmp	r3, #21
 8001ff0:	d8f6      	bhi.n	8001fe0 <_printf_i+0x28>
 8001ff2:	a101      	add	r1, pc, #4	@ (adr r1, 8001ff8 <_printf_i+0x40>)
 8001ff4:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8001ff8:	08002051 	.word	0x08002051
 8001ffc:	08002065 	.word	0x08002065
 8002000:	08001fe1 	.word	0x08001fe1
 8002004:	08001fe1 	.word	0x08001fe1
 8002008:	08001fe1 	.word	0x08001fe1
 800200c:	08001fe1 	.word	0x08001fe1
 8002010:	08002065 	.word	0x08002065
 8002014:	08001fe1 	.word	0x08001fe1
 8002018:	08001fe1 	.word	0x08001fe1
 800201c:	08001fe1 	.word	0x08001fe1
 8002020:	08001fe1 	.word	0x08001fe1
 8002024:	08002165 	.word	0x08002165
 8002028:	0800208f 	.word	0x0800208f
 800202c:	0800211f 	.word	0x0800211f
 8002030:	08001fe1 	.word	0x08001fe1
 8002034:	08001fe1 	.word	0x08001fe1
 8002038:	08002187 	.word	0x08002187
 800203c:	08001fe1 	.word	0x08001fe1
 8002040:	0800208f 	.word	0x0800208f
 8002044:	08001fe1 	.word	0x08001fe1
 8002048:	08001fe1 	.word	0x08001fe1
 800204c:	08002127 	.word	0x08002127
 8002050:	6833      	ldr	r3, [r6, #0]
 8002052:	1d1a      	adds	r2, r3, #4
 8002054:	681b      	ldr	r3, [r3, #0]
 8002056:	6032      	str	r2, [r6, #0]
 8002058:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800205c:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8002060:	2301      	movs	r3, #1
 8002062:	e09d      	b.n	80021a0 <_printf_i+0x1e8>
 8002064:	6833      	ldr	r3, [r6, #0]
 8002066:	6820      	ldr	r0, [r4, #0]
 8002068:	1d19      	adds	r1, r3, #4
 800206a:	6031      	str	r1, [r6, #0]
 800206c:	0606      	lsls	r6, r0, #24
 800206e:	d501      	bpl.n	8002074 <_printf_i+0xbc>
 8002070:	681d      	ldr	r5, [r3, #0]
 8002072:	e003      	b.n	800207c <_printf_i+0xc4>
 8002074:	0645      	lsls	r5, r0, #25
 8002076:	d5fb      	bpl.n	8002070 <_printf_i+0xb8>
 8002078:	f9b3 5000 	ldrsh.w	r5, [r3]
 800207c:	2d00      	cmp	r5, #0
 800207e:	da03      	bge.n	8002088 <_printf_i+0xd0>
 8002080:	232d      	movs	r3, #45	@ 0x2d
 8002082:	426d      	negs	r5, r5
 8002084:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8002088:	4859      	ldr	r0, [pc, #356]	@ (80021f0 <_printf_i+0x238>)
 800208a:	230a      	movs	r3, #10
 800208c:	e011      	b.n	80020b2 <_printf_i+0xfa>
 800208e:	6821      	ldr	r1, [r4, #0]
 8002090:	6833      	ldr	r3, [r6, #0]
 8002092:	0608      	lsls	r0, r1, #24
 8002094:	f853 5b04 	ldr.w	r5, [r3], #4
 8002098:	d402      	bmi.n	80020a0 <_printf_i+0xe8>
 800209a:	0649      	lsls	r1, r1, #25
 800209c:	bf48      	it	mi
 800209e:	b2ad      	uxthmi	r5, r5
 80020a0:	2f6f      	cmp	r7, #111	@ 0x6f
 80020a2:	4853      	ldr	r0, [pc, #332]	@ (80021f0 <_printf_i+0x238>)
 80020a4:	6033      	str	r3, [r6, #0]
 80020a6:	bf14      	ite	ne
 80020a8:	230a      	movne	r3, #10
 80020aa:	2308      	moveq	r3, #8
 80020ac:	2100      	movs	r1, #0
 80020ae:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 80020b2:	6866      	ldr	r6, [r4, #4]
 80020b4:	60a6      	str	r6, [r4, #8]
 80020b6:	2e00      	cmp	r6, #0
 80020b8:	bfa2      	ittt	ge
 80020ba:	6821      	ldrge	r1, [r4, #0]
 80020bc:	f021 0104 	bicge.w	r1, r1, #4
 80020c0:	6021      	strge	r1, [r4, #0]
 80020c2:	b90d      	cbnz	r5, 80020c8 <_printf_i+0x110>
 80020c4:	2e00      	cmp	r6, #0
 80020c6:	d04b      	beq.n	8002160 <_printf_i+0x1a8>
 80020c8:	4616      	mov	r6, r2
 80020ca:	fbb5 f1f3 	udiv	r1, r5, r3
 80020ce:	fb03 5711 	mls	r7, r3, r1, r5
 80020d2:	5dc7      	ldrb	r7, [r0, r7]
 80020d4:	f806 7d01 	strb.w	r7, [r6, #-1]!
 80020d8:	462f      	mov	r7, r5
 80020da:	42bb      	cmp	r3, r7
 80020dc:	460d      	mov	r5, r1
 80020de:	d9f4      	bls.n	80020ca <_printf_i+0x112>
 80020e0:	2b08      	cmp	r3, #8
 80020e2:	d10b      	bne.n	80020fc <_printf_i+0x144>
 80020e4:	6823      	ldr	r3, [r4, #0]
 80020e6:	07df      	lsls	r7, r3, #31
 80020e8:	d508      	bpl.n	80020fc <_printf_i+0x144>
 80020ea:	6923      	ldr	r3, [r4, #16]
 80020ec:	6861      	ldr	r1, [r4, #4]
 80020ee:	4299      	cmp	r1, r3
 80020f0:	bfde      	ittt	le
 80020f2:	2330      	movle	r3, #48	@ 0x30
 80020f4:	f806 3c01 	strble.w	r3, [r6, #-1]
 80020f8:	f106 36ff 	addle.w	r6, r6, #4294967295
 80020fc:	1b92      	subs	r2, r2, r6
 80020fe:	6122      	str	r2, [r4, #16]
 8002100:	f8cd a000 	str.w	sl, [sp]
 8002104:	464b      	mov	r3, r9
 8002106:	aa03      	add	r2, sp, #12
 8002108:	4621      	mov	r1, r4
 800210a:	4640      	mov	r0, r8
 800210c:	f7ff fee6 	bl	8001edc <_printf_common>
 8002110:	3001      	adds	r0, #1
 8002112:	d14a      	bne.n	80021aa <_printf_i+0x1f2>
 8002114:	f04f 30ff 	mov.w	r0, #4294967295
 8002118:	b004      	add	sp, #16
 800211a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800211e:	6823      	ldr	r3, [r4, #0]
 8002120:	f043 0320 	orr.w	r3, r3, #32
 8002124:	6023      	str	r3, [r4, #0]
 8002126:	4833      	ldr	r0, [pc, #204]	@ (80021f4 <_printf_i+0x23c>)
 8002128:	2778      	movs	r7, #120	@ 0x78
 800212a:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800212e:	6823      	ldr	r3, [r4, #0]
 8002130:	6831      	ldr	r1, [r6, #0]
 8002132:	061f      	lsls	r7, r3, #24
 8002134:	f851 5b04 	ldr.w	r5, [r1], #4
 8002138:	d402      	bmi.n	8002140 <_printf_i+0x188>
 800213a:	065f      	lsls	r7, r3, #25
 800213c:	bf48      	it	mi
 800213e:	b2ad      	uxthmi	r5, r5
 8002140:	6031      	str	r1, [r6, #0]
 8002142:	07d9      	lsls	r1, r3, #31
 8002144:	bf44      	itt	mi
 8002146:	f043 0320 	orrmi.w	r3, r3, #32
 800214a:	6023      	strmi	r3, [r4, #0]
 800214c:	b11d      	cbz	r5, 8002156 <_printf_i+0x19e>
 800214e:	2310      	movs	r3, #16
 8002150:	e7ac      	b.n	80020ac <_printf_i+0xf4>
 8002152:	4827      	ldr	r0, [pc, #156]	@ (80021f0 <_printf_i+0x238>)
 8002154:	e7e9      	b.n	800212a <_printf_i+0x172>
 8002156:	6823      	ldr	r3, [r4, #0]
 8002158:	f023 0320 	bic.w	r3, r3, #32
 800215c:	6023      	str	r3, [r4, #0]
 800215e:	e7f6      	b.n	800214e <_printf_i+0x196>
 8002160:	4616      	mov	r6, r2
 8002162:	e7bd      	b.n	80020e0 <_printf_i+0x128>
 8002164:	6833      	ldr	r3, [r6, #0]
 8002166:	6825      	ldr	r5, [r4, #0]
 8002168:	6961      	ldr	r1, [r4, #20]
 800216a:	1d18      	adds	r0, r3, #4
 800216c:	6030      	str	r0, [r6, #0]
 800216e:	062e      	lsls	r6, r5, #24
 8002170:	681b      	ldr	r3, [r3, #0]
 8002172:	d501      	bpl.n	8002178 <_printf_i+0x1c0>
 8002174:	6019      	str	r1, [r3, #0]
 8002176:	e002      	b.n	800217e <_printf_i+0x1c6>
 8002178:	0668      	lsls	r0, r5, #25
 800217a:	d5fb      	bpl.n	8002174 <_printf_i+0x1bc>
 800217c:	8019      	strh	r1, [r3, #0]
 800217e:	2300      	movs	r3, #0
 8002180:	6123      	str	r3, [r4, #16]
 8002182:	4616      	mov	r6, r2
 8002184:	e7bc      	b.n	8002100 <_printf_i+0x148>
 8002186:	6833      	ldr	r3, [r6, #0]
 8002188:	1d1a      	adds	r2, r3, #4
 800218a:	6032      	str	r2, [r6, #0]
 800218c:	681e      	ldr	r6, [r3, #0]
 800218e:	6862      	ldr	r2, [r4, #4]
 8002190:	2100      	movs	r1, #0
 8002192:	4630      	mov	r0, r6
 8002194:	f7fe f824 	bl	80001e0 <memchr>
 8002198:	b108      	cbz	r0, 800219e <_printf_i+0x1e6>
 800219a:	1b80      	subs	r0, r0, r6
 800219c:	6060      	str	r0, [r4, #4]
 800219e:	6863      	ldr	r3, [r4, #4]
 80021a0:	6123      	str	r3, [r4, #16]
 80021a2:	2300      	movs	r3, #0
 80021a4:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80021a8:	e7aa      	b.n	8002100 <_printf_i+0x148>
 80021aa:	6923      	ldr	r3, [r4, #16]
 80021ac:	4632      	mov	r2, r6
 80021ae:	4649      	mov	r1, r9
 80021b0:	4640      	mov	r0, r8
 80021b2:	47d0      	blx	sl
 80021b4:	3001      	adds	r0, #1
 80021b6:	d0ad      	beq.n	8002114 <_printf_i+0x15c>
 80021b8:	6823      	ldr	r3, [r4, #0]
 80021ba:	079b      	lsls	r3, r3, #30
 80021bc:	d413      	bmi.n	80021e6 <_printf_i+0x22e>
 80021be:	68e0      	ldr	r0, [r4, #12]
 80021c0:	9b03      	ldr	r3, [sp, #12]
 80021c2:	4298      	cmp	r0, r3
 80021c4:	bfb8      	it	lt
 80021c6:	4618      	movlt	r0, r3
 80021c8:	e7a6      	b.n	8002118 <_printf_i+0x160>
 80021ca:	2301      	movs	r3, #1
 80021cc:	4632      	mov	r2, r6
 80021ce:	4649      	mov	r1, r9
 80021d0:	4640      	mov	r0, r8
 80021d2:	47d0      	blx	sl
 80021d4:	3001      	adds	r0, #1
 80021d6:	d09d      	beq.n	8002114 <_printf_i+0x15c>
 80021d8:	3501      	adds	r5, #1
 80021da:	68e3      	ldr	r3, [r4, #12]
 80021dc:	9903      	ldr	r1, [sp, #12]
 80021de:	1a5b      	subs	r3, r3, r1
 80021e0:	42ab      	cmp	r3, r5
 80021e2:	dcf2      	bgt.n	80021ca <_printf_i+0x212>
 80021e4:	e7eb      	b.n	80021be <_printf_i+0x206>
 80021e6:	2500      	movs	r5, #0
 80021e8:	f104 0619 	add.w	r6, r4, #25
 80021ec:	e7f5      	b.n	80021da <_printf_i+0x222>
 80021ee:	bf00      	nop
 80021f0:	08003241 	.word	0x08003241
 80021f4:	08003252 	.word	0x08003252

080021f8 <memmove>:
 80021f8:	4288      	cmp	r0, r1
 80021fa:	b510      	push	{r4, lr}
 80021fc:	eb01 0402 	add.w	r4, r1, r2
 8002200:	d902      	bls.n	8002208 <memmove+0x10>
 8002202:	4284      	cmp	r4, r0
 8002204:	4623      	mov	r3, r4
 8002206:	d807      	bhi.n	8002218 <memmove+0x20>
 8002208:	1e43      	subs	r3, r0, #1
 800220a:	42a1      	cmp	r1, r4
 800220c:	d008      	beq.n	8002220 <memmove+0x28>
 800220e:	f811 2b01 	ldrb.w	r2, [r1], #1
 8002212:	f803 2f01 	strb.w	r2, [r3, #1]!
 8002216:	e7f8      	b.n	800220a <memmove+0x12>
 8002218:	4402      	add	r2, r0
 800221a:	4601      	mov	r1, r0
 800221c:	428a      	cmp	r2, r1
 800221e:	d100      	bne.n	8002222 <memmove+0x2a>
 8002220:	bd10      	pop	{r4, pc}
 8002222:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8002226:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800222a:	e7f7      	b.n	800221c <memmove+0x24>

0800222c <_sbrk_r>:
 800222c:	b538      	push	{r3, r4, r5, lr}
 800222e:	4d06      	ldr	r5, [pc, #24]	@ (8002248 <_sbrk_r+0x1c>)
 8002230:	2300      	movs	r3, #0
 8002232:	4604      	mov	r4, r0
 8002234:	4608      	mov	r0, r1
 8002236:	602b      	str	r3, [r5, #0]
 8002238:	f7ff fb1a 	bl	8001870 <_sbrk>
 800223c:	1c43      	adds	r3, r0, #1
 800223e:	d102      	bne.n	8002246 <_sbrk_r+0x1a>
 8002240:	682b      	ldr	r3, [r5, #0]
 8002242:	b103      	cbz	r3, 8002246 <_sbrk_r+0x1a>
 8002244:	6023      	str	r3, [r4, #0]
 8002246:	bd38      	pop	{r3, r4, r5, pc}
 8002248:	200001dc 	.word	0x200001dc

0800224c <memcpy>:
 800224c:	440a      	add	r2, r1
 800224e:	4291      	cmp	r1, r2
 8002250:	f100 33ff 	add.w	r3, r0, #4294967295
 8002254:	d100      	bne.n	8002258 <memcpy+0xc>
 8002256:	4770      	bx	lr
 8002258:	b510      	push	{r4, lr}
 800225a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800225e:	f803 4f01 	strb.w	r4, [r3, #1]!
 8002262:	4291      	cmp	r1, r2
 8002264:	d1f9      	bne.n	800225a <memcpy+0xe>
 8002266:	bd10      	pop	{r4, pc}

08002268 <_realloc_r>:
 8002268:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800226c:	4680      	mov	r8, r0
 800226e:	4615      	mov	r5, r2
 8002270:	460c      	mov	r4, r1
 8002272:	b921      	cbnz	r1, 800227e <_realloc_r+0x16>
 8002274:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8002278:	4611      	mov	r1, r2
 800227a:	f7ff bc4b 	b.w	8001b14 <_malloc_r>
 800227e:	b92a      	cbnz	r2, 800228c <_realloc_r+0x24>
 8002280:	f7ff fbdc 	bl	8001a3c <_free_r>
 8002284:	2400      	movs	r4, #0
 8002286:	4620      	mov	r0, r4
 8002288:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800228c:	f000 f81a 	bl	80022c4 <_malloc_usable_size_r>
 8002290:	4285      	cmp	r5, r0
 8002292:	4606      	mov	r6, r0
 8002294:	d802      	bhi.n	800229c <_realloc_r+0x34>
 8002296:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 800229a:	d8f4      	bhi.n	8002286 <_realloc_r+0x1e>
 800229c:	4629      	mov	r1, r5
 800229e:	4640      	mov	r0, r8
 80022a0:	f7ff fc38 	bl	8001b14 <_malloc_r>
 80022a4:	4607      	mov	r7, r0
 80022a6:	2800      	cmp	r0, #0
 80022a8:	d0ec      	beq.n	8002284 <_realloc_r+0x1c>
 80022aa:	42b5      	cmp	r5, r6
 80022ac:	462a      	mov	r2, r5
 80022ae:	4621      	mov	r1, r4
 80022b0:	bf28      	it	cs
 80022b2:	4632      	movcs	r2, r6
 80022b4:	f7ff ffca 	bl	800224c <memcpy>
 80022b8:	4621      	mov	r1, r4
 80022ba:	4640      	mov	r0, r8
 80022bc:	f7ff fbbe 	bl	8001a3c <_free_r>
 80022c0:	463c      	mov	r4, r7
 80022c2:	e7e0      	b.n	8002286 <_realloc_r+0x1e>

080022c4 <_malloc_usable_size_r>:
 80022c4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80022c8:	1f18      	subs	r0, r3, #4
 80022ca:	2b00      	cmp	r3, #0
 80022cc:	bfbc      	itt	lt
 80022ce:	580b      	ldrlt	r3, [r1, r0]
 80022d0:	18c0      	addlt	r0, r0, r3
 80022d2:	4770      	bx	lr

080022d4 <pow>:
 80022d4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80022d6:	ed2d 8b02 	vpush	{d8}
 80022da:	eeb0 8a40 	vmov.f32	s16, s0
 80022de:	eef0 8a60 	vmov.f32	s17, s1
 80022e2:	ec55 4b11 	vmov	r4, r5, d1
 80022e6:	f000 f873 	bl	80023d0 <__ieee754_pow>
 80022ea:	4622      	mov	r2, r4
 80022ec:	462b      	mov	r3, r5
 80022ee:	4620      	mov	r0, r4
 80022f0:	4629      	mov	r1, r5
 80022f2:	ec57 6b10 	vmov	r6, r7, d0
 80022f6:	f7fe fc19 	bl	8000b2c <__aeabi_dcmpun>
 80022fa:	2800      	cmp	r0, #0
 80022fc:	d13b      	bne.n	8002376 <pow+0xa2>
 80022fe:	ec51 0b18 	vmov	r0, r1, d8
 8002302:	2200      	movs	r2, #0
 8002304:	2300      	movs	r3, #0
 8002306:	f7fe fbdf 	bl	8000ac8 <__aeabi_dcmpeq>
 800230a:	b1b8      	cbz	r0, 800233c <pow+0x68>
 800230c:	2200      	movs	r2, #0
 800230e:	2300      	movs	r3, #0
 8002310:	4620      	mov	r0, r4
 8002312:	4629      	mov	r1, r5
 8002314:	f7fe fbd8 	bl	8000ac8 <__aeabi_dcmpeq>
 8002318:	2800      	cmp	r0, #0
 800231a:	d146      	bne.n	80023aa <pow+0xd6>
 800231c:	ec45 4b10 	vmov	d0, r4, r5
 8002320:	f000 f848 	bl	80023b4 <finite>
 8002324:	b338      	cbz	r0, 8002376 <pow+0xa2>
 8002326:	2200      	movs	r2, #0
 8002328:	2300      	movs	r3, #0
 800232a:	4620      	mov	r0, r4
 800232c:	4629      	mov	r1, r5
 800232e:	f7fe fbd5 	bl	8000adc <__aeabi_dcmplt>
 8002332:	b300      	cbz	r0, 8002376 <pow+0xa2>
 8002334:	f7ff fb56 	bl	80019e4 <__errno>
 8002338:	2322      	movs	r3, #34	@ 0x22
 800233a:	e01b      	b.n	8002374 <pow+0xa0>
 800233c:	ec47 6b10 	vmov	d0, r6, r7
 8002340:	f000 f838 	bl	80023b4 <finite>
 8002344:	b9e0      	cbnz	r0, 8002380 <pow+0xac>
 8002346:	eeb0 0a48 	vmov.f32	s0, s16
 800234a:	eef0 0a68 	vmov.f32	s1, s17
 800234e:	f000 f831 	bl	80023b4 <finite>
 8002352:	b1a8      	cbz	r0, 8002380 <pow+0xac>
 8002354:	ec45 4b10 	vmov	d0, r4, r5
 8002358:	f000 f82c 	bl	80023b4 <finite>
 800235c:	b180      	cbz	r0, 8002380 <pow+0xac>
 800235e:	4632      	mov	r2, r6
 8002360:	463b      	mov	r3, r7
 8002362:	4630      	mov	r0, r6
 8002364:	4639      	mov	r1, r7
 8002366:	f7fe fbe1 	bl	8000b2c <__aeabi_dcmpun>
 800236a:	2800      	cmp	r0, #0
 800236c:	d0e2      	beq.n	8002334 <pow+0x60>
 800236e:	f7ff fb39 	bl	80019e4 <__errno>
 8002372:	2321      	movs	r3, #33	@ 0x21
 8002374:	6003      	str	r3, [r0, #0]
 8002376:	ecbd 8b02 	vpop	{d8}
 800237a:	ec47 6b10 	vmov	d0, r6, r7
 800237e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8002380:	2200      	movs	r2, #0
 8002382:	2300      	movs	r3, #0
 8002384:	4630      	mov	r0, r6
 8002386:	4639      	mov	r1, r7
 8002388:	f7fe fb9e 	bl	8000ac8 <__aeabi_dcmpeq>
 800238c:	2800      	cmp	r0, #0
 800238e:	d0f2      	beq.n	8002376 <pow+0xa2>
 8002390:	eeb0 0a48 	vmov.f32	s0, s16
 8002394:	eef0 0a68 	vmov.f32	s1, s17
 8002398:	f000 f80c 	bl	80023b4 <finite>
 800239c:	2800      	cmp	r0, #0
 800239e:	d0ea      	beq.n	8002376 <pow+0xa2>
 80023a0:	ec45 4b10 	vmov	d0, r4, r5
 80023a4:	f000 f806 	bl	80023b4 <finite>
 80023a8:	e7c3      	b.n	8002332 <pow+0x5e>
 80023aa:	4f01      	ldr	r7, [pc, #4]	@ (80023b0 <pow+0xdc>)
 80023ac:	2600      	movs	r6, #0
 80023ae:	e7e2      	b.n	8002376 <pow+0xa2>
 80023b0:	3ff00000 	.word	0x3ff00000

080023b4 <finite>:
 80023b4:	b082      	sub	sp, #8
 80023b6:	ed8d 0b00 	vstr	d0, [sp]
 80023ba:	9801      	ldr	r0, [sp, #4]
 80023bc:	f040 4000 	orr.w	r0, r0, #2147483648	@ 0x80000000
 80023c0:	f500 1080 	add.w	r0, r0, #1048576	@ 0x100000
 80023c4:	0fc0      	lsrs	r0, r0, #31
 80023c6:	b002      	add	sp, #8
 80023c8:	4770      	bx	lr
 80023ca:	0000      	movs	r0, r0
 80023cc:	0000      	movs	r0, r0
	...

080023d0 <__ieee754_pow>:
 80023d0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80023d4:	b091      	sub	sp, #68	@ 0x44
 80023d6:	ed8d 1b00 	vstr	d1, [sp]
 80023da:	e9dd 1900 	ldrd	r1, r9, [sp]
 80023de:	f029 4a00 	bic.w	sl, r9, #2147483648	@ 0x80000000
 80023e2:	ea5a 0001 	orrs.w	r0, sl, r1
 80023e6:	ec57 6b10 	vmov	r6, r7, d0
 80023ea:	d113      	bne.n	8002414 <__ieee754_pow+0x44>
 80023ec:	19b3      	adds	r3, r6, r6
 80023ee:	f487 2200 	eor.w	r2, r7, #524288	@ 0x80000
 80023f2:	4152      	adcs	r2, r2
 80023f4:	4298      	cmp	r0, r3
 80023f6:	4b98      	ldr	r3, [pc, #608]	@ (8002658 <__ieee754_pow+0x288>)
 80023f8:	4193      	sbcs	r3, r2
 80023fa:	f080 84ea 	bcs.w	8002dd2 <__ieee754_pow+0xa02>
 80023fe:	e9dd 2300 	ldrd	r2, r3, [sp]
 8002402:	4630      	mov	r0, r6
 8002404:	4639      	mov	r1, r7
 8002406:	f7fd ff41 	bl	800028c <__adddf3>
 800240a:	ec41 0b10 	vmov	d0, r0, r1
 800240e:	b011      	add	sp, #68	@ 0x44
 8002410:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8002414:	4a91      	ldr	r2, [pc, #580]	@ (800265c <__ieee754_pow+0x28c>)
 8002416:	f027 4800 	bic.w	r8, r7, #2147483648	@ 0x80000000
 800241a:	4590      	cmp	r8, r2
 800241c:	463d      	mov	r5, r7
 800241e:	4633      	mov	r3, r6
 8002420:	d806      	bhi.n	8002430 <__ieee754_pow+0x60>
 8002422:	d101      	bne.n	8002428 <__ieee754_pow+0x58>
 8002424:	2e00      	cmp	r6, #0
 8002426:	d1ea      	bne.n	80023fe <__ieee754_pow+0x2e>
 8002428:	4592      	cmp	sl, r2
 800242a:	d801      	bhi.n	8002430 <__ieee754_pow+0x60>
 800242c:	d10e      	bne.n	800244c <__ieee754_pow+0x7c>
 800242e:	b169      	cbz	r1, 800244c <__ieee754_pow+0x7c>
 8002430:	f105 4540 	add.w	r5, r5, #3221225472	@ 0xc0000000
 8002434:	f505 1580 	add.w	r5, r5, #1048576	@ 0x100000
 8002438:	431d      	orrs	r5, r3
 800243a:	d1e0      	bne.n	80023fe <__ieee754_pow+0x2e>
 800243c:	e9dd 3200 	ldrd	r3, r2, [sp]
 8002440:	18db      	adds	r3, r3, r3
 8002442:	f482 2200 	eor.w	r2, r2, #524288	@ 0x80000
 8002446:	4152      	adcs	r2, r2
 8002448:	429d      	cmp	r5, r3
 800244a:	e7d4      	b.n	80023f6 <__ieee754_pow+0x26>
 800244c:	2d00      	cmp	r5, #0
 800244e:	46c3      	mov	fp, r8
 8002450:	da3a      	bge.n	80024c8 <__ieee754_pow+0xf8>
 8002452:	4a83      	ldr	r2, [pc, #524]	@ (8002660 <__ieee754_pow+0x290>)
 8002454:	4592      	cmp	sl, r2
 8002456:	d84d      	bhi.n	80024f4 <__ieee754_pow+0x124>
 8002458:	f1a2 7254 	sub.w	r2, r2, #55574528	@ 0x3500000
 800245c:	4592      	cmp	sl, r2
 800245e:	f240 84c7 	bls.w	8002df0 <__ieee754_pow+0xa20>
 8002462:	ea4f 522a 	mov.w	r2, sl, asr #20
 8002466:	f2a2 32ff 	subw	r2, r2, #1023	@ 0x3ff
 800246a:	2a14      	cmp	r2, #20
 800246c:	dd0f      	ble.n	800248e <__ieee754_pow+0xbe>
 800246e:	f1c2 0234 	rsb	r2, r2, #52	@ 0x34
 8002472:	fa21 f402 	lsr.w	r4, r1, r2
 8002476:	fa04 f202 	lsl.w	r2, r4, r2
 800247a:	428a      	cmp	r2, r1
 800247c:	f040 84b8 	bne.w	8002df0 <__ieee754_pow+0xa20>
 8002480:	f004 0401 	and.w	r4, r4, #1
 8002484:	f1c4 0402 	rsb	r4, r4, #2
 8002488:	2900      	cmp	r1, #0
 800248a:	d158      	bne.n	800253e <__ieee754_pow+0x16e>
 800248c:	e00e      	b.n	80024ac <__ieee754_pow+0xdc>
 800248e:	2900      	cmp	r1, #0
 8002490:	d154      	bne.n	800253c <__ieee754_pow+0x16c>
 8002492:	f1c2 0214 	rsb	r2, r2, #20
 8002496:	fa4a f402 	asr.w	r4, sl, r2
 800249a:	fa04 f202 	lsl.w	r2, r4, r2
 800249e:	4552      	cmp	r2, sl
 80024a0:	f040 84a3 	bne.w	8002dea <__ieee754_pow+0xa1a>
 80024a4:	f004 0401 	and.w	r4, r4, #1
 80024a8:	f1c4 0402 	rsb	r4, r4, #2
 80024ac:	4a6d      	ldr	r2, [pc, #436]	@ (8002664 <__ieee754_pow+0x294>)
 80024ae:	4592      	cmp	sl, r2
 80024b0:	d12e      	bne.n	8002510 <__ieee754_pow+0x140>
 80024b2:	f1b9 0f00 	cmp.w	r9, #0
 80024b6:	f280 8494 	bge.w	8002de2 <__ieee754_pow+0xa12>
 80024ba:	496a      	ldr	r1, [pc, #424]	@ (8002664 <__ieee754_pow+0x294>)
 80024bc:	4632      	mov	r2, r6
 80024be:	463b      	mov	r3, r7
 80024c0:	2000      	movs	r0, #0
 80024c2:	f7fe f9c3 	bl	800084c <__aeabi_ddiv>
 80024c6:	e7a0      	b.n	800240a <__ieee754_pow+0x3a>
 80024c8:	2400      	movs	r4, #0
 80024ca:	bbc1      	cbnz	r1, 800253e <__ieee754_pow+0x16e>
 80024cc:	4a63      	ldr	r2, [pc, #396]	@ (800265c <__ieee754_pow+0x28c>)
 80024ce:	4592      	cmp	sl, r2
 80024d0:	d1ec      	bne.n	80024ac <__ieee754_pow+0xdc>
 80024d2:	f108 4240 	add.w	r2, r8, #3221225472	@ 0xc0000000
 80024d6:	f502 1280 	add.w	r2, r2, #1048576	@ 0x100000
 80024da:	431a      	orrs	r2, r3
 80024dc:	f000 8479 	beq.w	8002dd2 <__ieee754_pow+0xa02>
 80024e0:	4b61      	ldr	r3, [pc, #388]	@ (8002668 <__ieee754_pow+0x298>)
 80024e2:	4598      	cmp	r8, r3
 80024e4:	d908      	bls.n	80024f8 <__ieee754_pow+0x128>
 80024e6:	f1b9 0f00 	cmp.w	r9, #0
 80024ea:	f2c0 8476 	blt.w	8002dda <__ieee754_pow+0xa0a>
 80024ee:	e9dd 0100 	ldrd	r0, r1, [sp]
 80024f2:	e78a      	b.n	800240a <__ieee754_pow+0x3a>
 80024f4:	2402      	movs	r4, #2
 80024f6:	e7e8      	b.n	80024ca <__ieee754_pow+0xfa>
 80024f8:	f1b9 0f00 	cmp.w	r9, #0
 80024fc:	f04f 0000 	mov.w	r0, #0
 8002500:	f04f 0100 	mov.w	r1, #0
 8002504:	da81      	bge.n	800240a <__ieee754_pow+0x3a>
 8002506:	e9dd 0300 	ldrd	r0, r3, [sp]
 800250a:	f103 4100 	add.w	r1, r3, #2147483648	@ 0x80000000
 800250e:	e77c      	b.n	800240a <__ieee754_pow+0x3a>
 8002510:	f1b9 4f80 	cmp.w	r9, #1073741824	@ 0x40000000
 8002514:	d106      	bne.n	8002524 <__ieee754_pow+0x154>
 8002516:	4632      	mov	r2, r6
 8002518:	463b      	mov	r3, r7
 800251a:	4630      	mov	r0, r6
 800251c:	4639      	mov	r1, r7
 800251e:	f7fe f86b 	bl	80005f8 <__aeabi_dmul>
 8002522:	e772      	b.n	800240a <__ieee754_pow+0x3a>
 8002524:	4a51      	ldr	r2, [pc, #324]	@ (800266c <__ieee754_pow+0x29c>)
 8002526:	4591      	cmp	r9, r2
 8002528:	d109      	bne.n	800253e <__ieee754_pow+0x16e>
 800252a:	2d00      	cmp	r5, #0
 800252c:	db07      	blt.n	800253e <__ieee754_pow+0x16e>
 800252e:	ec47 6b10 	vmov	d0, r6, r7
 8002532:	b011      	add	sp, #68	@ 0x44
 8002534:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002538:	f000 bd52 	b.w	8002fe0 <__ieee754_sqrt>
 800253c:	2400      	movs	r4, #0
 800253e:	ec47 6b10 	vmov	d0, r6, r7
 8002542:	9302      	str	r3, [sp, #8]
 8002544:	f000 fc88 	bl	8002e58 <fabs>
 8002548:	9b02      	ldr	r3, [sp, #8]
 800254a:	ec51 0b10 	vmov	r0, r1, d0
 800254e:	bb53      	cbnz	r3, 80025a6 <__ieee754_pow+0x1d6>
 8002550:	4b44      	ldr	r3, [pc, #272]	@ (8002664 <__ieee754_pow+0x294>)
 8002552:	f025 4240 	bic.w	r2, r5, #3221225472	@ 0xc0000000
 8002556:	429a      	cmp	r2, r3
 8002558:	d002      	beq.n	8002560 <__ieee754_pow+0x190>
 800255a:	f1b8 0f00 	cmp.w	r8, #0
 800255e:	d122      	bne.n	80025a6 <__ieee754_pow+0x1d6>
 8002560:	f1b9 0f00 	cmp.w	r9, #0
 8002564:	da05      	bge.n	8002572 <__ieee754_pow+0x1a2>
 8002566:	4602      	mov	r2, r0
 8002568:	460b      	mov	r3, r1
 800256a:	2000      	movs	r0, #0
 800256c:	493d      	ldr	r1, [pc, #244]	@ (8002664 <__ieee754_pow+0x294>)
 800256e:	f7fe f96d 	bl	800084c <__aeabi_ddiv>
 8002572:	2d00      	cmp	r5, #0
 8002574:	f6bf af49 	bge.w	800240a <__ieee754_pow+0x3a>
 8002578:	f108 4840 	add.w	r8, r8, #3221225472	@ 0xc0000000
 800257c:	f508 1880 	add.w	r8, r8, #1048576	@ 0x100000
 8002580:	ea58 0804 	orrs.w	r8, r8, r4
 8002584:	d108      	bne.n	8002598 <__ieee754_pow+0x1c8>
 8002586:	4602      	mov	r2, r0
 8002588:	460b      	mov	r3, r1
 800258a:	4610      	mov	r0, r2
 800258c:	4619      	mov	r1, r3
 800258e:	f7fd fe7b 	bl	8000288 <__aeabi_dsub>
 8002592:	4602      	mov	r2, r0
 8002594:	460b      	mov	r3, r1
 8002596:	e794      	b.n	80024c2 <__ieee754_pow+0xf2>
 8002598:	2c01      	cmp	r4, #1
 800259a:	f47f af36 	bne.w	800240a <__ieee754_pow+0x3a>
 800259e:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 80025a2:	4619      	mov	r1, r3
 80025a4:	e731      	b.n	800240a <__ieee754_pow+0x3a>
 80025a6:	0feb      	lsrs	r3, r5, #31
 80025a8:	3b01      	subs	r3, #1
 80025aa:	ea53 0204 	orrs.w	r2, r3, r4
 80025ae:	d102      	bne.n	80025b6 <__ieee754_pow+0x1e6>
 80025b0:	4632      	mov	r2, r6
 80025b2:	463b      	mov	r3, r7
 80025b4:	e7e9      	b.n	800258a <__ieee754_pow+0x1ba>
 80025b6:	3c01      	subs	r4, #1
 80025b8:	431c      	orrs	r4, r3
 80025ba:	d016      	beq.n	80025ea <__ieee754_pow+0x21a>
 80025bc:	ed9f 7b22 	vldr	d7, [pc, #136]	@ 8002648 <__ieee754_pow+0x278>
 80025c0:	f1ba 4f84 	cmp.w	sl, #1107296256	@ 0x42000000
 80025c4:	ed8d 7b02 	vstr	d7, [sp, #8]
 80025c8:	f240 8112 	bls.w	80027f0 <__ieee754_pow+0x420>
 80025cc:	4b28      	ldr	r3, [pc, #160]	@ (8002670 <__ieee754_pow+0x2a0>)
 80025ce:	459a      	cmp	sl, r3
 80025d0:	4b25      	ldr	r3, [pc, #148]	@ (8002668 <__ieee754_pow+0x298>)
 80025d2:	d916      	bls.n	8002602 <__ieee754_pow+0x232>
 80025d4:	4598      	cmp	r8, r3
 80025d6:	d80b      	bhi.n	80025f0 <__ieee754_pow+0x220>
 80025d8:	f1b9 0f00 	cmp.w	r9, #0
 80025dc:	da0b      	bge.n	80025f6 <__ieee754_pow+0x226>
 80025de:	2000      	movs	r0, #0
 80025e0:	b011      	add	sp, #68	@ 0x44
 80025e2:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80025e6:	f000 bcf3 	b.w	8002fd0 <__math_oflow>
 80025ea:	ed9f 7b19 	vldr	d7, [pc, #100]	@ 8002650 <__ieee754_pow+0x280>
 80025ee:	e7e7      	b.n	80025c0 <__ieee754_pow+0x1f0>
 80025f0:	f1b9 0f00 	cmp.w	r9, #0
 80025f4:	dcf3      	bgt.n	80025de <__ieee754_pow+0x20e>
 80025f6:	2000      	movs	r0, #0
 80025f8:	b011      	add	sp, #68	@ 0x44
 80025fa:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80025fe:	f000 bcdf 	b.w	8002fc0 <__math_uflow>
 8002602:	4598      	cmp	r8, r3
 8002604:	d20c      	bcs.n	8002620 <__ieee754_pow+0x250>
 8002606:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800260a:	2200      	movs	r2, #0
 800260c:	2300      	movs	r3, #0
 800260e:	f7fe fa65 	bl	8000adc <__aeabi_dcmplt>
 8002612:	3800      	subs	r0, #0
 8002614:	bf18      	it	ne
 8002616:	2001      	movne	r0, #1
 8002618:	f1b9 0f00 	cmp.w	r9, #0
 800261c:	daec      	bge.n	80025f8 <__ieee754_pow+0x228>
 800261e:	e7df      	b.n	80025e0 <__ieee754_pow+0x210>
 8002620:	4b10      	ldr	r3, [pc, #64]	@ (8002664 <__ieee754_pow+0x294>)
 8002622:	4598      	cmp	r8, r3
 8002624:	f04f 0200 	mov.w	r2, #0
 8002628:	d924      	bls.n	8002674 <__ieee754_pow+0x2a4>
 800262a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800262e:	2300      	movs	r3, #0
 8002630:	f7fe fa54 	bl	8000adc <__aeabi_dcmplt>
 8002634:	3800      	subs	r0, #0
 8002636:	bf18      	it	ne
 8002638:	2001      	movne	r0, #1
 800263a:	f1b9 0f00 	cmp.w	r9, #0
 800263e:	dccf      	bgt.n	80025e0 <__ieee754_pow+0x210>
 8002640:	e7da      	b.n	80025f8 <__ieee754_pow+0x228>
 8002642:	bf00      	nop
 8002644:	f3af 8000 	nop.w
 8002648:	00000000 	.word	0x00000000
 800264c:	3ff00000 	.word	0x3ff00000
 8002650:	00000000 	.word	0x00000000
 8002654:	bff00000 	.word	0xbff00000
 8002658:	fff00000 	.word	0xfff00000
 800265c:	7ff00000 	.word	0x7ff00000
 8002660:	433fffff 	.word	0x433fffff
 8002664:	3ff00000 	.word	0x3ff00000
 8002668:	3fefffff 	.word	0x3fefffff
 800266c:	3fe00000 	.word	0x3fe00000
 8002670:	43f00000 	.word	0x43f00000
 8002674:	4b5a      	ldr	r3, [pc, #360]	@ (80027e0 <__ieee754_pow+0x410>)
 8002676:	f7fd fe07 	bl	8000288 <__aeabi_dsub>
 800267a:	a351      	add	r3, pc, #324	@ (adr r3, 80027c0 <__ieee754_pow+0x3f0>)
 800267c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002680:	4604      	mov	r4, r0
 8002682:	460d      	mov	r5, r1
 8002684:	f7fd ffb8 	bl	80005f8 <__aeabi_dmul>
 8002688:	a34f      	add	r3, pc, #316	@ (adr r3, 80027c8 <__ieee754_pow+0x3f8>)
 800268a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800268e:	4606      	mov	r6, r0
 8002690:	460f      	mov	r7, r1
 8002692:	4620      	mov	r0, r4
 8002694:	4629      	mov	r1, r5
 8002696:	f7fd ffaf 	bl	80005f8 <__aeabi_dmul>
 800269a:	4b52      	ldr	r3, [pc, #328]	@ (80027e4 <__ieee754_pow+0x414>)
 800269c:	4682      	mov	sl, r0
 800269e:	468b      	mov	fp, r1
 80026a0:	2200      	movs	r2, #0
 80026a2:	4620      	mov	r0, r4
 80026a4:	4629      	mov	r1, r5
 80026a6:	f7fd ffa7 	bl	80005f8 <__aeabi_dmul>
 80026aa:	4602      	mov	r2, r0
 80026ac:	460b      	mov	r3, r1
 80026ae:	a148      	add	r1, pc, #288	@ (adr r1, 80027d0 <__ieee754_pow+0x400>)
 80026b0:	e9d1 0100 	ldrd	r0, r1, [r1]
 80026b4:	f7fd fde8 	bl	8000288 <__aeabi_dsub>
 80026b8:	4622      	mov	r2, r4
 80026ba:	462b      	mov	r3, r5
 80026bc:	f7fd ff9c 	bl	80005f8 <__aeabi_dmul>
 80026c0:	4602      	mov	r2, r0
 80026c2:	460b      	mov	r3, r1
 80026c4:	2000      	movs	r0, #0
 80026c6:	4948      	ldr	r1, [pc, #288]	@ (80027e8 <__ieee754_pow+0x418>)
 80026c8:	f7fd fdde 	bl	8000288 <__aeabi_dsub>
 80026cc:	4622      	mov	r2, r4
 80026ce:	4680      	mov	r8, r0
 80026d0:	4689      	mov	r9, r1
 80026d2:	462b      	mov	r3, r5
 80026d4:	4620      	mov	r0, r4
 80026d6:	4629      	mov	r1, r5
 80026d8:	f7fd ff8e 	bl	80005f8 <__aeabi_dmul>
 80026dc:	4602      	mov	r2, r0
 80026de:	460b      	mov	r3, r1
 80026e0:	4640      	mov	r0, r8
 80026e2:	4649      	mov	r1, r9
 80026e4:	f7fd ff88 	bl	80005f8 <__aeabi_dmul>
 80026e8:	a33b      	add	r3, pc, #236	@ (adr r3, 80027d8 <__ieee754_pow+0x408>)
 80026ea:	e9d3 2300 	ldrd	r2, r3, [r3]
 80026ee:	f7fd ff83 	bl	80005f8 <__aeabi_dmul>
 80026f2:	4602      	mov	r2, r0
 80026f4:	460b      	mov	r3, r1
 80026f6:	4650      	mov	r0, sl
 80026f8:	4659      	mov	r1, fp
 80026fa:	f7fd fdc5 	bl	8000288 <__aeabi_dsub>
 80026fe:	4602      	mov	r2, r0
 8002700:	460b      	mov	r3, r1
 8002702:	4680      	mov	r8, r0
 8002704:	4689      	mov	r9, r1
 8002706:	4630      	mov	r0, r6
 8002708:	4639      	mov	r1, r7
 800270a:	f7fd fdbf 	bl	800028c <__adddf3>
 800270e:	2400      	movs	r4, #0
 8002710:	4632      	mov	r2, r6
 8002712:	463b      	mov	r3, r7
 8002714:	4620      	mov	r0, r4
 8002716:	460d      	mov	r5, r1
 8002718:	f7fd fdb6 	bl	8000288 <__aeabi_dsub>
 800271c:	4602      	mov	r2, r0
 800271e:	460b      	mov	r3, r1
 8002720:	4640      	mov	r0, r8
 8002722:	4649      	mov	r1, r9
 8002724:	f7fd fdb0 	bl	8000288 <__aeabi_dsub>
 8002728:	e9dd 2300 	ldrd	r2, r3, [sp]
 800272c:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8002730:	2300      	movs	r3, #0
 8002732:	9304      	str	r3, [sp, #16]
 8002734:	e9dd ab04 	ldrd	sl, fp, [sp, #16]
 8002738:	4606      	mov	r6, r0
 800273a:	460f      	mov	r7, r1
 800273c:	4652      	mov	r2, sl
 800273e:	465b      	mov	r3, fp
 8002740:	e9dd 0100 	ldrd	r0, r1, [sp]
 8002744:	f7fd fda0 	bl	8000288 <__aeabi_dsub>
 8002748:	4622      	mov	r2, r4
 800274a:	462b      	mov	r3, r5
 800274c:	f7fd ff54 	bl	80005f8 <__aeabi_dmul>
 8002750:	e9dd 2300 	ldrd	r2, r3, [sp]
 8002754:	4680      	mov	r8, r0
 8002756:	4689      	mov	r9, r1
 8002758:	4630      	mov	r0, r6
 800275a:	4639      	mov	r1, r7
 800275c:	f7fd ff4c 	bl	80005f8 <__aeabi_dmul>
 8002760:	4602      	mov	r2, r0
 8002762:	460b      	mov	r3, r1
 8002764:	4640      	mov	r0, r8
 8002766:	4649      	mov	r1, r9
 8002768:	f7fd fd90 	bl	800028c <__adddf3>
 800276c:	4652      	mov	r2, sl
 800276e:	465b      	mov	r3, fp
 8002770:	4606      	mov	r6, r0
 8002772:	460f      	mov	r7, r1
 8002774:	4620      	mov	r0, r4
 8002776:	4629      	mov	r1, r5
 8002778:	f7fd ff3e 	bl	80005f8 <__aeabi_dmul>
 800277c:	460b      	mov	r3, r1
 800277e:	4602      	mov	r2, r0
 8002780:	4680      	mov	r8, r0
 8002782:	4689      	mov	r9, r1
 8002784:	4630      	mov	r0, r6
 8002786:	4639      	mov	r1, r7
 8002788:	f7fd fd80 	bl	800028c <__adddf3>
 800278c:	4b17      	ldr	r3, [pc, #92]	@ (80027ec <__ieee754_pow+0x41c>)
 800278e:	4299      	cmp	r1, r3
 8002790:	4604      	mov	r4, r0
 8002792:	460d      	mov	r5, r1
 8002794:	468a      	mov	sl, r1
 8002796:	468b      	mov	fp, r1
 8002798:	f340 82ef 	ble.w	8002d7a <__ieee754_pow+0x9aa>
 800279c:	f101 433f 	add.w	r3, r1, #3204448256	@ 0xbf000000
 80027a0:	f503 03e0 	add.w	r3, r3, #7340032	@ 0x700000
 80027a4:	4303      	orrs	r3, r0
 80027a6:	f000 81e8 	beq.w	8002b7a <__ieee754_pow+0x7aa>
 80027aa:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80027ae:	2200      	movs	r2, #0
 80027b0:	2300      	movs	r3, #0
 80027b2:	f7fe f993 	bl	8000adc <__aeabi_dcmplt>
 80027b6:	3800      	subs	r0, #0
 80027b8:	bf18      	it	ne
 80027ba:	2001      	movne	r0, #1
 80027bc:	e710      	b.n	80025e0 <__ieee754_pow+0x210>
 80027be:	bf00      	nop
 80027c0:	60000000 	.word	0x60000000
 80027c4:	3ff71547 	.word	0x3ff71547
 80027c8:	f85ddf44 	.word	0xf85ddf44
 80027cc:	3e54ae0b 	.word	0x3e54ae0b
 80027d0:	55555555 	.word	0x55555555
 80027d4:	3fd55555 	.word	0x3fd55555
 80027d8:	652b82fe 	.word	0x652b82fe
 80027dc:	3ff71547 	.word	0x3ff71547
 80027e0:	3ff00000 	.word	0x3ff00000
 80027e4:	3fd00000 	.word	0x3fd00000
 80027e8:	3fe00000 	.word	0x3fe00000
 80027ec:	408fffff 	.word	0x408fffff
 80027f0:	4bd5      	ldr	r3, [pc, #852]	@ (8002b48 <__ieee754_pow+0x778>)
 80027f2:	402b      	ands	r3, r5
 80027f4:	2200      	movs	r2, #0
 80027f6:	b92b      	cbnz	r3, 8002804 <__ieee754_pow+0x434>
 80027f8:	4bd4      	ldr	r3, [pc, #848]	@ (8002b4c <__ieee754_pow+0x77c>)
 80027fa:	f7fd fefd 	bl	80005f8 <__aeabi_dmul>
 80027fe:	f06f 0234 	mvn.w	r2, #52	@ 0x34
 8002802:	468b      	mov	fp, r1
 8002804:	ea4f 532b 	mov.w	r3, fp, asr #20
 8002808:	f2a3 33ff 	subw	r3, r3, #1023	@ 0x3ff
 800280c:	4413      	add	r3, r2
 800280e:	930a      	str	r3, [sp, #40]	@ 0x28
 8002810:	4bcf      	ldr	r3, [pc, #828]	@ (8002b50 <__ieee754_pow+0x780>)
 8002812:	f3cb 0b13 	ubfx	fp, fp, #0, #20
 8002816:	f04b 557f 	orr.w	r5, fp, #1069547520	@ 0x3fc00000
 800281a:	459b      	cmp	fp, r3
 800281c:	f445 1540 	orr.w	r5, r5, #3145728	@ 0x300000
 8002820:	dd08      	ble.n	8002834 <__ieee754_pow+0x464>
 8002822:	4bcc      	ldr	r3, [pc, #816]	@ (8002b54 <__ieee754_pow+0x784>)
 8002824:	459b      	cmp	fp, r3
 8002826:	f340 81a5 	ble.w	8002b74 <__ieee754_pow+0x7a4>
 800282a:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800282c:	3301      	adds	r3, #1
 800282e:	930a      	str	r3, [sp, #40]	@ 0x28
 8002830:	f5a5 1580 	sub.w	r5, r5, #1048576	@ 0x100000
 8002834:	f04f 0a00 	mov.w	sl, #0
 8002838:	ea4f 03ca 	mov.w	r3, sl, lsl #3
 800283c:	930b      	str	r3, [sp, #44]	@ 0x2c
 800283e:	4bc6      	ldr	r3, [pc, #792]	@ (8002b58 <__ieee754_pow+0x788>)
 8002840:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 8002844:	ed93 7b00 	vldr	d7, [r3]
 8002848:	4629      	mov	r1, r5
 800284a:	ec53 2b17 	vmov	r2, r3, d7
 800284e:	ed8d 7b06 	vstr	d7, [sp, #24]
 8002852:	e9cd 0108 	strd	r0, r1, [sp, #32]
 8002856:	f7fd fd17 	bl	8000288 <__aeabi_dsub>
 800285a:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 800285e:	4606      	mov	r6, r0
 8002860:	460f      	mov	r7, r1
 8002862:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8002866:	f7fd fd11 	bl	800028c <__adddf3>
 800286a:	4602      	mov	r2, r0
 800286c:	460b      	mov	r3, r1
 800286e:	2000      	movs	r0, #0
 8002870:	49ba      	ldr	r1, [pc, #744]	@ (8002b5c <__ieee754_pow+0x78c>)
 8002872:	f7fd ffeb 	bl	800084c <__aeabi_ddiv>
 8002876:	e9cd 010c 	strd	r0, r1, [sp, #48]	@ 0x30
 800287a:	4602      	mov	r2, r0
 800287c:	460b      	mov	r3, r1
 800287e:	4630      	mov	r0, r6
 8002880:	4639      	mov	r1, r7
 8002882:	f7fd feb9 	bl	80005f8 <__aeabi_dmul>
 8002886:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800288a:	e9dd bc04 	ldrd	fp, ip, [sp, #16]
 800288e:	106d      	asrs	r5, r5, #1
 8002890:	f045 5500 	orr.w	r5, r5, #536870912	@ 0x20000000
 8002894:	f04f 0b00 	mov.w	fp, #0
 8002898:	f505 2500 	add.w	r5, r5, #524288	@ 0x80000
 800289c:	4661      	mov	r1, ip
 800289e:	2200      	movs	r2, #0
 80028a0:	eb05 438a 	add.w	r3, r5, sl, lsl #18
 80028a4:	4658      	mov	r0, fp
 80028a6:	46e1      	mov	r9, ip
 80028a8:	e9cd bc0e 	strd	fp, ip, [sp, #56]	@ 0x38
 80028ac:	4614      	mov	r4, r2
 80028ae:	461d      	mov	r5, r3
 80028b0:	f7fd fea2 	bl	80005f8 <__aeabi_dmul>
 80028b4:	4602      	mov	r2, r0
 80028b6:	460b      	mov	r3, r1
 80028b8:	4630      	mov	r0, r6
 80028ba:	4639      	mov	r1, r7
 80028bc:	f7fd fce4 	bl	8000288 <__aeabi_dsub>
 80028c0:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 80028c4:	4606      	mov	r6, r0
 80028c6:	460f      	mov	r7, r1
 80028c8:	4620      	mov	r0, r4
 80028ca:	4629      	mov	r1, r5
 80028cc:	f7fd fcdc 	bl	8000288 <__aeabi_dsub>
 80028d0:	4602      	mov	r2, r0
 80028d2:	460b      	mov	r3, r1
 80028d4:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 80028d8:	f7fd fcd6 	bl	8000288 <__aeabi_dsub>
 80028dc:	465a      	mov	r2, fp
 80028de:	464b      	mov	r3, r9
 80028e0:	f7fd fe8a 	bl	80005f8 <__aeabi_dmul>
 80028e4:	4602      	mov	r2, r0
 80028e6:	460b      	mov	r3, r1
 80028e8:	4630      	mov	r0, r6
 80028ea:	4639      	mov	r1, r7
 80028ec:	f7fd fccc 	bl	8000288 <__aeabi_dsub>
 80028f0:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	@ 0x30
 80028f4:	f7fd fe80 	bl	80005f8 <__aeabi_dmul>
 80028f8:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80028fc:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8002900:	4610      	mov	r0, r2
 8002902:	4619      	mov	r1, r3
 8002904:	f7fd fe78 	bl	80005f8 <__aeabi_dmul>
 8002908:	a37d      	add	r3, pc, #500	@ (adr r3, 8002b00 <__ieee754_pow+0x730>)
 800290a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800290e:	4604      	mov	r4, r0
 8002910:	460d      	mov	r5, r1
 8002912:	f7fd fe71 	bl	80005f8 <__aeabi_dmul>
 8002916:	a37c      	add	r3, pc, #496	@ (adr r3, 8002b08 <__ieee754_pow+0x738>)
 8002918:	e9d3 2300 	ldrd	r2, r3, [r3]
 800291c:	f7fd fcb6 	bl	800028c <__adddf3>
 8002920:	4622      	mov	r2, r4
 8002922:	462b      	mov	r3, r5
 8002924:	f7fd fe68 	bl	80005f8 <__aeabi_dmul>
 8002928:	a379      	add	r3, pc, #484	@ (adr r3, 8002b10 <__ieee754_pow+0x740>)
 800292a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800292e:	f7fd fcad 	bl	800028c <__adddf3>
 8002932:	4622      	mov	r2, r4
 8002934:	462b      	mov	r3, r5
 8002936:	f7fd fe5f 	bl	80005f8 <__aeabi_dmul>
 800293a:	a377      	add	r3, pc, #476	@ (adr r3, 8002b18 <__ieee754_pow+0x748>)
 800293c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002940:	f7fd fca4 	bl	800028c <__adddf3>
 8002944:	4622      	mov	r2, r4
 8002946:	462b      	mov	r3, r5
 8002948:	f7fd fe56 	bl	80005f8 <__aeabi_dmul>
 800294c:	a374      	add	r3, pc, #464	@ (adr r3, 8002b20 <__ieee754_pow+0x750>)
 800294e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002952:	f7fd fc9b 	bl	800028c <__adddf3>
 8002956:	4622      	mov	r2, r4
 8002958:	462b      	mov	r3, r5
 800295a:	f7fd fe4d 	bl	80005f8 <__aeabi_dmul>
 800295e:	a372      	add	r3, pc, #456	@ (adr r3, 8002b28 <__ieee754_pow+0x758>)
 8002960:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002964:	f7fd fc92 	bl	800028c <__adddf3>
 8002968:	4622      	mov	r2, r4
 800296a:	4606      	mov	r6, r0
 800296c:	460f      	mov	r7, r1
 800296e:	462b      	mov	r3, r5
 8002970:	4620      	mov	r0, r4
 8002972:	4629      	mov	r1, r5
 8002974:	f7fd fe40 	bl	80005f8 <__aeabi_dmul>
 8002978:	4602      	mov	r2, r0
 800297a:	460b      	mov	r3, r1
 800297c:	4630      	mov	r0, r6
 800297e:	4639      	mov	r1, r7
 8002980:	f7fd fe3a 	bl	80005f8 <__aeabi_dmul>
 8002984:	465a      	mov	r2, fp
 8002986:	4604      	mov	r4, r0
 8002988:	460d      	mov	r5, r1
 800298a:	464b      	mov	r3, r9
 800298c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8002990:	f7fd fc7c 	bl	800028c <__adddf3>
 8002994:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8002998:	f7fd fe2e 	bl	80005f8 <__aeabi_dmul>
 800299c:	4622      	mov	r2, r4
 800299e:	462b      	mov	r3, r5
 80029a0:	f7fd fc74 	bl	800028c <__adddf3>
 80029a4:	465a      	mov	r2, fp
 80029a6:	e9cd 0108 	strd	r0, r1, [sp, #32]
 80029aa:	464b      	mov	r3, r9
 80029ac:	4658      	mov	r0, fp
 80029ae:	4649      	mov	r1, r9
 80029b0:	f7fd fe22 	bl	80005f8 <__aeabi_dmul>
 80029b4:	4b6a      	ldr	r3, [pc, #424]	@ (8002b60 <__ieee754_pow+0x790>)
 80029b6:	2200      	movs	r2, #0
 80029b8:	4606      	mov	r6, r0
 80029ba:	460f      	mov	r7, r1
 80029bc:	f7fd fc66 	bl	800028c <__adddf3>
 80029c0:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 80029c4:	f7fd fc62 	bl	800028c <__adddf3>
 80029c8:	46d8      	mov	r8, fp
 80029ca:	e9dd bc0e 	ldrd	fp, ip, [sp, #56]	@ 0x38
 80029ce:	460d      	mov	r5, r1
 80029d0:	465a      	mov	r2, fp
 80029d2:	460b      	mov	r3, r1
 80029d4:	4640      	mov	r0, r8
 80029d6:	4649      	mov	r1, r9
 80029d8:	e9cd bc0c 	strd	fp, ip, [sp, #48]	@ 0x30
 80029dc:	f7fd fe0c 	bl	80005f8 <__aeabi_dmul>
 80029e0:	465c      	mov	r4, fp
 80029e2:	4680      	mov	r8, r0
 80029e4:	4689      	mov	r9, r1
 80029e6:	4b5e      	ldr	r3, [pc, #376]	@ (8002b60 <__ieee754_pow+0x790>)
 80029e8:	2200      	movs	r2, #0
 80029ea:	4620      	mov	r0, r4
 80029ec:	4629      	mov	r1, r5
 80029ee:	f7fd fc4b 	bl	8000288 <__aeabi_dsub>
 80029f2:	4632      	mov	r2, r6
 80029f4:	463b      	mov	r3, r7
 80029f6:	f7fd fc47 	bl	8000288 <__aeabi_dsub>
 80029fa:	4602      	mov	r2, r0
 80029fc:	460b      	mov	r3, r1
 80029fe:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8002a02:	f7fd fc41 	bl	8000288 <__aeabi_dsub>
 8002a06:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8002a0a:	f7fd fdf5 	bl	80005f8 <__aeabi_dmul>
 8002a0e:	4622      	mov	r2, r4
 8002a10:	4606      	mov	r6, r0
 8002a12:	460f      	mov	r7, r1
 8002a14:	462b      	mov	r3, r5
 8002a16:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8002a1a:	f7fd fded 	bl	80005f8 <__aeabi_dmul>
 8002a1e:	4602      	mov	r2, r0
 8002a20:	460b      	mov	r3, r1
 8002a22:	4630      	mov	r0, r6
 8002a24:	4639      	mov	r1, r7
 8002a26:	f7fd fc31 	bl	800028c <__adddf3>
 8002a2a:	4606      	mov	r6, r0
 8002a2c:	460f      	mov	r7, r1
 8002a2e:	4602      	mov	r2, r0
 8002a30:	460b      	mov	r3, r1
 8002a32:	4640      	mov	r0, r8
 8002a34:	4649      	mov	r1, r9
 8002a36:	f7fd fc29 	bl	800028c <__adddf3>
 8002a3a:	e9dd bc0c 	ldrd	fp, ip, [sp, #48]	@ 0x30
 8002a3e:	a33c      	add	r3, pc, #240	@ (adr r3, 8002b30 <__ieee754_pow+0x760>)
 8002a40:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002a44:	4658      	mov	r0, fp
 8002a46:	e9cd bc08 	strd	fp, ip, [sp, #32]
 8002a4a:	460d      	mov	r5, r1
 8002a4c:	f7fd fdd4 	bl	80005f8 <__aeabi_dmul>
 8002a50:	465c      	mov	r4, fp
 8002a52:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8002a56:	4642      	mov	r2, r8
 8002a58:	464b      	mov	r3, r9
 8002a5a:	4620      	mov	r0, r4
 8002a5c:	4629      	mov	r1, r5
 8002a5e:	f7fd fc13 	bl	8000288 <__aeabi_dsub>
 8002a62:	4602      	mov	r2, r0
 8002a64:	460b      	mov	r3, r1
 8002a66:	4630      	mov	r0, r6
 8002a68:	4639      	mov	r1, r7
 8002a6a:	f7fd fc0d 	bl	8000288 <__aeabi_dsub>
 8002a6e:	a332      	add	r3, pc, #200	@ (adr r3, 8002b38 <__ieee754_pow+0x768>)
 8002a70:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002a74:	f7fd fdc0 	bl	80005f8 <__aeabi_dmul>
 8002a78:	a331      	add	r3, pc, #196	@ (adr r3, 8002b40 <__ieee754_pow+0x770>)
 8002a7a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002a7e:	4606      	mov	r6, r0
 8002a80:	460f      	mov	r7, r1
 8002a82:	4620      	mov	r0, r4
 8002a84:	4629      	mov	r1, r5
 8002a86:	f7fd fdb7 	bl	80005f8 <__aeabi_dmul>
 8002a8a:	4602      	mov	r2, r0
 8002a8c:	460b      	mov	r3, r1
 8002a8e:	4630      	mov	r0, r6
 8002a90:	4639      	mov	r1, r7
 8002a92:	f7fd fbfb 	bl	800028c <__adddf3>
 8002a96:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 8002a98:	4b32      	ldr	r3, [pc, #200]	@ (8002b64 <__ieee754_pow+0x794>)
 8002a9a:	4413      	add	r3, r2
 8002a9c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002aa0:	f7fd fbf4 	bl	800028c <__adddf3>
 8002aa4:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8002aa8:	980a      	ldr	r0, [sp, #40]	@ 0x28
 8002aaa:	f7fd fd3b 	bl	8000524 <__aeabi_i2d>
 8002aae:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 8002ab0:	4b2d      	ldr	r3, [pc, #180]	@ (8002b68 <__ieee754_pow+0x798>)
 8002ab2:	4413      	add	r3, r2
 8002ab4:	e9d3 8900 	ldrd	r8, r9, [r3]
 8002ab8:	4606      	mov	r6, r0
 8002aba:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8002abe:	460f      	mov	r7, r1
 8002ac0:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8002ac4:	f7fd fbe2 	bl	800028c <__adddf3>
 8002ac8:	4642      	mov	r2, r8
 8002aca:	464b      	mov	r3, r9
 8002acc:	f7fd fbde 	bl	800028c <__adddf3>
 8002ad0:	4632      	mov	r2, r6
 8002ad2:	463b      	mov	r3, r7
 8002ad4:	f7fd fbda 	bl	800028c <__adddf3>
 8002ad8:	e9dd bc08 	ldrd	fp, ip, [sp, #32]
 8002adc:	4632      	mov	r2, r6
 8002ade:	463b      	mov	r3, r7
 8002ae0:	4658      	mov	r0, fp
 8002ae2:	460d      	mov	r5, r1
 8002ae4:	f7fd fbd0 	bl	8000288 <__aeabi_dsub>
 8002ae8:	4642      	mov	r2, r8
 8002aea:	464b      	mov	r3, r9
 8002aec:	f7fd fbcc 	bl	8000288 <__aeabi_dsub>
 8002af0:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8002af4:	f7fd fbc8 	bl	8000288 <__aeabi_dsub>
 8002af8:	465c      	mov	r4, fp
 8002afa:	4602      	mov	r2, r0
 8002afc:	e036      	b.n	8002b6c <__ieee754_pow+0x79c>
 8002afe:	bf00      	nop
 8002b00:	4a454eef 	.word	0x4a454eef
 8002b04:	3fca7e28 	.word	0x3fca7e28
 8002b08:	93c9db65 	.word	0x93c9db65
 8002b0c:	3fcd864a 	.word	0x3fcd864a
 8002b10:	a91d4101 	.word	0xa91d4101
 8002b14:	3fd17460 	.word	0x3fd17460
 8002b18:	518f264d 	.word	0x518f264d
 8002b1c:	3fd55555 	.word	0x3fd55555
 8002b20:	db6fabff 	.word	0xdb6fabff
 8002b24:	3fdb6db6 	.word	0x3fdb6db6
 8002b28:	33333303 	.word	0x33333303
 8002b2c:	3fe33333 	.word	0x3fe33333
 8002b30:	e0000000 	.word	0xe0000000
 8002b34:	3feec709 	.word	0x3feec709
 8002b38:	dc3a03fd 	.word	0xdc3a03fd
 8002b3c:	3feec709 	.word	0x3feec709
 8002b40:	145b01f5 	.word	0x145b01f5
 8002b44:	be3e2fe0 	.word	0xbe3e2fe0
 8002b48:	7ff00000 	.word	0x7ff00000
 8002b4c:	43400000 	.word	0x43400000
 8002b50:	0003988e 	.word	0x0003988e
 8002b54:	000bb679 	.word	0x000bb679
 8002b58:	08003288 	.word	0x08003288
 8002b5c:	3ff00000 	.word	0x3ff00000
 8002b60:	40080000 	.word	0x40080000
 8002b64:	08003268 	.word	0x08003268
 8002b68:	08003278 	.word	0x08003278
 8002b6c:	460b      	mov	r3, r1
 8002b6e:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8002b72:	e5d7      	b.n	8002724 <__ieee754_pow+0x354>
 8002b74:	f04f 0a01 	mov.w	sl, #1
 8002b78:	e65e      	b.n	8002838 <__ieee754_pow+0x468>
 8002b7a:	a3b4      	add	r3, pc, #720	@ (adr r3, 8002e4c <__ieee754_pow+0xa7c>)
 8002b7c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002b80:	4630      	mov	r0, r6
 8002b82:	4639      	mov	r1, r7
 8002b84:	f7fd fb82 	bl	800028c <__adddf3>
 8002b88:	4642      	mov	r2, r8
 8002b8a:	e9cd 0100 	strd	r0, r1, [sp]
 8002b8e:	464b      	mov	r3, r9
 8002b90:	4620      	mov	r0, r4
 8002b92:	4629      	mov	r1, r5
 8002b94:	f7fd fb78 	bl	8000288 <__aeabi_dsub>
 8002b98:	4602      	mov	r2, r0
 8002b9a:	460b      	mov	r3, r1
 8002b9c:	e9dd 0100 	ldrd	r0, r1, [sp]
 8002ba0:	f7fd ffba 	bl	8000b18 <__aeabi_dcmpgt>
 8002ba4:	2800      	cmp	r0, #0
 8002ba6:	f47f ae00 	bne.w	80027aa <__ieee754_pow+0x3da>
 8002baa:	ea4f 5a2a 	mov.w	sl, sl, asr #20
 8002bae:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 8002bb2:	f2aa 3afe 	subw	sl, sl, #1022	@ 0x3fe
 8002bb6:	fa43 fa0a 	asr.w	sl, r3, sl
 8002bba:	44da      	add	sl, fp
 8002bbc:	f3ca 510a 	ubfx	r1, sl, #20, #11
 8002bc0:	489d      	ldr	r0, [pc, #628]	@ (8002e38 <__ieee754_pow+0xa68>)
 8002bc2:	f2a1 31ff 	subw	r1, r1, #1023	@ 0x3ff
 8002bc6:	4108      	asrs	r0, r1
 8002bc8:	ea00 030a 	and.w	r3, r0, sl
 8002bcc:	f3ca 0a13 	ubfx	sl, sl, #0, #20
 8002bd0:	f1c1 0114 	rsb	r1, r1, #20
 8002bd4:	f44a 1a80 	orr.w	sl, sl, #1048576	@ 0x100000
 8002bd8:	fa4a fa01 	asr.w	sl, sl, r1
 8002bdc:	f1bb 0f00 	cmp.w	fp, #0
 8002be0:	4640      	mov	r0, r8
 8002be2:	4649      	mov	r1, r9
 8002be4:	f04f 0200 	mov.w	r2, #0
 8002be8:	bfb8      	it	lt
 8002bea:	f1ca 0a00 	rsblt	sl, sl, #0
 8002bee:	f7fd fb4b 	bl	8000288 <__aeabi_dsub>
 8002bf2:	4680      	mov	r8, r0
 8002bf4:	4689      	mov	r9, r1
 8002bf6:	4632      	mov	r2, r6
 8002bf8:	463b      	mov	r3, r7
 8002bfa:	4640      	mov	r0, r8
 8002bfc:	4649      	mov	r1, r9
 8002bfe:	f7fd fb45 	bl	800028c <__adddf3>
 8002c02:	2400      	movs	r4, #0
 8002c04:	a37c      	add	r3, pc, #496	@ (adr r3, 8002df8 <__ieee754_pow+0xa28>)
 8002c06:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002c0a:	4620      	mov	r0, r4
 8002c0c:	460d      	mov	r5, r1
 8002c0e:	f7fd fcf3 	bl	80005f8 <__aeabi_dmul>
 8002c12:	4642      	mov	r2, r8
 8002c14:	e9cd 0100 	strd	r0, r1, [sp]
 8002c18:	464b      	mov	r3, r9
 8002c1a:	4620      	mov	r0, r4
 8002c1c:	4629      	mov	r1, r5
 8002c1e:	f7fd fb33 	bl	8000288 <__aeabi_dsub>
 8002c22:	4602      	mov	r2, r0
 8002c24:	460b      	mov	r3, r1
 8002c26:	4630      	mov	r0, r6
 8002c28:	4639      	mov	r1, r7
 8002c2a:	f7fd fb2d 	bl	8000288 <__aeabi_dsub>
 8002c2e:	a374      	add	r3, pc, #464	@ (adr r3, 8002e00 <__ieee754_pow+0xa30>)
 8002c30:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002c34:	f7fd fce0 	bl	80005f8 <__aeabi_dmul>
 8002c38:	a373      	add	r3, pc, #460	@ (adr r3, 8002e08 <__ieee754_pow+0xa38>)
 8002c3a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002c3e:	4680      	mov	r8, r0
 8002c40:	4689      	mov	r9, r1
 8002c42:	4620      	mov	r0, r4
 8002c44:	4629      	mov	r1, r5
 8002c46:	f7fd fcd7 	bl	80005f8 <__aeabi_dmul>
 8002c4a:	4602      	mov	r2, r0
 8002c4c:	460b      	mov	r3, r1
 8002c4e:	4640      	mov	r0, r8
 8002c50:	4649      	mov	r1, r9
 8002c52:	f7fd fb1b 	bl	800028c <__adddf3>
 8002c56:	4604      	mov	r4, r0
 8002c58:	460d      	mov	r5, r1
 8002c5a:	4602      	mov	r2, r0
 8002c5c:	460b      	mov	r3, r1
 8002c5e:	e9dd 0100 	ldrd	r0, r1, [sp]
 8002c62:	f7fd fb13 	bl	800028c <__adddf3>
 8002c66:	e9dd 2300 	ldrd	r2, r3, [sp]
 8002c6a:	4680      	mov	r8, r0
 8002c6c:	4689      	mov	r9, r1
 8002c6e:	f7fd fb0b 	bl	8000288 <__aeabi_dsub>
 8002c72:	4602      	mov	r2, r0
 8002c74:	460b      	mov	r3, r1
 8002c76:	4620      	mov	r0, r4
 8002c78:	4629      	mov	r1, r5
 8002c7a:	f7fd fb05 	bl	8000288 <__aeabi_dsub>
 8002c7e:	4642      	mov	r2, r8
 8002c80:	4606      	mov	r6, r0
 8002c82:	460f      	mov	r7, r1
 8002c84:	464b      	mov	r3, r9
 8002c86:	4640      	mov	r0, r8
 8002c88:	4649      	mov	r1, r9
 8002c8a:	f7fd fcb5 	bl	80005f8 <__aeabi_dmul>
 8002c8e:	a360      	add	r3, pc, #384	@ (adr r3, 8002e10 <__ieee754_pow+0xa40>)
 8002c90:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002c94:	4604      	mov	r4, r0
 8002c96:	460d      	mov	r5, r1
 8002c98:	f7fd fcae 	bl	80005f8 <__aeabi_dmul>
 8002c9c:	a35e      	add	r3, pc, #376	@ (adr r3, 8002e18 <__ieee754_pow+0xa48>)
 8002c9e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002ca2:	f7fd faf1 	bl	8000288 <__aeabi_dsub>
 8002ca6:	4622      	mov	r2, r4
 8002ca8:	462b      	mov	r3, r5
 8002caa:	f7fd fca5 	bl	80005f8 <__aeabi_dmul>
 8002cae:	a35c      	add	r3, pc, #368	@ (adr r3, 8002e20 <__ieee754_pow+0xa50>)
 8002cb0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002cb4:	f7fd faea 	bl	800028c <__adddf3>
 8002cb8:	4622      	mov	r2, r4
 8002cba:	462b      	mov	r3, r5
 8002cbc:	f7fd fc9c 	bl	80005f8 <__aeabi_dmul>
 8002cc0:	a359      	add	r3, pc, #356	@ (adr r3, 8002e28 <__ieee754_pow+0xa58>)
 8002cc2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002cc6:	f7fd fadf 	bl	8000288 <__aeabi_dsub>
 8002cca:	4622      	mov	r2, r4
 8002ccc:	462b      	mov	r3, r5
 8002cce:	f7fd fc93 	bl	80005f8 <__aeabi_dmul>
 8002cd2:	a357      	add	r3, pc, #348	@ (adr r3, 8002e30 <__ieee754_pow+0xa60>)
 8002cd4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002cd8:	f7fd fad8 	bl	800028c <__adddf3>
 8002cdc:	4622      	mov	r2, r4
 8002cde:	462b      	mov	r3, r5
 8002ce0:	f7fd fc8a 	bl	80005f8 <__aeabi_dmul>
 8002ce4:	4602      	mov	r2, r0
 8002ce6:	460b      	mov	r3, r1
 8002ce8:	4640      	mov	r0, r8
 8002cea:	4649      	mov	r1, r9
 8002cec:	f7fd facc 	bl	8000288 <__aeabi_dsub>
 8002cf0:	4604      	mov	r4, r0
 8002cf2:	460d      	mov	r5, r1
 8002cf4:	4602      	mov	r2, r0
 8002cf6:	460b      	mov	r3, r1
 8002cf8:	4640      	mov	r0, r8
 8002cfa:	4649      	mov	r1, r9
 8002cfc:	f7fd fc7c 	bl	80005f8 <__aeabi_dmul>
 8002d00:	2200      	movs	r2, #0
 8002d02:	e9cd 0100 	strd	r0, r1, [sp]
 8002d06:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8002d0a:	4620      	mov	r0, r4
 8002d0c:	4629      	mov	r1, r5
 8002d0e:	f7fd fabb 	bl	8000288 <__aeabi_dsub>
 8002d12:	4602      	mov	r2, r0
 8002d14:	460b      	mov	r3, r1
 8002d16:	e9dd 0100 	ldrd	r0, r1, [sp]
 8002d1a:	f7fd fd97 	bl	800084c <__aeabi_ddiv>
 8002d1e:	4632      	mov	r2, r6
 8002d20:	4604      	mov	r4, r0
 8002d22:	460d      	mov	r5, r1
 8002d24:	463b      	mov	r3, r7
 8002d26:	4640      	mov	r0, r8
 8002d28:	4649      	mov	r1, r9
 8002d2a:	f7fd fc65 	bl	80005f8 <__aeabi_dmul>
 8002d2e:	4632      	mov	r2, r6
 8002d30:	463b      	mov	r3, r7
 8002d32:	f7fd faab 	bl	800028c <__adddf3>
 8002d36:	4602      	mov	r2, r0
 8002d38:	460b      	mov	r3, r1
 8002d3a:	4620      	mov	r0, r4
 8002d3c:	4629      	mov	r1, r5
 8002d3e:	f7fd faa3 	bl	8000288 <__aeabi_dsub>
 8002d42:	4642      	mov	r2, r8
 8002d44:	464b      	mov	r3, r9
 8002d46:	f7fd fa9f 	bl	8000288 <__aeabi_dsub>
 8002d4a:	460b      	mov	r3, r1
 8002d4c:	4602      	mov	r2, r0
 8002d4e:	493b      	ldr	r1, [pc, #236]	@ (8002e3c <__ieee754_pow+0xa6c>)
 8002d50:	2000      	movs	r0, #0
 8002d52:	f7fd fa99 	bl	8000288 <__aeabi_dsub>
 8002d56:	ec41 0b10 	vmov	d0, r0, r1
 8002d5a:	ee10 3a90 	vmov	r3, s1
 8002d5e:	eb03 530a 	add.w	r3, r3, sl, lsl #20
 8002d62:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8002d66:	da30      	bge.n	8002dca <__ieee754_pow+0x9fa>
 8002d68:	4650      	mov	r0, sl
 8002d6a:	f000 f87d 	bl	8002e68 <scalbn>
 8002d6e:	ec51 0b10 	vmov	r0, r1, d0
 8002d72:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8002d76:	f7ff bbd2 	b.w	800251e <__ieee754_pow+0x14e>
 8002d7a:	4c31      	ldr	r4, [pc, #196]	@ (8002e40 <__ieee754_pow+0xa70>)
 8002d7c:	f021 4300 	bic.w	r3, r1, #2147483648	@ 0x80000000
 8002d80:	42a3      	cmp	r3, r4
 8002d82:	d91a      	bls.n	8002dba <__ieee754_pow+0x9ea>
 8002d84:	4b2f      	ldr	r3, [pc, #188]	@ (8002e44 <__ieee754_pow+0xa74>)
 8002d86:	440b      	add	r3, r1
 8002d88:	4303      	orrs	r3, r0
 8002d8a:	d009      	beq.n	8002da0 <__ieee754_pow+0x9d0>
 8002d8c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8002d90:	2200      	movs	r2, #0
 8002d92:	2300      	movs	r3, #0
 8002d94:	f7fd fea2 	bl	8000adc <__aeabi_dcmplt>
 8002d98:	3800      	subs	r0, #0
 8002d9a:	bf18      	it	ne
 8002d9c:	2001      	movne	r0, #1
 8002d9e:	e42b      	b.n	80025f8 <__ieee754_pow+0x228>
 8002da0:	4642      	mov	r2, r8
 8002da2:	464b      	mov	r3, r9
 8002da4:	f7fd fa70 	bl	8000288 <__aeabi_dsub>
 8002da8:	4632      	mov	r2, r6
 8002daa:	463b      	mov	r3, r7
 8002dac:	f7fd feaa 	bl	8000b04 <__aeabi_dcmpge>
 8002db0:	2800      	cmp	r0, #0
 8002db2:	d1eb      	bne.n	8002d8c <__ieee754_pow+0x9bc>
 8002db4:	f8df a09c 	ldr.w	sl, [pc, #156]	@ 8002e54 <__ieee754_pow+0xa84>
 8002db8:	e6f7      	b.n	8002baa <__ieee754_pow+0x7da>
 8002dba:	469a      	mov	sl, r3
 8002dbc:	4b22      	ldr	r3, [pc, #136]	@ (8002e48 <__ieee754_pow+0xa78>)
 8002dbe:	459a      	cmp	sl, r3
 8002dc0:	f63f aef3 	bhi.w	8002baa <__ieee754_pow+0x7da>
 8002dc4:	f8dd a010 	ldr.w	sl, [sp, #16]
 8002dc8:	e715      	b.n	8002bf6 <__ieee754_pow+0x826>
 8002dca:	ec51 0b10 	vmov	r0, r1, d0
 8002dce:	4619      	mov	r1, r3
 8002dd0:	e7cf      	b.n	8002d72 <__ieee754_pow+0x9a2>
 8002dd2:	491a      	ldr	r1, [pc, #104]	@ (8002e3c <__ieee754_pow+0xa6c>)
 8002dd4:	2000      	movs	r0, #0
 8002dd6:	f7ff bb18 	b.w	800240a <__ieee754_pow+0x3a>
 8002dda:	2000      	movs	r0, #0
 8002ddc:	2100      	movs	r1, #0
 8002dde:	f7ff bb14 	b.w	800240a <__ieee754_pow+0x3a>
 8002de2:	4630      	mov	r0, r6
 8002de4:	4639      	mov	r1, r7
 8002de6:	f7ff bb10 	b.w	800240a <__ieee754_pow+0x3a>
 8002dea:	460c      	mov	r4, r1
 8002dec:	f7ff bb5e 	b.w	80024ac <__ieee754_pow+0xdc>
 8002df0:	2400      	movs	r4, #0
 8002df2:	f7ff bb49 	b.w	8002488 <__ieee754_pow+0xb8>
 8002df6:	bf00      	nop
 8002df8:	00000000 	.word	0x00000000
 8002dfc:	3fe62e43 	.word	0x3fe62e43
 8002e00:	fefa39ef 	.word	0xfefa39ef
 8002e04:	3fe62e42 	.word	0x3fe62e42
 8002e08:	0ca86c39 	.word	0x0ca86c39
 8002e0c:	be205c61 	.word	0xbe205c61
 8002e10:	72bea4d0 	.word	0x72bea4d0
 8002e14:	3e663769 	.word	0x3e663769
 8002e18:	c5d26bf1 	.word	0xc5d26bf1
 8002e1c:	3ebbbd41 	.word	0x3ebbbd41
 8002e20:	af25de2c 	.word	0xaf25de2c
 8002e24:	3f11566a 	.word	0x3f11566a
 8002e28:	16bebd93 	.word	0x16bebd93
 8002e2c:	3f66c16c 	.word	0x3f66c16c
 8002e30:	5555553e 	.word	0x5555553e
 8002e34:	3fc55555 	.word	0x3fc55555
 8002e38:	fff00000 	.word	0xfff00000
 8002e3c:	3ff00000 	.word	0x3ff00000
 8002e40:	4090cbff 	.word	0x4090cbff
 8002e44:	3f6f3400 	.word	0x3f6f3400
 8002e48:	3fe00000 	.word	0x3fe00000
 8002e4c:	652b82fe 	.word	0x652b82fe
 8002e50:	3c971547 	.word	0x3c971547
 8002e54:	4090cc00 	.word	0x4090cc00

08002e58 <fabs>:
 8002e58:	ec51 0b10 	vmov	r0, r1, d0
 8002e5c:	4602      	mov	r2, r0
 8002e5e:	f021 4300 	bic.w	r3, r1, #2147483648	@ 0x80000000
 8002e62:	ec43 2b10 	vmov	d0, r2, r3
 8002e66:	4770      	bx	lr

08002e68 <scalbn>:
 8002e68:	b570      	push	{r4, r5, r6, lr}
 8002e6a:	ec55 4b10 	vmov	r4, r5, d0
 8002e6e:	f3c5 510a 	ubfx	r1, r5, #20, #11
 8002e72:	4606      	mov	r6, r0
 8002e74:	462b      	mov	r3, r5
 8002e76:	b991      	cbnz	r1, 8002e9e <scalbn+0x36>
 8002e78:	f025 4300 	bic.w	r3, r5, #2147483648	@ 0x80000000
 8002e7c:	4323      	orrs	r3, r4
 8002e7e:	d03d      	beq.n	8002efc <scalbn+0x94>
 8002e80:	4b35      	ldr	r3, [pc, #212]	@ (8002f58 <scalbn+0xf0>)
 8002e82:	4620      	mov	r0, r4
 8002e84:	4629      	mov	r1, r5
 8002e86:	2200      	movs	r2, #0
 8002e88:	f7fd fbb6 	bl	80005f8 <__aeabi_dmul>
 8002e8c:	4b33      	ldr	r3, [pc, #204]	@ (8002f5c <scalbn+0xf4>)
 8002e8e:	429e      	cmp	r6, r3
 8002e90:	4604      	mov	r4, r0
 8002e92:	460d      	mov	r5, r1
 8002e94:	da0f      	bge.n	8002eb6 <scalbn+0x4e>
 8002e96:	a328      	add	r3, pc, #160	@ (adr r3, 8002f38 <scalbn+0xd0>)
 8002e98:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002e9c:	e01e      	b.n	8002edc <scalbn+0x74>
 8002e9e:	f240 72ff 	movw	r2, #2047	@ 0x7ff
 8002ea2:	4291      	cmp	r1, r2
 8002ea4:	d10b      	bne.n	8002ebe <scalbn+0x56>
 8002ea6:	4622      	mov	r2, r4
 8002ea8:	4620      	mov	r0, r4
 8002eaa:	4629      	mov	r1, r5
 8002eac:	f7fd f9ee 	bl	800028c <__adddf3>
 8002eb0:	4604      	mov	r4, r0
 8002eb2:	460d      	mov	r5, r1
 8002eb4:	e022      	b.n	8002efc <scalbn+0x94>
 8002eb6:	460b      	mov	r3, r1
 8002eb8:	f3c1 510a 	ubfx	r1, r1, #20, #11
 8002ebc:	3936      	subs	r1, #54	@ 0x36
 8002ebe:	f24c 3250 	movw	r2, #50000	@ 0xc350
 8002ec2:	4296      	cmp	r6, r2
 8002ec4:	dd0d      	ble.n	8002ee2 <scalbn+0x7a>
 8002ec6:	2d00      	cmp	r5, #0
 8002ec8:	a11d      	add	r1, pc, #116	@ (adr r1, 8002f40 <scalbn+0xd8>)
 8002eca:	e9d1 0100 	ldrd	r0, r1, [r1]
 8002ece:	da02      	bge.n	8002ed6 <scalbn+0x6e>
 8002ed0:	a11d      	add	r1, pc, #116	@ (adr r1, 8002f48 <scalbn+0xe0>)
 8002ed2:	e9d1 0100 	ldrd	r0, r1, [r1]
 8002ed6:	a31a      	add	r3, pc, #104	@ (adr r3, 8002f40 <scalbn+0xd8>)
 8002ed8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002edc:	f7fd fb8c 	bl	80005f8 <__aeabi_dmul>
 8002ee0:	e7e6      	b.n	8002eb0 <scalbn+0x48>
 8002ee2:	1872      	adds	r2, r6, r1
 8002ee4:	f240 71fe 	movw	r1, #2046	@ 0x7fe
 8002ee8:	428a      	cmp	r2, r1
 8002eea:	dcec      	bgt.n	8002ec6 <scalbn+0x5e>
 8002eec:	2a00      	cmp	r2, #0
 8002eee:	dd08      	ble.n	8002f02 <scalbn+0x9a>
 8002ef0:	f023 43ff 	bic.w	r3, r3, #2139095040	@ 0x7f800000
 8002ef4:	f423 03e0 	bic.w	r3, r3, #7340032	@ 0x700000
 8002ef8:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 8002efc:	ec45 4b10 	vmov	d0, r4, r5
 8002f00:	bd70      	pop	{r4, r5, r6, pc}
 8002f02:	f112 0f35 	cmn.w	r2, #53	@ 0x35
 8002f06:	da08      	bge.n	8002f1a <scalbn+0xb2>
 8002f08:	2d00      	cmp	r5, #0
 8002f0a:	a10b      	add	r1, pc, #44	@ (adr r1, 8002f38 <scalbn+0xd0>)
 8002f0c:	e9d1 0100 	ldrd	r0, r1, [r1]
 8002f10:	dac1      	bge.n	8002e96 <scalbn+0x2e>
 8002f12:	a10f      	add	r1, pc, #60	@ (adr r1, 8002f50 <scalbn+0xe8>)
 8002f14:	e9d1 0100 	ldrd	r0, r1, [r1]
 8002f18:	e7bd      	b.n	8002e96 <scalbn+0x2e>
 8002f1a:	f023 43ff 	bic.w	r3, r3, #2139095040	@ 0x7f800000
 8002f1e:	3236      	adds	r2, #54	@ 0x36
 8002f20:	f423 03e0 	bic.w	r3, r3, #7340032	@ 0x700000
 8002f24:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 8002f28:	4620      	mov	r0, r4
 8002f2a:	4b0d      	ldr	r3, [pc, #52]	@ (8002f60 <scalbn+0xf8>)
 8002f2c:	4629      	mov	r1, r5
 8002f2e:	2200      	movs	r2, #0
 8002f30:	e7d4      	b.n	8002edc <scalbn+0x74>
 8002f32:	bf00      	nop
 8002f34:	f3af 8000 	nop.w
 8002f38:	c2f8f359 	.word	0xc2f8f359
 8002f3c:	01a56e1f 	.word	0x01a56e1f
 8002f40:	8800759c 	.word	0x8800759c
 8002f44:	7e37e43c 	.word	0x7e37e43c
 8002f48:	8800759c 	.word	0x8800759c
 8002f4c:	fe37e43c 	.word	0xfe37e43c
 8002f50:	c2f8f359 	.word	0xc2f8f359
 8002f54:	81a56e1f 	.word	0x81a56e1f
 8002f58:	43500000 	.word	0x43500000
 8002f5c:	ffff3cb0 	.word	0xffff3cb0
 8002f60:	3c900000 	.word	0x3c900000

08002f64 <with_errno>:
 8002f64:	b510      	push	{r4, lr}
 8002f66:	ed2d 8b02 	vpush	{d8}
 8002f6a:	eeb0 8a40 	vmov.f32	s16, s0
 8002f6e:	eef0 8a60 	vmov.f32	s17, s1
 8002f72:	4604      	mov	r4, r0
 8002f74:	f7fe fd36 	bl	80019e4 <__errno>
 8002f78:	eeb0 0a48 	vmov.f32	s0, s16
 8002f7c:	eef0 0a68 	vmov.f32	s1, s17
 8002f80:	ecbd 8b02 	vpop	{d8}
 8002f84:	6004      	str	r4, [r0, #0]
 8002f86:	bd10      	pop	{r4, pc}

08002f88 <xflow>:
 8002f88:	4603      	mov	r3, r0
 8002f8a:	b507      	push	{r0, r1, r2, lr}
 8002f8c:	ec51 0b10 	vmov	r0, r1, d0
 8002f90:	b183      	cbz	r3, 8002fb4 <xflow+0x2c>
 8002f92:	4602      	mov	r2, r0
 8002f94:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 8002f98:	e9cd 2300 	strd	r2, r3, [sp]
 8002f9c:	e9dd 2300 	ldrd	r2, r3, [sp]
 8002fa0:	f7fd fb2a 	bl	80005f8 <__aeabi_dmul>
 8002fa4:	ec41 0b10 	vmov	d0, r0, r1
 8002fa8:	2022      	movs	r0, #34	@ 0x22
 8002faa:	b003      	add	sp, #12
 8002fac:	f85d eb04 	ldr.w	lr, [sp], #4
 8002fb0:	f7ff bfd8 	b.w	8002f64 <with_errno>
 8002fb4:	4602      	mov	r2, r0
 8002fb6:	460b      	mov	r3, r1
 8002fb8:	e7ee      	b.n	8002f98 <xflow+0x10>
 8002fba:	0000      	movs	r0, r0
 8002fbc:	0000      	movs	r0, r0
	...

08002fc0 <__math_uflow>:
 8002fc0:	ed9f 0b01 	vldr	d0, [pc, #4]	@ 8002fc8 <__math_uflow+0x8>
 8002fc4:	f7ff bfe0 	b.w	8002f88 <xflow>
 8002fc8:	00000000 	.word	0x00000000
 8002fcc:	10000000 	.word	0x10000000

08002fd0 <__math_oflow>:
 8002fd0:	ed9f 0b01 	vldr	d0, [pc, #4]	@ 8002fd8 <__math_oflow+0x8>
 8002fd4:	f7ff bfd8 	b.w	8002f88 <xflow>
 8002fd8:	00000000 	.word	0x00000000
 8002fdc:	70000000 	.word	0x70000000

08002fe0 <__ieee754_sqrt>:
 8002fe0:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002fe4:	4a68      	ldr	r2, [pc, #416]	@ (8003188 <__ieee754_sqrt+0x1a8>)
 8002fe6:	ec55 4b10 	vmov	r4, r5, d0
 8002fea:	43aa      	bics	r2, r5
 8002fec:	462b      	mov	r3, r5
 8002fee:	4621      	mov	r1, r4
 8002ff0:	d110      	bne.n	8003014 <__ieee754_sqrt+0x34>
 8002ff2:	4622      	mov	r2, r4
 8002ff4:	4620      	mov	r0, r4
 8002ff6:	4629      	mov	r1, r5
 8002ff8:	f7fd fafe 	bl	80005f8 <__aeabi_dmul>
 8002ffc:	4602      	mov	r2, r0
 8002ffe:	460b      	mov	r3, r1
 8003000:	4620      	mov	r0, r4
 8003002:	4629      	mov	r1, r5
 8003004:	f7fd f942 	bl	800028c <__adddf3>
 8003008:	4604      	mov	r4, r0
 800300a:	460d      	mov	r5, r1
 800300c:	ec45 4b10 	vmov	d0, r4, r5
 8003010:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003014:	2d00      	cmp	r5, #0
 8003016:	dc0e      	bgt.n	8003036 <__ieee754_sqrt+0x56>
 8003018:	f025 4200 	bic.w	r2, r5, #2147483648	@ 0x80000000
 800301c:	4322      	orrs	r2, r4
 800301e:	d0f5      	beq.n	800300c <__ieee754_sqrt+0x2c>
 8003020:	b19d      	cbz	r5, 800304a <__ieee754_sqrt+0x6a>
 8003022:	4622      	mov	r2, r4
 8003024:	4620      	mov	r0, r4
 8003026:	4629      	mov	r1, r5
 8003028:	f7fd f92e 	bl	8000288 <__aeabi_dsub>
 800302c:	4602      	mov	r2, r0
 800302e:	460b      	mov	r3, r1
 8003030:	f7fd fc0c 	bl	800084c <__aeabi_ddiv>
 8003034:	e7e8      	b.n	8003008 <__ieee754_sqrt+0x28>
 8003036:	152a      	asrs	r2, r5, #20
 8003038:	d115      	bne.n	8003066 <__ieee754_sqrt+0x86>
 800303a:	2000      	movs	r0, #0
 800303c:	e009      	b.n	8003052 <__ieee754_sqrt+0x72>
 800303e:	0acb      	lsrs	r3, r1, #11
 8003040:	3a15      	subs	r2, #21
 8003042:	0549      	lsls	r1, r1, #21
 8003044:	2b00      	cmp	r3, #0
 8003046:	d0fa      	beq.n	800303e <__ieee754_sqrt+0x5e>
 8003048:	e7f7      	b.n	800303a <__ieee754_sqrt+0x5a>
 800304a:	462a      	mov	r2, r5
 800304c:	e7fa      	b.n	8003044 <__ieee754_sqrt+0x64>
 800304e:	005b      	lsls	r3, r3, #1
 8003050:	3001      	adds	r0, #1
 8003052:	02dc      	lsls	r4, r3, #11
 8003054:	d5fb      	bpl.n	800304e <__ieee754_sqrt+0x6e>
 8003056:	1e44      	subs	r4, r0, #1
 8003058:	1b12      	subs	r2, r2, r4
 800305a:	f1c0 0420 	rsb	r4, r0, #32
 800305e:	fa21 f404 	lsr.w	r4, r1, r4
 8003062:	4323      	orrs	r3, r4
 8003064:	4081      	lsls	r1, r0
 8003066:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800306a:	f2a2 35ff 	subw	r5, r2, #1023	@ 0x3ff
 800306e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8003072:	07d2      	lsls	r2, r2, #31
 8003074:	bf5c      	itt	pl
 8003076:	005b      	lslpl	r3, r3, #1
 8003078:	eb03 73d1 	addpl.w	r3, r3, r1, lsr #31
 800307c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8003080:	bf58      	it	pl
 8003082:	0049      	lslpl	r1, r1, #1
 8003084:	2600      	movs	r6, #0
 8003086:	eb03 73d1 	add.w	r3, r3, r1, lsr #31
 800308a:	106d      	asrs	r5, r5, #1
 800308c:	0049      	lsls	r1, r1, #1
 800308e:	2016      	movs	r0, #22
 8003090:	4632      	mov	r2, r6
 8003092:	f44f 1400 	mov.w	r4, #2097152	@ 0x200000
 8003096:	1917      	adds	r7, r2, r4
 8003098:	429f      	cmp	r7, r3
 800309a:	bfde      	ittt	le
 800309c:	193a      	addle	r2, r7, r4
 800309e:	1bdb      	suble	r3, r3, r7
 80030a0:	1936      	addle	r6, r6, r4
 80030a2:	0fcf      	lsrs	r7, r1, #31
 80030a4:	3801      	subs	r0, #1
 80030a6:	eb07 0343 	add.w	r3, r7, r3, lsl #1
 80030aa:	ea4f 0141 	mov.w	r1, r1, lsl #1
 80030ae:	ea4f 0454 	mov.w	r4, r4, lsr #1
 80030b2:	d1f0      	bne.n	8003096 <__ieee754_sqrt+0xb6>
 80030b4:	4604      	mov	r4, r0
 80030b6:	2720      	movs	r7, #32
 80030b8:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 80030bc:	429a      	cmp	r2, r3
 80030be:	eb00 0e0c 	add.w	lr, r0, ip
 80030c2:	db02      	blt.n	80030ca <__ieee754_sqrt+0xea>
 80030c4:	d113      	bne.n	80030ee <__ieee754_sqrt+0x10e>
 80030c6:	458e      	cmp	lr, r1
 80030c8:	d811      	bhi.n	80030ee <__ieee754_sqrt+0x10e>
 80030ca:	f1be 0f00 	cmp.w	lr, #0
 80030ce:	eb0e 000c 	add.w	r0, lr, ip
 80030d2:	da42      	bge.n	800315a <__ieee754_sqrt+0x17a>
 80030d4:	2800      	cmp	r0, #0
 80030d6:	db40      	blt.n	800315a <__ieee754_sqrt+0x17a>
 80030d8:	f102 0801 	add.w	r8, r2, #1
 80030dc:	1a9b      	subs	r3, r3, r2
 80030de:	458e      	cmp	lr, r1
 80030e0:	bf88      	it	hi
 80030e2:	f103 33ff 	addhi.w	r3, r3, #4294967295
 80030e6:	eba1 010e 	sub.w	r1, r1, lr
 80030ea:	4464      	add	r4, ip
 80030ec:	4642      	mov	r2, r8
 80030ee:	ea4f 7ed1 	mov.w	lr, r1, lsr #31
 80030f2:	3f01      	subs	r7, #1
 80030f4:	eb0e 0343 	add.w	r3, lr, r3, lsl #1
 80030f8:	ea4f 0141 	mov.w	r1, r1, lsl #1
 80030fc:	ea4f 0c5c 	mov.w	ip, ip, lsr #1
 8003100:	d1dc      	bne.n	80030bc <__ieee754_sqrt+0xdc>
 8003102:	4319      	orrs	r1, r3
 8003104:	d01b      	beq.n	800313e <__ieee754_sqrt+0x15e>
 8003106:	f8df a084 	ldr.w	sl, [pc, #132]	@ 800318c <__ieee754_sqrt+0x1ac>
 800310a:	f8df b084 	ldr.w	fp, [pc, #132]	@ 8003190 <__ieee754_sqrt+0x1b0>
 800310e:	e9da 0100 	ldrd	r0, r1, [sl]
 8003112:	e9db 2300 	ldrd	r2, r3, [fp]
 8003116:	f7fd f8b7 	bl	8000288 <__aeabi_dsub>
 800311a:	e9da 8900 	ldrd	r8, r9, [sl]
 800311e:	4602      	mov	r2, r0
 8003120:	460b      	mov	r3, r1
 8003122:	4640      	mov	r0, r8
 8003124:	4649      	mov	r1, r9
 8003126:	f7fd fce3 	bl	8000af0 <__aeabi_dcmple>
 800312a:	b140      	cbz	r0, 800313e <__ieee754_sqrt+0x15e>
 800312c:	f1b4 3fff 	cmp.w	r4, #4294967295
 8003130:	e9da 0100 	ldrd	r0, r1, [sl]
 8003134:	e9db 2300 	ldrd	r2, r3, [fp]
 8003138:	d111      	bne.n	800315e <__ieee754_sqrt+0x17e>
 800313a:	3601      	adds	r6, #1
 800313c:	463c      	mov	r4, r7
 800313e:	1072      	asrs	r2, r6, #1
 8003140:	0863      	lsrs	r3, r4, #1
 8003142:	07f1      	lsls	r1, r6, #31
 8003144:	f102 527f 	add.w	r2, r2, #1069547520	@ 0x3fc00000
 8003148:	f502 1200 	add.w	r2, r2, #2097152	@ 0x200000
 800314c:	bf48      	it	mi
 800314e:	f043 4300 	orrmi.w	r3, r3, #2147483648	@ 0x80000000
 8003152:	eb02 5105 	add.w	r1, r2, r5, lsl #20
 8003156:	4618      	mov	r0, r3
 8003158:	e756      	b.n	8003008 <__ieee754_sqrt+0x28>
 800315a:	4690      	mov	r8, r2
 800315c:	e7be      	b.n	80030dc <__ieee754_sqrt+0xfc>
 800315e:	f7fd f895 	bl	800028c <__adddf3>
 8003162:	e9da 8900 	ldrd	r8, r9, [sl]
 8003166:	4602      	mov	r2, r0
 8003168:	460b      	mov	r3, r1
 800316a:	4640      	mov	r0, r8
 800316c:	4649      	mov	r1, r9
 800316e:	f7fd fcb5 	bl	8000adc <__aeabi_dcmplt>
 8003172:	b120      	cbz	r0, 800317e <__ieee754_sqrt+0x19e>
 8003174:	1ca0      	adds	r0, r4, #2
 8003176:	bf08      	it	eq
 8003178:	3601      	addeq	r6, #1
 800317a:	3402      	adds	r4, #2
 800317c:	e7df      	b.n	800313e <__ieee754_sqrt+0x15e>
 800317e:	1c63      	adds	r3, r4, #1
 8003180:	f023 0401 	bic.w	r4, r3, #1
 8003184:	e7db      	b.n	800313e <__ieee754_sqrt+0x15e>
 8003186:	bf00      	nop
 8003188:	7ff00000 	.word	0x7ff00000
 800318c:	20000070 	.word	0x20000070
 8003190:	20000068 	.word	0x20000068

08003194 <_init>:
 8003194:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003196:	bf00      	nop
 8003198:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800319a:	bc08      	pop	{r3}
 800319c:	469e      	mov	lr, r3
 800319e:	4770      	bx	lr

080031a0 <_fini>:
 80031a0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80031a2:	bf00      	nop
 80031a4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80031a6:	bc08      	pop	{r3}
 80031a8:	469e      	mov	lr, r3
 80031aa:	4770      	bx	lr
