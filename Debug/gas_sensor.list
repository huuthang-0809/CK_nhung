
gas_sensor.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003204  080001a0  080001a0  000011a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000138  080033a8  080033a8  000043a8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080034e0  080034e0  00005078  2**0
                  CONTENTS
  4 .ARM          00000008  080034e0  080034e0  000044e0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080034e8  080034e8  00005078  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080034e8  080034e8  000044e8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080034ec  080034ec  000044ec  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000078  20000000  080034f0  00005000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000174  20000078  08003568  00005078  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200001ec  08003568  000051ec  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00005078  2**0
                  CONTENTS, READONLY
 12 .debug_info   00003272  00000000  00000000  000050a8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00000dbe  00000000  00000000  0000831a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000330  00000000  00000000  000090d8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 0000023d  00000000  00000000  00009408  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00015711  00000000  00000000  00009645  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00004e85  00000000  00000000  0001ed56  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008535b  00000000  00000000  00023bdb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000a8f36  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000013d8  00000000  00000000  000a8f7c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000066  00000000  00000000  000aa354  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	@ (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	@ (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	@ (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000078 	.word	0x20000078
 80001bc:	00000000 	.word	0x00000000
 80001c0:	0800338c 	.word	0x0800338c

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	@ (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	@ (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	@ (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	2000007c 	.word	0x2000007c
 80001dc:	0800338c 	.word	0x0800338c

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	@ 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpun>:
 8000b2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x10>
 8000b36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b3a:	d10a      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x20>
 8000b46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b4a:	d102      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0001 	mov.w	r0, #1
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_d2f>:
 8000b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b5c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000b60:	bf24      	itt	cs
 8000b62:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000b66:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000b6a:	d90d      	bls.n	8000b88 <__aeabi_d2f+0x30>
 8000b6c:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000b70:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000b74:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000b78:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000b7c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000b80:	bf08      	it	eq
 8000b82:	f020 0001 	biceq.w	r0, r0, #1
 8000b86:	4770      	bx	lr
 8000b88:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000b8c:	d121      	bne.n	8000bd2 <__aeabi_d2f+0x7a>
 8000b8e:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000b92:	bfbc      	itt	lt
 8000b94:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000b98:	4770      	bxlt	lr
 8000b9a:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000b9e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000ba2:	f1c2 0218 	rsb	r2, r2, #24
 8000ba6:	f1c2 0c20 	rsb	ip, r2, #32
 8000baa:	fa10 f30c 	lsls.w	r3, r0, ip
 8000bae:	fa20 f002 	lsr.w	r0, r0, r2
 8000bb2:	bf18      	it	ne
 8000bb4:	f040 0001 	orrne.w	r0, r0, #1
 8000bb8:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bbc:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000bc0:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000bc4:	ea40 000c 	orr.w	r0, r0, ip
 8000bc8:	fa23 f302 	lsr.w	r3, r3, r2
 8000bcc:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000bd0:	e7cc      	b.n	8000b6c <__aeabi_d2f+0x14>
 8000bd2:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000bd6:	d107      	bne.n	8000be8 <__aeabi_d2f+0x90>
 8000bd8:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000bdc:	bf1e      	ittt	ne
 8000bde:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000be2:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000be6:	4770      	bxne	lr
 8000be8:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000bec:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000bf0:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000bf4:	4770      	bx	lr
 8000bf6:	bf00      	nop

08000bf8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000bf8:	b480      	push	{r7}
 8000bfa:	b083      	sub	sp, #12
 8000bfc:	af00      	add	r7, sp, #0
 8000bfe:	4603      	mov	r3, r0
 8000c00:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000c02:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c06:	2b00      	cmp	r3, #0
 8000c08:	db0b      	blt.n	8000c22 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000c0a:	79fb      	ldrb	r3, [r7, #7]
 8000c0c:	f003 021f 	and.w	r2, r3, #31
 8000c10:	4907      	ldr	r1, [pc, #28]	@ (8000c30 <__NVIC_EnableIRQ+0x38>)
 8000c12:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c16:	095b      	lsrs	r3, r3, #5
 8000c18:	2001      	movs	r0, #1
 8000c1a:	fa00 f202 	lsl.w	r2, r0, r2
 8000c1e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8000c22:	bf00      	nop
 8000c24:	370c      	adds	r7, #12
 8000c26:	46bd      	mov	sp, r7
 8000c28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c2c:	4770      	bx	lr
 8000c2e:	bf00      	nop
 8000c30:	e000e100 	.word	0xe000e100

08000c34 <TIM2_IRQHandler>:
#include "hardware.h"

static volatile uint8_t led_red_enable = 0;
const char* stateStrings[] = {"SAFE", "WARNING", "DANGER", "DANGER++"};

void TIM2_IRQHandler(void) {
 8000c34:	b480      	push	{r7}
 8000c36:	af00      	add	r7, sp, #0
    if (TIM2->SR & TIM_SR_UIF) {
 8000c38:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8000c3c:	691b      	ldr	r3, [r3, #16]
 8000c3e:	f003 0301 	and.w	r3, r3, #1
 8000c42:	2b00      	cmp	r3, #0
 8000c44:	d019      	beq.n	8000c7a <TIM2_IRQHandler+0x46>
        TIM2->SR &= ~TIM_SR_UIF; // Xóa cờ ngắt
 8000c46:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8000c4a:	691b      	ldr	r3, [r3, #16]
 8000c4c:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8000c50:	f023 0301 	bic.w	r3, r3, #1
 8000c54:	6113      	str	r3, [r2, #16]
        if (led_red_enable) {
 8000c56:	4b0b      	ldr	r3, [pc, #44]	@ (8000c84 <TIM2_IRQHandler+0x50>)
 8000c58:	781b      	ldrb	r3, [r3, #0]
 8000c5a:	b2db      	uxtb	r3, r3
 8000c5c:	2b00      	cmp	r3, #0
 8000c5e:	d006      	beq.n	8000c6e <TIM2_IRQHandler+0x3a>
            GPIOB->ODR ^= (1 << 1);  // Toggle LED đỏ
 8000c60:	4b09      	ldr	r3, [pc, #36]	@ (8000c88 <TIM2_IRQHandler+0x54>)
 8000c62:	695b      	ldr	r3, [r3, #20]
 8000c64:	4a08      	ldr	r2, [pc, #32]	@ (8000c88 <TIM2_IRQHandler+0x54>)
 8000c66:	f083 0302 	eor.w	r3, r3, #2
 8000c6a:	6153      	str	r3, [r2, #20]
        } else {
            GPIOB->ODR &= ~(1 << 1);
        }
    }
}
 8000c6c:	e005      	b.n	8000c7a <TIM2_IRQHandler+0x46>
            GPIOB->ODR &= ~(1 << 1);
 8000c6e:	4b06      	ldr	r3, [pc, #24]	@ (8000c88 <TIM2_IRQHandler+0x54>)
 8000c70:	695b      	ldr	r3, [r3, #20]
 8000c72:	4a05      	ldr	r2, [pc, #20]	@ (8000c88 <TIM2_IRQHandler+0x54>)
 8000c74:	f023 0302 	bic.w	r3, r3, #2
 8000c78:	6153      	str	r3, [r2, #20]
}
 8000c7a:	bf00      	nop
 8000c7c:	46bd      	mov	sp, r7
 8000c7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c82:	4770      	bx	lr
 8000c84:	20000094 	.word	0x20000094
 8000c88:	40020400 	.word	0x40020400

08000c8c <handleAlarm>:

void handleAlarm(float gas_ppm) {
 8000c8c:	b580      	push	{r7, lr}
 8000c8e:	b086      	sub	sp, #24
 8000c90:	af00      	add	r7, sp, #0
 8000c92:	ed87 0a01 	vstr	s0, [r7, #4]
    if (gas_ppm > THRESHOLD_DANGER) {
 8000c96:	edd7 7a01 	vldr	s15, [r7, #4]
 8000c9a:	ed9f 7a94 	vldr	s14, [pc, #592]	@ 8000eec <handleAlarm+0x260>
 8000c9e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8000ca2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000ca6:	dd62      	ble.n	8000d6e <handleAlarm+0xe2>
        GPIOB->ODR &= ~((1 << 2) | (1 << 3) | (1 << 4));
 8000ca8:	4b91      	ldr	r3, [pc, #580]	@ (8000ef0 <handleAlarm+0x264>)
 8000caa:	695b      	ldr	r3, [r3, #20]
 8000cac:	4a90      	ldr	r2, [pc, #576]	@ (8000ef0 <handleAlarm+0x264>)
 8000cae:	f023 031c 	bic.w	r3, r3, #28
 8000cb2:	6153      	str	r3, [r2, #20]
        GPIOA->ODR |= (1 << 1) | (1 << 5);
 8000cb4:	4b8f      	ldr	r3, [pc, #572]	@ (8000ef4 <handleAlarm+0x268>)
 8000cb6:	695b      	ldr	r3, [r3, #20]
 8000cb8:	4a8e      	ldr	r2, [pc, #568]	@ (8000ef4 <handleAlarm+0x268>)
 8000cba:	f043 0322 	orr.w	r3, r3, #34	@ 0x22
 8000cbe:	6153      	str	r3, [r2, #20]
        GPIOA->ODR |= (1 << 6);
 8000cc0:	4b8c      	ldr	r3, [pc, #560]	@ (8000ef4 <handleAlarm+0x268>)
 8000cc2:	695b      	ldr	r3, [r3, #20]
 8000cc4:	4a8b      	ldr	r2, [pc, #556]	@ (8000ef4 <handleAlarm+0x268>)
 8000cc6:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8000cca:	6153      	str	r3, [r2, #20]
        delay_ms(100);
 8000ccc:	2064      	movs	r0, #100	@ 0x64
 8000cce:	f000 fb47 	bl	8001360 <delay_ms>
        GPIOA->ODR &= ~(1 << 6);
 8000cd2:	4b88      	ldr	r3, [pc, #544]	@ (8000ef4 <handleAlarm+0x268>)
 8000cd4:	695b      	ldr	r3, [r3, #20]
 8000cd6:	4a87      	ldr	r2, [pc, #540]	@ (8000ef4 <handleAlarm+0x268>)
 8000cd8:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8000cdc:	6153      	str	r3, [r2, #20]
        int base_ppm = (int)gas_ppm;
 8000cde:	edd7 7a01 	vldr	s15, [r7, #4]
 8000ce2:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8000ce6:	ee17 3a90 	vmov	r3, s15
 8000cea:	613b      	str	r3, [r7, #16]
        int step = (base_ppm - THRESHOLD_DANGER) / 1000;
 8000cec:	693b      	ldr	r3, [r7, #16]
 8000cee:	f5a3 539c 	sub.w	r3, r3, #4992	@ 0x1380
 8000cf2:	3b08      	subs	r3, #8
 8000cf4:	4a80      	ldr	r2, [pc, #512]	@ (8000ef8 <handleAlarm+0x26c>)
 8000cf6:	fb82 1203 	smull	r1, r2, r2, r3
 8000cfa:	1192      	asrs	r2, r2, #6
 8000cfc:	17db      	asrs	r3, r3, #31
 8000cfe:	1ad3      	subs	r3, r2, r3
 8000d00:	60fb      	str	r3, [r7, #12]
        int blink_period = 500 - (step * 50);
 8000d02:	68fb      	ldr	r3, [r7, #12]
 8000d04:	f06f 0231 	mvn.w	r2, #49	@ 0x31
 8000d08:	fb02 f303 	mul.w	r3, r2, r3
 8000d0c:	f503 73fa 	add.w	r3, r3, #500	@ 0x1f4
 8000d10:	617b      	str	r3, [r7, #20]
        if (blink_period < 100) blink_period = 100;
 8000d12:	697b      	ldr	r3, [r7, #20]
 8000d14:	2b63      	cmp	r3, #99	@ 0x63
 8000d16:	dc01      	bgt.n	8000d1c <handleAlarm+0x90>
 8000d18:	2364      	movs	r3, #100	@ 0x64
 8000d1a:	617b      	str	r3, [r7, #20]
        TIM2->ARR = blink_period;
 8000d1c:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8000d20:	697b      	ldr	r3, [r7, #20]
 8000d22:	62d3      	str	r3, [r2, #44]	@ 0x2c
        TIM2->EGR |= TIM_EGR_UG; // Tạo sự kiện cập nhật
 8000d24:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8000d28:	695b      	ldr	r3, [r3, #20]
 8000d2a:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8000d2e:	f043 0301 	orr.w	r3, r3, #1
 8000d32:	6153      	str	r3, [r2, #20]
        GPIOB->ODR |= (1 << 1);
 8000d34:	4b6e      	ldr	r3, [pc, #440]	@ (8000ef0 <handleAlarm+0x264>)
 8000d36:	695b      	ldr	r3, [r3, #20]
 8000d38:	4a6d      	ldr	r2, [pc, #436]	@ (8000ef0 <handleAlarm+0x264>)
 8000d3a:	f043 0302 	orr.w	r3, r3, #2
 8000d3e:	6153      	str	r3, [r2, #20]
        led_red_enable = 1;
 8000d40:	4b6e      	ldr	r3, [pc, #440]	@ (8000efc <handleAlarm+0x270>)
 8000d42:	2201      	movs	r2, #1
 8000d44:	701a      	strb	r2, [r3, #0]
        TIM2->CR1 |= TIM_CR1_CEN;  // Bật counter
 8000d46:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8000d4a:	681b      	ldr	r3, [r3, #0]
 8000d4c:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8000d50:	f043 0301 	orr.w	r3, r3, #1
 8000d54:	6013      	str	r3, [r2, #0]
        TIM2->DIER |= TIM_DIER_UIE; // Bật ngắt cập nhật
 8000d56:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8000d5a:	68db      	ldr	r3, [r3, #12]
 8000d5c:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8000d60:	f043 0301 	orr.w	r3, r3, #1
 8000d64:	60d3      	str	r3, [r2, #12]
        NVIC_EnableIRQ(TIM2_IRQn);  // Bật ngắt NVIC
 8000d66:	201c      	movs	r0, #28
 8000d68:	f7ff ff46 	bl	8000bf8 <__NVIC_EnableIRQ>
        led_red_enable = 0;
        TIM2->CR1 &= ~TIM_CR1_CEN; // Tắt counter
        TIM2->DIER &= ~TIM_DIER_UIE; // Tắt ngắt
        UART2_SendString("Safe: LED off, TIM2 disabled\n");
    }
}
 8000d6c:	e0b9      	b.n	8000ee2 <handleAlarm+0x256>
    } else if (gas_ppm > THRESHOLD_WARNING) {
 8000d6e:	edd7 7a01 	vldr	s15, [r7, #4]
 8000d72:	ed9f 7a63 	vldr	s14, [pc, #396]	@ 8000f00 <handleAlarm+0x274>
 8000d76:	eef4 7ac7 	vcmpe.f32	s15, s14
 8000d7a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000d7e:	dd47      	ble.n	8000e10 <handleAlarm+0x184>
        GPIOB->ODR &= ~((1 << 2) | (1 << 3) | (1 << 4));
 8000d80:	4b5b      	ldr	r3, [pc, #364]	@ (8000ef0 <handleAlarm+0x264>)
 8000d82:	695b      	ldr	r3, [r3, #20]
 8000d84:	4a5a      	ldr	r2, [pc, #360]	@ (8000ef0 <handleAlarm+0x264>)
 8000d86:	f023 031c 	bic.w	r3, r3, #28
 8000d8a:	6153      	str	r3, [r2, #20]
        GPIOA->ODR |= (1 << 1) | (1 << 5);
 8000d8c:	4b59      	ldr	r3, [pc, #356]	@ (8000ef4 <handleAlarm+0x268>)
 8000d8e:	695b      	ldr	r3, [r3, #20]
 8000d90:	4a58      	ldr	r2, [pc, #352]	@ (8000ef4 <handleAlarm+0x268>)
 8000d92:	f043 0322 	orr.w	r3, r3, #34	@ 0x22
 8000d96:	6153      	str	r3, [r2, #20]
        GPIOA->ODR |= (1 << 6);
 8000d98:	4b56      	ldr	r3, [pc, #344]	@ (8000ef4 <handleAlarm+0x268>)
 8000d9a:	695b      	ldr	r3, [r3, #20]
 8000d9c:	4a55      	ldr	r2, [pc, #340]	@ (8000ef4 <handleAlarm+0x268>)
 8000d9e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8000da2:	6153      	str	r3, [r2, #20]
        delay_ms(100);
 8000da4:	2064      	movs	r0, #100	@ 0x64
 8000da6:	f000 fadb 	bl	8001360 <delay_ms>
        GPIOA->ODR &= ~(1 << 6);
 8000daa:	4b52      	ldr	r3, [pc, #328]	@ (8000ef4 <handleAlarm+0x268>)
 8000dac:	695b      	ldr	r3, [r3, #20]
 8000dae:	4a51      	ldr	r2, [pc, #324]	@ (8000ef4 <handleAlarm+0x268>)
 8000db0:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8000db4:	6153      	str	r3, [r2, #20]
        TIM2->ARR = 1000;
 8000db6:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8000dba:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8000dbe:	62da      	str	r2, [r3, #44]	@ 0x2c
        TIM2->EGR |= TIM_EGR_UG; // Tạo sự kiện cập nhật
 8000dc0:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8000dc4:	695b      	ldr	r3, [r3, #20]
 8000dc6:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8000dca:	f043 0301 	orr.w	r3, r3, #1
 8000dce:	6153      	str	r3, [r2, #20]
        GPIOB->ODR |= (1 << 1);
 8000dd0:	4b47      	ldr	r3, [pc, #284]	@ (8000ef0 <handleAlarm+0x264>)
 8000dd2:	695b      	ldr	r3, [r3, #20]
 8000dd4:	4a46      	ldr	r2, [pc, #280]	@ (8000ef0 <handleAlarm+0x264>)
 8000dd6:	f043 0302 	orr.w	r3, r3, #2
 8000dda:	6153      	str	r3, [r2, #20]
        led_red_enable = 1;
 8000ddc:	4b47      	ldr	r3, [pc, #284]	@ (8000efc <handleAlarm+0x270>)
 8000dde:	2201      	movs	r2, #1
 8000de0:	701a      	strb	r2, [r3, #0]
        TIM2->CR1 |= TIM_CR1_CEN;  // Bật counter
 8000de2:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8000de6:	681b      	ldr	r3, [r3, #0]
 8000de8:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8000dec:	f043 0301 	orr.w	r3, r3, #1
 8000df0:	6013      	str	r3, [r2, #0]
        TIM2->DIER |= TIM_DIER_UIE; // Bật ngắt cập nhật
 8000df2:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8000df6:	68db      	ldr	r3, [r3, #12]
 8000df8:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8000dfc:	f043 0301 	orr.w	r3, r3, #1
 8000e00:	60d3      	str	r3, [r2, #12]
        NVIC_EnableIRQ(TIM2_IRQn);  // Bật ngắt NVIC
 8000e02:	201c      	movs	r0, #28
 8000e04:	f7ff fef8 	bl	8000bf8 <__NVIC_EnableIRQ>
        UART2_SendString("Warning: TIM2 enabled, ARR=1000\n");
 8000e08:	483e      	ldr	r0, [pc, #248]	@ (8000f04 <handleAlarm+0x278>)
 8000e0a:	f000 fce9 	bl	80017e0 <UART2_SendString>
}
 8000e0e:	e068      	b.n	8000ee2 <handleAlarm+0x256>
    } else if (gas_ppm > THRESHOLD_SAFE) {
 8000e10:	edd7 7a01 	vldr	s15, [r7, #4]
 8000e14:	ed9f 7a3c 	vldr	s14, [pc, #240]	@ 8000f08 <handleAlarm+0x27c>
 8000e18:	eef4 7ac7 	vcmpe.f32	s15, s14
 8000e1c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000e20:	dd37      	ble.n	8000e92 <handleAlarm+0x206>
        GPIOB->ODR &= ~((1 << 1) | (1 << 3) | (1 << 4));
 8000e22:	4b33      	ldr	r3, [pc, #204]	@ (8000ef0 <handleAlarm+0x264>)
 8000e24:	695b      	ldr	r3, [r3, #20]
 8000e26:	4a32      	ldr	r2, [pc, #200]	@ (8000ef0 <handleAlarm+0x264>)
 8000e28:	f023 031a 	bic.w	r3, r3, #26
 8000e2c:	6153      	str	r3, [r2, #20]
        GPIOA->ODR |= (1 << 1) | (1 << 5);
 8000e2e:	4b31      	ldr	r3, [pc, #196]	@ (8000ef4 <handleAlarm+0x268>)
 8000e30:	695b      	ldr	r3, [r3, #20]
 8000e32:	4a30      	ldr	r2, [pc, #192]	@ (8000ef4 <handleAlarm+0x268>)
 8000e34:	f043 0322 	orr.w	r3, r3, #34	@ 0x22
 8000e38:	6153      	str	r3, [r2, #20]
        GPIOB->ODR |= (1 << 2);
 8000e3a:	4b2d      	ldr	r3, [pc, #180]	@ (8000ef0 <handleAlarm+0x264>)
 8000e3c:	695b      	ldr	r3, [r3, #20]
 8000e3e:	4a2c      	ldr	r2, [pc, #176]	@ (8000ef0 <handleAlarm+0x264>)
 8000e40:	f043 0304 	orr.w	r3, r3, #4
 8000e44:	6153      	str	r3, [r2, #20]
        GPIOA->ODR |= (1 << 6);
 8000e46:	4b2b      	ldr	r3, [pc, #172]	@ (8000ef4 <handleAlarm+0x268>)
 8000e48:	695b      	ldr	r3, [r3, #20]
 8000e4a:	4a2a      	ldr	r2, [pc, #168]	@ (8000ef4 <handleAlarm+0x268>)
 8000e4c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8000e50:	6153      	str	r3, [r2, #20]
        delay_ms(100);
 8000e52:	2064      	movs	r0, #100	@ 0x64
 8000e54:	f000 fa84 	bl	8001360 <delay_ms>
        GPIOA->ODR &= ~(1 << 6);
 8000e58:	4b26      	ldr	r3, [pc, #152]	@ (8000ef4 <handleAlarm+0x268>)
 8000e5a:	695b      	ldr	r3, [r3, #20]
 8000e5c:	4a25      	ldr	r2, [pc, #148]	@ (8000ef4 <handleAlarm+0x268>)
 8000e5e:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8000e62:	6153      	str	r3, [r2, #20]
        led_red_enable = 0;
 8000e64:	4b25      	ldr	r3, [pc, #148]	@ (8000efc <handleAlarm+0x270>)
 8000e66:	2200      	movs	r2, #0
 8000e68:	701a      	strb	r2, [r3, #0]
        TIM2->CR1 &= ~TIM_CR1_CEN; // Tắt counter
 8000e6a:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8000e6e:	681b      	ldr	r3, [r3, #0]
 8000e70:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8000e74:	f023 0301 	bic.w	r3, r3, #1
 8000e78:	6013      	str	r3, [r2, #0]
        TIM2->DIER &= ~TIM_DIER_UIE; // Tắt ngắt
 8000e7a:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8000e7e:	68db      	ldr	r3, [r3, #12]
 8000e80:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8000e84:	f023 0301 	bic.w	r3, r3, #1
 8000e88:	60d3      	str	r3, [r2, #12]
        UART2_SendString("Safe: LED off, TIM2 disabled\n");
 8000e8a:	4820      	ldr	r0, [pc, #128]	@ (8000f0c <handleAlarm+0x280>)
 8000e8c:	f000 fca8 	bl	80017e0 <UART2_SendString>
}
 8000e90:	e027      	b.n	8000ee2 <handleAlarm+0x256>
        GPIOB->ODR &= ~((1 << 1) | (1 << 2) | (1 << 4));
 8000e92:	4b17      	ldr	r3, [pc, #92]	@ (8000ef0 <handleAlarm+0x264>)
 8000e94:	695b      	ldr	r3, [r3, #20]
 8000e96:	4a16      	ldr	r2, [pc, #88]	@ (8000ef0 <handleAlarm+0x264>)
 8000e98:	f023 0316 	bic.w	r3, r3, #22
 8000e9c:	6153      	str	r3, [r2, #20]
        GPIOA->ODR &= ~((1 << 1) | (1 << 5));
 8000e9e:	4b15      	ldr	r3, [pc, #84]	@ (8000ef4 <handleAlarm+0x268>)
 8000ea0:	695b      	ldr	r3, [r3, #20]
 8000ea2:	4a14      	ldr	r2, [pc, #80]	@ (8000ef4 <handleAlarm+0x268>)
 8000ea4:	f023 0322 	bic.w	r3, r3, #34	@ 0x22
 8000ea8:	6153      	str	r3, [r2, #20]
        GPIOB->ODR |= (1 << 3);
 8000eaa:	4b11      	ldr	r3, [pc, #68]	@ (8000ef0 <handleAlarm+0x264>)
 8000eac:	695b      	ldr	r3, [r3, #20]
 8000eae:	4a10      	ldr	r2, [pc, #64]	@ (8000ef0 <handleAlarm+0x264>)
 8000eb0:	f043 0308 	orr.w	r3, r3, #8
 8000eb4:	6153      	str	r3, [r2, #20]
        led_red_enable = 0;
 8000eb6:	4b11      	ldr	r3, [pc, #68]	@ (8000efc <handleAlarm+0x270>)
 8000eb8:	2200      	movs	r2, #0
 8000eba:	701a      	strb	r2, [r3, #0]
        TIM2->CR1 &= ~TIM_CR1_CEN; // Tắt counter
 8000ebc:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8000ec0:	681b      	ldr	r3, [r3, #0]
 8000ec2:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8000ec6:	f023 0301 	bic.w	r3, r3, #1
 8000eca:	6013      	str	r3, [r2, #0]
        TIM2->DIER &= ~TIM_DIER_UIE; // Tắt ngắt
 8000ecc:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8000ed0:	68db      	ldr	r3, [r3, #12]
 8000ed2:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8000ed6:	f023 0301 	bic.w	r3, r3, #1
 8000eda:	60d3      	str	r3, [r2, #12]
        UART2_SendString("Safe: LED off, TIM2 disabled\n");
 8000edc:	480b      	ldr	r0, [pc, #44]	@ (8000f0c <handleAlarm+0x280>)
 8000ede:	f000 fc7f 	bl	80017e0 <UART2_SendString>
}
 8000ee2:	bf00      	nop
 8000ee4:	3718      	adds	r7, #24
 8000ee6:	46bd      	mov	sp, r7
 8000ee8:	bd80      	pop	{r7, pc}
 8000eea:	bf00      	nop
 8000eec:	459c4000 	.word	0x459c4000
 8000ef0:	40020400 	.word	0x40020400
 8000ef4:	40020000 	.word	0x40020000
 8000ef8:	10624dd3 	.word	0x10624dd3
 8000efc:	20000094 	.word	0x20000094
 8000f00:	447a0000 	.word	0x447a0000
 8000f04:	080033cc 	.word	0x080033cc
 8000f08:	43fa0000 	.word	0x43fa0000
 8000f0c:	080033f0 	.word	0x080033f0

08000f10 <getSystemState>:

SystemState getSystemState(float gas_ppm) {
 8000f10:	b480      	push	{r7}
 8000f12:	b083      	sub	sp, #12
 8000f14:	af00      	add	r7, sp, #0
 8000f16:	ed87 0a01 	vstr	s0, [r7, #4]
    if (gas_ppm > THRESHOLD_DANGER) return STATE_EXTREME_DANGER;
 8000f1a:	edd7 7a01 	vldr	s15, [r7, #4]
 8000f1e:	ed9f 7a13 	vldr	s14, [pc, #76]	@ 8000f6c <getSystemState+0x5c>
 8000f22:	eef4 7ac7 	vcmpe.f32	s15, s14
 8000f26:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000f2a:	dd01      	ble.n	8000f30 <getSystemState+0x20>
 8000f2c:	2303      	movs	r3, #3
 8000f2e:	e016      	b.n	8000f5e <getSystemState+0x4e>
    else if (gas_ppm > THRESHOLD_WARNING) return STATE_DANGER;
 8000f30:	edd7 7a01 	vldr	s15, [r7, #4]
 8000f34:	ed9f 7a0e 	vldr	s14, [pc, #56]	@ 8000f70 <getSystemState+0x60>
 8000f38:	eef4 7ac7 	vcmpe.f32	s15, s14
 8000f3c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000f40:	dd01      	ble.n	8000f46 <getSystemState+0x36>
 8000f42:	2302      	movs	r3, #2
 8000f44:	e00b      	b.n	8000f5e <getSystemState+0x4e>
    else if (gas_ppm > THRESHOLD_SAFE) return STATE_WARNING;
 8000f46:	edd7 7a01 	vldr	s15, [r7, #4]
 8000f4a:	ed9f 7a0a 	vldr	s14, [pc, #40]	@ 8000f74 <getSystemState+0x64>
 8000f4e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8000f52:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000f56:	dd01      	ble.n	8000f5c <getSystemState+0x4c>
 8000f58:	2301      	movs	r3, #1
 8000f5a:	e000      	b.n	8000f5e <getSystemState+0x4e>
    else return STATE_SAFE;
 8000f5c:	2300      	movs	r3, #0
}
 8000f5e:	4618      	mov	r0, r3
 8000f60:	370c      	adds	r7, #12
 8000f62:	46bd      	mov	sp, r7
 8000f64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f68:	4770      	bx	lr
 8000f6a:	bf00      	nop
 8000f6c:	459c4000 	.word	0x459c4000
 8000f70:	447a0000 	.word	0x447a0000
 8000f74:	43fa0000 	.word	0x43fa0000

08000f78 <I2C1_WriteByte>:
#include "config.h"
#include "alarm.h"
#include <stdio.h>
#include <stdbool.h>

static void I2C1_WriteByte(uint8_t addr, uint8_t data) {
 8000f78:	b480      	push	{r7}
 8000f7a:	b083      	sub	sp, #12
 8000f7c:	af00      	add	r7, sp, #0
 8000f7e:	4603      	mov	r3, r0
 8000f80:	460a      	mov	r2, r1
 8000f82:	71fb      	strb	r3, [r7, #7]
 8000f84:	4613      	mov	r3, r2
 8000f86:	71bb      	strb	r3, [r7, #6]
    I2C1->CR1 |= I2C_CR1_START;
 8000f88:	4b1c      	ldr	r3, [pc, #112]	@ (8000ffc <I2C1_WriteByte+0x84>)
 8000f8a:	681b      	ldr	r3, [r3, #0]
 8000f8c:	4a1b      	ldr	r2, [pc, #108]	@ (8000ffc <I2C1_WriteByte+0x84>)
 8000f8e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000f92:	6013      	str	r3, [r2, #0]
    while (!(I2C1->SR1 & I2C_SR1_SB));
 8000f94:	bf00      	nop
 8000f96:	4b19      	ldr	r3, [pc, #100]	@ (8000ffc <I2C1_WriteByte+0x84>)
 8000f98:	695b      	ldr	r3, [r3, #20]
 8000f9a:	f003 0301 	and.w	r3, r3, #1
 8000f9e:	2b00      	cmp	r3, #0
 8000fa0:	d0f9      	beq.n	8000f96 <I2C1_WriteByte+0x1e>
    (void)I2C1->SR1;
 8000fa2:	4b16      	ldr	r3, [pc, #88]	@ (8000ffc <I2C1_WriteByte+0x84>)
 8000fa4:	695b      	ldr	r3, [r3, #20]
    I2C1->DR = addr;
 8000fa6:	4a15      	ldr	r2, [pc, #84]	@ (8000ffc <I2C1_WriteByte+0x84>)
 8000fa8:	79fb      	ldrb	r3, [r7, #7]
 8000faa:	6113      	str	r3, [r2, #16]
    while (!(I2C1->SR1 & I2C_SR1_ADDR));
 8000fac:	bf00      	nop
 8000fae:	4b13      	ldr	r3, [pc, #76]	@ (8000ffc <I2C1_WriteByte+0x84>)
 8000fb0:	695b      	ldr	r3, [r3, #20]
 8000fb2:	f003 0302 	and.w	r3, r3, #2
 8000fb6:	2b00      	cmp	r3, #0
 8000fb8:	d0f9      	beq.n	8000fae <I2C1_WriteByte+0x36>
    (void)I2C1->SR1; (void)I2C1->SR2;
 8000fba:	4b10      	ldr	r3, [pc, #64]	@ (8000ffc <I2C1_WriteByte+0x84>)
 8000fbc:	695b      	ldr	r3, [r3, #20]
 8000fbe:	4b0f      	ldr	r3, [pc, #60]	@ (8000ffc <I2C1_WriteByte+0x84>)
 8000fc0:	699b      	ldr	r3, [r3, #24]
    while (!(I2C1->SR1 & I2C_SR1_TXE));
 8000fc2:	bf00      	nop
 8000fc4:	4b0d      	ldr	r3, [pc, #52]	@ (8000ffc <I2C1_WriteByte+0x84>)
 8000fc6:	695b      	ldr	r3, [r3, #20]
 8000fc8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000fcc:	2b00      	cmp	r3, #0
 8000fce:	d0f9      	beq.n	8000fc4 <I2C1_WriteByte+0x4c>
    I2C1->DR = data;
 8000fd0:	4a0a      	ldr	r2, [pc, #40]	@ (8000ffc <I2C1_WriteByte+0x84>)
 8000fd2:	79bb      	ldrb	r3, [r7, #6]
 8000fd4:	6113      	str	r3, [r2, #16]
    while (!(I2C1->SR1 & I2C_SR1_TXE));
 8000fd6:	bf00      	nop
 8000fd8:	4b08      	ldr	r3, [pc, #32]	@ (8000ffc <I2C1_WriteByte+0x84>)
 8000fda:	695b      	ldr	r3, [r3, #20]
 8000fdc:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000fe0:	2b00      	cmp	r3, #0
 8000fe2:	d0f9      	beq.n	8000fd8 <I2C1_WriteByte+0x60>
    I2C1->CR1 |= I2C_CR1_STOP;
 8000fe4:	4b05      	ldr	r3, [pc, #20]	@ (8000ffc <I2C1_WriteByte+0x84>)
 8000fe6:	681b      	ldr	r3, [r3, #0]
 8000fe8:	4a04      	ldr	r2, [pc, #16]	@ (8000ffc <I2C1_WriteByte+0x84>)
 8000fea:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8000fee:	6013      	str	r3, [r2, #0]
}
 8000ff0:	bf00      	nop
 8000ff2:	370c      	adds	r7, #12
 8000ff4:	46bd      	mov	sp, r7
 8000ff6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ffa:	4770      	bx	lr
 8000ffc:	40005400 	.word	0x40005400

08001000 <lcd_send_cmd>:

static void lcd_send_cmd(uint8_t cmd) {
 8001000:	b580      	push	{r7, lr}
 8001002:	b086      	sub	sp, #24
 8001004:	af00      	add	r7, sp, #0
 8001006:	4603      	mov	r3, r0
 8001008:	71fb      	strb	r3, [r7, #7]
    uint8_t high = cmd & 0xF0;
 800100a:	79fb      	ldrb	r3, [r7, #7]
 800100c:	f023 030f 	bic.w	r3, r3, #15
 8001010:	74fb      	strb	r3, [r7, #19]
    uint8_t low = (cmd << 4) & 0xF0;
 8001012:	79fb      	ldrb	r3, [r7, #7]
 8001014:	011b      	lsls	r3, r3, #4
 8001016:	74bb      	strb	r3, [r7, #18]
    uint8_t data_t[4] = {
 8001018:	7cfb      	ldrb	r3, [r7, #19]
 800101a:	f043 030c 	orr.w	r3, r3, #12
 800101e:	b2db      	uxtb	r3, r3
 8001020:	733b      	strb	r3, [r7, #12]
 8001022:	7cfb      	ldrb	r3, [r7, #19]
 8001024:	f043 0308 	orr.w	r3, r3, #8
 8001028:	b2db      	uxtb	r3, r3
 800102a:	737b      	strb	r3, [r7, #13]
 800102c:	7cbb      	ldrb	r3, [r7, #18]
 800102e:	f043 030c 	orr.w	r3, r3, #12
 8001032:	b2db      	uxtb	r3, r3
 8001034:	73bb      	strb	r3, [r7, #14]
 8001036:	7cbb      	ldrb	r3, [r7, #18]
 8001038:	f043 0308 	orr.w	r3, r3, #8
 800103c:	b2db      	uxtb	r3, r3
 800103e:	73fb      	strb	r3, [r7, #15]
        high | 0x0C, high | 0x08,
        low | 0x0C, low | 0x08
    };
    for (int i = 0; i < 4; i++) {
 8001040:	2300      	movs	r3, #0
 8001042:	617b      	str	r3, [r7, #20]
 8001044:	e00e      	b.n	8001064 <lcd_send_cmd+0x64>
        I2C1_WriteByte(LCD_ADDR, data_t[i]);
 8001046:	f107 020c 	add.w	r2, r7, #12
 800104a:	697b      	ldr	r3, [r7, #20]
 800104c:	4413      	add	r3, r2
 800104e:	781b      	ldrb	r3, [r3, #0]
 8001050:	4619      	mov	r1, r3
 8001052:	204e      	movs	r0, #78	@ 0x4e
 8001054:	f7ff ff90 	bl	8000f78 <I2C1_WriteByte>
        delay_ms(1);
 8001058:	2001      	movs	r0, #1
 800105a:	f000 f981 	bl	8001360 <delay_ms>
    for (int i = 0; i < 4; i++) {
 800105e:	697b      	ldr	r3, [r7, #20]
 8001060:	3301      	adds	r3, #1
 8001062:	617b      	str	r3, [r7, #20]
 8001064:	697b      	ldr	r3, [r7, #20]
 8001066:	2b03      	cmp	r3, #3
 8001068:	dded      	ble.n	8001046 <lcd_send_cmd+0x46>
    }
}
 800106a:	bf00      	nop
 800106c:	bf00      	nop
 800106e:	3718      	adds	r7, #24
 8001070:	46bd      	mov	sp, r7
 8001072:	bd80      	pop	{r7, pc}

08001074 <lcd_send_data>:

static void lcd_send_data(uint8_t data) {
 8001074:	b580      	push	{r7, lr}
 8001076:	b086      	sub	sp, #24
 8001078:	af00      	add	r7, sp, #0
 800107a:	4603      	mov	r3, r0
 800107c:	71fb      	strb	r3, [r7, #7]
    uint8_t high = data & 0xF0;
 800107e:	79fb      	ldrb	r3, [r7, #7]
 8001080:	f023 030f 	bic.w	r3, r3, #15
 8001084:	74fb      	strb	r3, [r7, #19]
    uint8_t low = (data << 4) & 0xF0;
 8001086:	79fb      	ldrb	r3, [r7, #7]
 8001088:	011b      	lsls	r3, r3, #4
 800108a:	74bb      	strb	r3, [r7, #18]
    uint8_t data_t[4] = {
 800108c:	7cfb      	ldrb	r3, [r7, #19]
 800108e:	f043 030d 	orr.w	r3, r3, #13
 8001092:	b2db      	uxtb	r3, r3
 8001094:	733b      	strb	r3, [r7, #12]
 8001096:	7cfb      	ldrb	r3, [r7, #19]
 8001098:	f043 0309 	orr.w	r3, r3, #9
 800109c:	b2db      	uxtb	r3, r3
 800109e:	737b      	strb	r3, [r7, #13]
 80010a0:	7cbb      	ldrb	r3, [r7, #18]
 80010a2:	f043 030d 	orr.w	r3, r3, #13
 80010a6:	b2db      	uxtb	r3, r3
 80010a8:	73bb      	strb	r3, [r7, #14]
 80010aa:	7cbb      	ldrb	r3, [r7, #18]
 80010ac:	f043 0309 	orr.w	r3, r3, #9
 80010b0:	b2db      	uxtb	r3, r3
 80010b2:	73fb      	strb	r3, [r7, #15]
        high | 0x0D, high | 0x09,
        low | 0x0D, low | 0x09
    };
    for (int i = 0; i < 4; i++) {
 80010b4:	2300      	movs	r3, #0
 80010b6:	617b      	str	r3, [r7, #20]
 80010b8:	e00e      	b.n	80010d8 <lcd_send_data+0x64>
        I2C1_WriteByte(LCD_ADDR, data_t[i]);
 80010ba:	f107 020c 	add.w	r2, r7, #12
 80010be:	697b      	ldr	r3, [r7, #20]
 80010c0:	4413      	add	r3, r2
 80010c2:	781b      	ldrb	r3, [r3, #0]
 80010c4:	4619      	mov	r1, r3
 80010c6:	204e      	movs	r0, #78	@ 0x4e
 80010c8:	f7ff ff56 	bl	8000f78 <I2C1_WriteByte>
        delay_ms(1);
 80010cc:	2001      	movs	r0, #1
 80010ce:	f000 f947 	bl	8001360 <delay_ms>
    for (int i = 0; i < 4; i++) {
 80010d2:	697b      	ldr	r3, [r7, #20]
 80010d4:	3301      	adds	r3, #1
 80010d6:	617b      	str	r3, [r7, #20]
 80010d8:	697b      	ldr	r3, [r7, #20]
 80010da:	2b03      	cmp	r3, #3
 80010dc:	dded      	ble.n	80010ba <lcd_send_data+0x46>
    }
}
 80010de:	bf00      	nop
 80010e0:	bf00      	nop
 80010e2:	3718      	adds	r7, #24
 80010e4:	46bd      	mov	sp, r7
 80010e6:	bd80      	pop	{r7, pc}

080010e8 <lcd_set_cursor>:

static void lcd_set_cursor(uint8_t row, uint8_t col) {
 80010e8:	b580      	push	{r7, lr}
 80010ea:	b084      	sub	sp, #16
 80010ec:	af00      	add	r7, sp, #0
 80010ee:	4603      	mov	r3, r0
 80010f0:	460a      	mov	r2, r1
 80010f2:	71fb      	strb	r3, [r7, #7]
 80010f4:	4613      	mov	r3, r2
 80010f6:	71bb      	strb	r3, [r7, #6]
    uint8_t addr = (row == 0) ? (0x80 + col) : (0xC0 + col);
 80010f8:	79fb      	ldrb	r3, [r7, #7]
 80010fa:	2b00      	cmp	r3, #0
 80010fc:	d103      	bne.n	8001106 <lcd_set_cursor+0x1e>
 80010fe:	79bb      	ldrb	r3, [r7, #6]
 8001100:	3b80      	subs	r3, #128	@ 0x80
 8001102:	b2db      	uxtb	r3, r3
 8001104:	e002      	b.n	800110c <lcd_set_cursor+0x24>
 8001106:	79bb      	ldrb	r3, [r7, #6]
 8001108:	3b40      	subs	r3, #64	@ 0x40
 800110a:	b2db      	uxtb	r3, r3
 800110c:	73fb      	strb	r3, [r7, #15]
    lcd_send_cmd(addr);
 800110e:	7bfb      	ldrb	r3, [r7, #15]
 8001110:	4618      	mov	r0, r3
 8001112:	f7ff ff75 	bl	8001000 <lcd_send_cmd>
}
 8001116:	bf00      	nop
 8001118:	3710      	adds	r7, #16
 800111a:	46bd      	mov	sp, r7
 800111c:	bd80      	pop	{r7, pc}

0800111e <lcd_send_string>:

static void lcd_send_string(char *str) {
 800111e:	b580      	push	{r7, lr}
 8001120:	b082      	sub	sp, #8
 8001122:	af00      	add	r7, sp, #0
 8001124:	6078      	str	r0, [r7, #4]
    while (*str) lcd_send_data(*str++);
 8001126:	e006      	b.n	8001136 <lcd_send_string+0x18>
 8001128:	687b      	ldr	r3, [r7, #4]
 800112a:	1c5a      	adds	r2, r3, #1
 800112c:	607a      	str	r2, [r7, #4]
 800112e:	781b      	ldrb	r3, [r3, #0]
 8001130:	4618      	mov	r0, r3
 8001132:	f7ff ff9f 	bl	8001074 <lcd_send_data>
 8001136:	687b      	ldr	r3, [r7, #4]
 8001138:	781b      	ldrb	r3, [r3, #0]
 800113a:	2b00      	cmp	r3, #0
 800113c:	d1f4      	bne.n	8001128 <lcd_send_string+0xa>
}
 800113e:	bf00      	nop
 8001140:	bf00      	nop
 8001142:	3708      	adds	r7, #8
 8001144:	46bd      	mov	sp, r7
 8001146:	bd80      	pop	{r7, pc}

08001148 <display_init>:

void display_init(void) {
 8001148:	b580      	push	{r7, lr}
 800114a:	af00      	add	r7, sp, #0
    delay_ms(50);
 800114c:	2032      	movs	r0, #50	@ 0x32
 800114e:	f000 f907 	bl	8001360 <delay_ms>
    lcd_send_cmd(0x33);
 8001152:	2033      	movs	r0, #51	@ 0x33
 8001154:	f7ff ff54 	bl	8001000 <lcd_send_cmd>
    lcd_send_cmd(0x32);
 8001158:	2032      	movs	r0, #50	@ 0x32
 800115a:	f7ff ff51 	bl	8001000 <lcd_send_cmd>
    lcd_send_cmd(0x28);
 800115e:	2028      	movs	r0, #40	@ 0x28
 8001160:	f7ff ff4e 	bl	8001000 <lcd_send_cmd>
    lcd_send_cmd(0x0C);
 8001164:	200c      	movs	r0, #12
 8001166:	f7ff ff4b 	bl	8001000 <lcd_send_cmd>
    lcd_send_cmd(0x06);
 800116a:	2006      	movs	r0, #6
 800116c:	f7ff ff48 	bl	8001000 <lcd_send_cmd>
    lcd_send_cmd(0x01);
 8001170:	2001      	movs	r0, #1
 8001172:	f7ff ff45 	bl	8001000 <lcd_send_cmd>
    delay_ms(2);
 8001176:	2002      	movs	r0, #2
 8001178:	f000 f8f2 	bl	8001360 <delay_ms>
}
 800117c:	bf00      	nop
 800117e:	bd80      	pop	{r7, pc}

08001180 <updateDisplay>:

void updateDisplay(float gas_ppm, bool is_reset) {
 8001180:	b580      	push	{r7, lr}
 8001182:	b08a      	sub	sp, #40	@ 0x28
 8001184:	af00      	add	r7, sp, #0
 8001186:	ed87 0a01 	vstr	s0, [r7, #4]
 800118a:	4603      	mov	r3, r0
 800118c:	70fb      	strb	r3, [r7, #3]
    char buffer[20];
    if (is_reset) {
 800118e:	78fb      	ldrb	r3, [r7, #3]
 8001190:	2b00      	cmp	r3, #0
 8001192:	d020      	beq.n	80011d6 <updateDisplay+0x56>
        // Hiển thị trạng thái reset
        snprintf(buffer, sizeof(buffer), "%-16s", "Gas: -- ppm"); // Padding lên 16 ký tự
 8001194:	f107 000c 	add.w	r0, r7, #12
 8001198:	4b2a      	ldr	r3, [pc, #168]	@ (8001244 <updateDisplay+0xc4>)
 800119a:	4a2b      	ldr	r2, [pc, #172]	@ (8001248 <updateDisplay+0xc8>)
 800119c:	2114      	movs	r1, #20
 800119e:	f000 fce9 	bl	8001b74 <sniprintf>
        lcd_set_cursor(0, 0);
 80011a2:	2100      	movs	r1, #0
 80011a4:	2000      	movs	r0, #0
 80011a6:	f7ff ff9f 	bl	80010e8 <lcd_set_cursor>
        lcd_send_string(buffer);
 80011aa:	f107 030c 	add.w	r3, r7, #12
 80011ae:	4618      	mov	r0, r3
 80011b0:	f7ff ffb5 	bl	800111e <lcd_send_string>
        snprintf(buffer, sizeof(buffer), "%-16s", "Status: RESET");
 80011b4:	f107 000c 	add.w	r0, r7, #12
 80011b8:	4b24      	ldr	r3, [pc, #144]	@ (800124c <updateDisplay+0xcc>)
 80011ba:	4a23      	ldr	r2, [pc, #140]	@ (8001248 <updateDisplay+0xc8>)
 80011bc:	2114      	movs	r1, #20
 80011be:	f000 fcd9 	bl	8001b74 <sniprintf>
        lcd_set_cursor(1, 0);
 80011c2:	2100      	movs	r1, #0
 80011c4:	2001      	movs	r0, #1
 80011c6:	f7ff ff8f 	bl	80010e8 <lcd_set_cursor>
        lcd_send_string(buffer);
 80011ca:	f107 030c 	add.w	r3, r7, #12
 80011ce:	4618      	mov	r0, r3
 80011d0:	f7ff ffa5 	bl	800111e <lcd_send_string>
        const char* status = stateStrings[state];
        snprintf(buffer, sizeof(buffer), "Status: %-8s", status);
        lcd_set_cursor(1, 0);
        lcd_send_string(buffer);
    }
}
 80011d4:	e031      	b.n	800123a <updateDisplay+0xba>
        snprintf(buffer, sizeof(buffer), "Gas: %5d ppm    ", (int)gas_ppm);
 80011d6:	edd7 7a01 	vldr	s15, [r7, #4]
 80011da:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80011de:	f107 000c 	add.w	r0, r7, #12
 80011e2:	ee17 3a90 	vmov	r3, s15
 80011e6:	4a1a      	ldr	r2, [pc, #104]	@ (8001250 <updateDisplay+0xd0>)
 80011e8:	2114      	movs	r1, #20
 80011ea:	f000 fcc3 	bl	8001b74 <sniprintf>
        lcd_set_cursor(0, 0);
 80011ee:	2100      	movs	r1, #0
 80011f0:	2000      	movs	r0, #0
 80011f2:	f7ff ff79 	bl	80010e8 <lcd_set_cursor>
        lcd_send_string(buffer);
 80011f6:	f107 030c 	add.w	r3, r7, #12
 80011fa:	4618      	mov	r0, r3
 80011fc:	f7ff ff8f 	bl	800111e <lcd_send_string>
        SystemState state = getSystemState(gas_ppm);
 8001200:	ed97 0a01 	vldr	s0, [r7, #4]
 8001204:	f7ff fe84 	bl	8000f10 <getSystemState>
 8001208:	4603      	mov	r3, r0
 800120a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
        const char* status = stateStrings[state];
 800120e:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8001212:	4a10      	ldr	r2, [pc, #64]	@ (8001254 <updateDisplay+0xd4>)
 8001214:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001218:	623b      	str	r3, [r7, #32]
        snprintf(buffer, sizeof(buffer), "Status: %-8s", status);
 800121a:	f107 000c 	add.w	r0, r7, #12
 800121e:	6a3b      	ldr	r3, [r7, #32]
 8001220:	4a0d      	ldr	r2, [pc, #52]	@ (8001258 <updateDisplay+0xd8>)
 8001222:	2114      	movs	r1, #20
 8001224:	f000 fca6 	bl	8001b74 <sniprintf>
        lcd_set_cursor(1, 0);
 8001228:	2100      	movs	r1, #0
 800122a:	2001      	movs	r0, #1
 800122c:	f7ff ff5c 	bl	80010e8 <lcd_set_cursor>
        lcd_send_string(buffer);
 8001230:	f107 030c 	add.w	r3, r7, #12
 8001234:	4618      	mov	r0, r3
 8001236:	f7ff ff72 	bl	800111e <lcd_send_string>
}
 800123a:	bf00      	nop
 800123c:	3728      	adds	r7, #40	@ 0x28
 800123e:	46bd      	mov	sp, r7
 8001240:	bd80      	pop	{r7, pc}
 8001242:	bf00      	nop
 8001244:	08003410 	.word	0x08003410
 8001248:	0800341c 	.word	0x0800341c
 800124c:	08003424 	.word	0x08003424
 8001250:	08003434 	.word	0x08003434
 8001254:	20000000 	.word	0x20000000
 8001258:	08003448 	.word	0x08003448

0800125c <updateDisplayStopped>:

void updateDisplayStopped(void) {
 800125c:	b580      	push	{r7, lr}
 800125e:	af00      	add	r7, sp, #0
    lcd_set_cursor(0, 0);
 8001260:	2100      	movs	r1, #0
 8001262:	2000      	movs	r0, #0
 8001264:	f7ff ff40 	bl	80010e8 <lcd_set_cursor>
    lcd_send_string("                ");
 8001268:	4805      	ldr	r0, [pc, #20]	@ (8001280 <updateDisplayStopped+0x24>)
 800126a:	f7ff ff58 	bl	800111e <lcd_send_string>
    lcd_set_cursor(1, 0);
 800126e:	2100      	movs	r1, #0
 8001270:	2001      	movs	r0, #1
 8001272:	f7ff ff39 	bl	80010e8 <lcd_set_cursor>
    lcd_send_string("Status: STOPPED ");
 8001276:	4803      	ldr	r0, [pc, #12]	@ (8001284 <updateDisplayStopped+0x28>)
 8001278:	f7ff ff51 	bl	800111e <lcd_send_string>
}
 800127c:	bf00      	nop
 800127e:	bd80      	pop	{r7, pc}
 8001280:	08003458 	.word	0x08003458
 8001284:	0800346c 	.word	0x0800346c

08001288 <__NVIC_EnableIRQ>:
{
 8001288:	b480      	push	{r7}
 800128a:	b083      	sub	sp, #12
 800128c:	af00      	add	r7, sp, #0
 800128e:	4603      	mov	r3, r0
 8001290:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001292:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001296:	2b00      	cmp	r3, #0
 8001298:	db0b      	blt.n	80012b2 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800129a:	79fb      	ldrb	r3, [r7, #7]
 800129c:	f003 021f 	and.w	r2, r3, #31
 80012a0:	4907      	ldr	r1, [pc, #28]	@ (80012c0 <__NVIC_EnableIRQ+0x38>)
 80012a2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80012a6:	095b      	lsrs	r3, r3, #5
 80012a8:	2001      	movs	r0, #1
 80012aa:	fa00 f202 	lsl.w	r2, r0, r2
 80012ae:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 80012b2:	bf00      	nop
 80012b4:	370c      	adds	r7, #12
 80012b6:	46bd      	mov	sp, r7
 80012b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012bc:	4770      	bx	lr
 80012be:	bf00      	nop
 80012c0:	e000e100 	.word	0xe000e100

080012c4 <__NVIC_DisableIRQ>:
  \details Disables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
 80012c4:	b480      	push	{r7}
 80012c6:	b083      	sub	sp, #12
 80012c8:	af00      	add	r7, sp, #0
 80012ca:	4603      	mov	r3, r0
 80012cc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80012ce:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80012d2:	2b00      	cmp	r3, #0
 80012d4:	db12      	blt.n	80012fc <__NVIC_DisableIRQ+0x38>
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80012d6:	79fb      	ldrb	r3, [r7, #7]
 80012d8:	f003 021f 	and.w	r2, r3, #31
 80012dc:	490a      	ldr	r1, [pc, #40]	@ (8001308 <__NVIC_DisableIRQ+0x44>)
 80012de:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80012e2:	095b      	lsrs	r3, r3, #5
 80012e4:	2001      	movs	r0, #1
 80012e6:	fa00 f202 	lsl.w	r2, r0, r2
 80012ea:	3320      	adds	r3, #32
 80012ec:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 80012f0:	f3bf 8f4f 	dsb	sy
}
 80012f4:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80012f6:	f3bf 8f6f 	isb	sy
}
 80012fa:	bf00      	nop
    __DSB();
    __ISB();
  }
}
 80012fc:	bf00      	nop
 80012fe:	370c      	adds	r7, #12
 8001300:	46bd      	mov	sp, r7
 8001302:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001306:	4770      	bx	lr
 8001308:	e000e100 	.word	0xe000e100

0800130c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800130c:	b480      	push	{r7}
 800130e:	b083      	sub	sp, #12
 8001310:	af00      	add	r7, sp, #0
 8001312:	4603      	mov	r3, r0
 8001314:	6039      	str	r1, [r7, #0]
 8001316:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001318:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800131c:	2b00      	cmp	r3, #0
 800131e:	db0a      	blt.n	8001336 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001320:	683b      	ldr	r3, [r7, #0]
 8001322:	b2da      	uxtb	r2, r3
 8001324:	490c      	ldr	r1, [pc, #48]	@ (8001358 <__NVIC_SetPriority+0x4c>)
 8001326:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800132a:	0112      	lsls	r2, r2, #4
 800132c:	b2d2      	uxtb	r2, r2
 800132e:	440b      	add	r3, r1
 8001330:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001334:	e00a      	b.n	800134c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001336:	683b      	ldr	r3, [r7, #0]
 8001338:	b2da      	uxtb	r2, r3
 800133a:	4908      	ldr	r1, [pc, #32]	@ (800135c <__NVIC_SetPriority+0x50>)
 800133c:	79fb      	ldrb	r3, [r7, #7]
 800133e:	f003 030f 	and.w	r3, r3, #15
 8001342:	3b04      	subs	r3, #4
 8001344:	0112      	lsls	r2, r2, #4
 8001346:	b2d2      	uxtb	r2, r2
 8001348:	440b      	add	r3, r1
 800134a:	761a      	strb	r2, [r3, #24]
}
 800134c:	bf00      	nop
 800134e:	370c      	adds	r7, #12
 8001350:	46bd      	mov	sp, r7
 8001352:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001356:	4770      	bx	lr
 8001358:	e000e100 	.word	0xe000e100
 800135c:	e000ed00 	.word	0xe000ed00

08001360 <delay_ms>:
static volatile uint8_t prev_btn2 = 1;
extern volatile uint8_t system_running;
extern volatile uint32_t safe_timer;

// Hàm delay bằng SysTick
void delay_ms(uint32_t ms) {
 8001360:	b480      	push	{r7}
 8001362:	b085      	sub	sp, #20
 8001364:	af00      	add	r7, sp, #0
 8001366:	6078      	str	r0, [r7, #4]
    SysTick->LOAD = 16000 - 1;  // 1ms với HCLK 16MHz
 8001368:	4b11      	ldr	r3, [pc, #68]	@ (80013b0 <delay_ms+0x50>)
 800136a:	f643 627f 	movw	r2, #15999	@ 0x3e7f
 800136e:	605a      	str	r2, [r3, #4]
    SysTick->VAL = 0;
 8001370:	4b0f      	ldr	r3, [pc, #60]	@ (80013b0 <delay_ms+0x50>)
 8001372:	2200      	movs	r2, #0
 8001374:	609a      	str	r2, [r3, #8]
    SysTick->CTRL = 5;
 8001376:	4b0e      	ldr	r3, [pc, #56]	@ (80013b0 <delay_ms+0x50>)
 8001378:	2205      	movs	r2, #5
 800137a:	601a      	str	r2, [r3, #0]
    for(uint32_t i = 0; i < ms; i++) {
 800137c:	2300      	movs	r3, #0
 800137e:	60fb      	str	r3, [r7, #12]
 8001380:	e009      	b.n	8001396 <delay_ms+0x36>
        while(!(SysTick->CTRL & (1 << 16)));
 8001382:	bf00      	nop
 8001384:	4b0a      	ldr	r3, [pc, #40]	@ (80013b0 <delay_ms+0x50>)
 8001386:	681b      	ldr	r3, [r3, #0]
 8001388:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800138c:	2b00      	cmp	r3, #0
 800138e:	d0f9      	beq.n	8001384 <delay_ms+0x24>
    for(uint32_t i = 0; i < ms; i++) {
 8001390:	68fb      	ldr	r3, [r7, #12]
 8001392:	3301      	adds	r3, #1
 8001394:	60fb      	str	r3, [r7, #12]
 8001396:	68fa      	ldr	r2, [r7, #12]
 8001398:	687b      	ldr	r3, [r7, #4]
 800139a:	429a      	cmp	r2, r3
 800139c:	d3f1      	bcc.n	8001382 <delay_ms+0x22>
    }
    SysTick->CTRL = 0;
 800139e:	4b04      	ldr	r3, [pc, #16]	@ (80013b0 <delay_ms+0x50>)
 80013a0:	2200      	movs	r2, #0
 80013a2:	601a      	str	r2, [r3, #0]
}
 80013a4:	bf00      	nop
 80013a6:	3714      	adds	r7, #20
 80013a8:	46bd      	mov	sp, r7
 80013aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013ae:	4770      	bx	lr
 80013b0:	e000e010 	.word	0xe000e010

080013b4 <SystemClock_Config>:

// Cấu hình clock (HSI 16MHz mặc định)
static void SystemClock_Config(void) {
 80013b4:	b480      	push	{r7}
 80013b6:	af00      	add	r7, sp, #0

}
 80013b8:	bf00      	nop
 80013ba:	46bd      	mov	sp, r7
 80013bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013c0:	4770      	bx	lr
	...

080013c4 <GPIO_Init>:

// Cấu hình GPIO cho LED, relay, còi và nút bấm
static void GPIO_Init(void) {
 80013c4:	b480      	push	{r7}
 80013c6:	af00      	add	r7, sp, #0
    RCC->AHB1ENR |= RCC_AHB1ENR_GPIOAEN | RCC_AHB1ENR_GPIOBEN | RCC_AHB1ENR_GPIOCEN;
 80013c8:	4b30      	ldr	r3, [pc, #192]	@ (800148c <GPIO_Init+0xc8>)
 80013ca:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80013cc:	4a2f      	ldr	r2, [pc, #188]	@ (800148c <GPIO_Init+0xc8>)
 80013ce:	f043 0307 	orr.w	r3, r3, #7
 80013d2:	6313      	str	r3, [r2, #48]	@ 0x30

    // PC13, PC12: input pull-up cho SW1, SW2
    GPIOC->MODER &= ~((3 << (13 * 2)) | (3 << (12 * 2)));
 80013d4:	4b2e      	ldr	r3, [pc, #184]	@ (8001490 <GPIO_Init+0xcc>)
 80013d6:	681b      	ldr	r3, [r3, #0]
 80013d8:	4a2d      	ldr	r2, [pc, #180]	@ (8001490 <GPIO_Init+0xcc>)
 80013da:	f023 6370 	bic.w	r3, r3, #251658240	@ 0xf000000
 80013de:	6013      	str	r3, [r2, #0]
    GPIOC->PUPDR &= ~((3 << (13 * 2)) | (3 << (12 * 2)));
 80013e0:	4b2b      	ldr	r3, [pc, #172]	@ (8001490 <GPIO_Init+0xcc>)
 80013e2:	68db      	ldr	r3, [r3, #12]
 80013e4:	4a2a      	ldr	r2, [pc, #168]	@ (8001490 <GPIO_Init+0xcc>)
 80013e6:	f023 6370 	bic.w	r3, r3, #251658240	@ 0xf000000
 80013ea:	60d3      	str	r3, [r2, #12]
    GPIOC->PUPDR |= (1 << (13 * 2)) | (1 << (12 * 2));
 80013ec:	4b28      	ldr	r3, [pc, #160]	@ (8001490 <GPIO_Init+0xcc>)
 80013ee:	68db      	ldr	r3, [r3, #12]
 80013f0:	4a27      	ldr	r2, [pc, #156]	@ (8001490 <GPIO_Init+0xcc>)
 80013f2:	f043 63a0 	orr.w	r3, r3, #83886080	@ 0x5000000
 80013f6:	60d3      	str	r3, [r2, #12]

    // PA1 (relay), PA5 (còi), PA6 (ESP): output
    GPIOA->MODER &= ~((3 << (1 * 2)) | (3 << (5 * 2)) | (3 << (6 * 2)));
 80013f8:	4b26      	ldr	r3, [pc, #152]	@ (8001494 <GPIO_Init+0xd0>)
 80013fa:	681b      	ldr	r3, [r3, #0]
 80013fc:	4a25      	ldr	r2, [pc, #148]	@ (8001494 <GPIO_Init+0xd0>)
 80013fe:	f423 5370 	bic.w	r3, r3, #15360	@ 0x3c00
 8001402:	f023 030c 	bic.w	r3, r3, #12
 8001406:	6013      	str	r3, [r2, #0]
    GPIOA->MODER |= (1 << (1 * 2)) | (1 << (5 * 2)) | (1 << (6 * 2));
 8001408:	4b22      	ldr	r3, [pc, #136]	@ (8001494 <GPIO_Init+0xd0>)
 800140a:	681b      	ldr	r3, [r3, #0]
 800140c:	4a21      	ldr	r2, [pc, #132]	@ (8001494 <GPIO_Init+0xd0>)
 800140e:	f443 53a0 	orr.w	r3, r3, #5120	@ 0x1400
 8001412:	f043 0304 	orr.w	r3, r3, #4
 8001416:	6013      	str	r3, [r2, #0]
    GPIOA->OTYPER &= ~((1 << 1) | (1 << 5) | (1 << 6));
 8001418:	4b1e      	ldr	r3, [pc, #120]	@ (8001494 <GPIO_Init+0xd0>)
 800141a:	685b      	ldr	r3, [r3, #4]
 800141c:	4a1d      	ldr	r2, [pc, #116]	@ (8001494 <GPIO_Init+0xd0>)
 800141e:	f023 0362 	bic.w	r3, r3, #98	@ 0x62
 8001422:	6053      	str	r3, [r2, #4]
    GPIOA->OSPEEDR |= (3 << (1 * 2)) | (3 << (5 * 2)) | (2 << (6 * 2));
 8001424:	4b1b      	ldr	r3, [pc, #108]	@ (8001494 <GPIO_Init+0xd0>)
 8001426:	689b      	ldr	r3, [r3, #8]
 8001428:	4a1a      	ldr	r2, [pc, #104]	@ (8001494 <GPIO_Init+0xd0>)
 800142a:	f443 5330 	orr.w	r3, r3, #11264	@ 0x2c00
 800142e:	f043 030c 	orr.w	r3, r3, #12
 8001432:	6093      	str	r3, [r2, #8]
    GPIOA->PUPDR &= ~((3 << (1 * 2)) | (3 << (5 * 2)) | (3 << (6 * 2)));
 8001434:	4b17      	ldr	r3, [pc, #92]	@ (8001494 <GPIO_Init+0xd0>)
 8001436:	68db      	ldr	r3, [r3, #12]
 8001438:	4a16      	ldr	r2, [pc, #88]	@ (8001494 <GPIO_Init+0xd0>)
 800143a:	f423 5370 	bic.w	r3, r3, #15360	@ 0x3c00
 800143e:	f023 030c 	bic.w	r3, r3, #12
 8001442:	60d3      	str	r3, [r2, #12]

    // PB1 (LED đỏ), PB2 (LED vàng), PB3 (LED xanh), PB4 (LED xanh lá): output
    GPIOB->MODER &= ~((3 << (1 * 2)) | (3 << (2 * 2)) | (3 << (3 * 2)) | (3 << (4 * 2)));
 8001444:	4b14      	ldr	r3, [pc, #80]	@ (8001498 <GPIO_Init+0xd4>)
 8001446:	681b      	ldr	r3, [r3, #0]
 8001448:	4a13      	ldr	r2, [pc, #76]	@ (8001498 <GPIO_Init+0xd4>)
 800144a:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 800144e:	6013      	str	r3, [r2, #0]
    GPIOB->MODER |= (1 << (1 * 2)) | (1 << (2 * 2)) | (1 << (3 * 2)) | (1 << (4 * 2));
 8001450:	4b11      	ldr	r3, [pc, #68]	@ (8001498 <GPIO_Init+0xd4>)
 8001452:	681b      	ldr	r3, [r3, #0]
 8001454:	4a10      	ldr	r2, [pc, #64]	@ (8001498 <GPIO_Init+0xd4>)
 8001456:	f443 73aa 	orr.w	r3, r3, #340	@ 0x154
 800145a:	6013      	str	r3, [r2, #0]
    GPIOB->OTYPER &= ~((1 << 1) | (1 << 2) | (1 << 3) | (1 << 4));
 800145c:	4b0e      	ldr	r3, [pc, #56]	@ (8001498 <GPIO_Init+0xd4>)
 800145e:	685b      	ldr	r3, [r3, #4]
 8001460:	4a0d      	ldr	r2, [pc, #52]	@ (8001498 <GPIO_Init+0xd4>)
 8001462:	f023 031e 	bic.w	r3, r3, #30
 8001466:	6053      	str	r3, [r2, #4]
    GPIOB->OSPEEDR |= (3 << (1 * 2)) | (3 << (2 * 2)) | (3 << (3 * 2)) | (3 << (4 * 2));
 8001468:	4b0b      	ldr	r3, [pc, #44]	@ (8001498 <GPIO_Init+0xd4>)
 800146a:	689b      	ldr	r3, [r3, #8]
 800146c:	4a0a      	ldr	r2, [pc, #40]	@ (8001498 <GPIO_Init+0xd4>)
 800146e:	f443 737f 	orr.w	r3, r3, #1020	@ 0x3fc
 8001472:	6093      	str	r3, [r2, #8]
    GPIOB->PUPDR &= ~((3 << (1 * 2)) | (3 << (2 * 2)) | (3 << (3 * 2)) | (3 << (4 * 2)));
 8001474:	4b08      	ldr	r3, [pc, #32]	@ (8001498 <GPIO_Init+0xd4>)
 8001476:	68db      	ldr	r3, [r3, #12]
 8001478:	4a07      	ldr	r2, [pc, #28]	@ (8001498 <GPIO_Init+0xd4>)
 800147a:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 800147e:	60d3      	str	r3, [r2, #12]
}
 8001480:	bf00      	nop
 8001482:	46bd      	mov	sp, r7
 8001484:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001488:	4770      	bx	lr
 800148a:	bf00      	nop
 800148c:	40023800 	.word	0x40023800
 8001490:	40020800 	.word	0x40020800
 8001494:	40020000 	.word	0x40020000
 8001498:	40020400 	.word	0x40020400

0800149c <ADC1_Init>:

// Cấu hình ADC1 tại PA0
static void ADC1_Init(void) {
 800149c:	b480      	push	{r7}
 800149e:	af00      	add	r7, sp, #0
    RCC->APB2ENR |= RCC_APB2ENR_ADC1EN;
 80014a0:	4b17      	ldr	r3, [pc, #92]	@ (8001500 <ADC1_Init+0x64>)
 80014a2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80014a4:	4a16      	ldr	r2, [pc, #88]	@ (8001500 <ADC1_Init+0x64>)
 80014a6:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80014aa:	6453      	str	r3, [r2, #68]	@ 0x44
    RCC->AHB1ENR |= RCC_AHB1ENR_GPIOAEN;
 80014ac:	4b14      	ldr	r3, [pc, #80]	@ (8001500 <ADC1_Init+0x64>)
 80014ae:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80014b0:	4a13      	ldr	r2, [pc, #76]	@ (8001500 <ADC1_Init+0x64>)
 80014b2:	f043 0301 	orr.w	r3, r3, #1
 80014b6:	6313      	str	r3, [r2, #48]	@ 0x30

    GPIOA->MODER |= (3 << (0 * 2));
 80014b8:	4b12      	ldr	r3, [pc, #72]	@ (8001504 <ADC1_Init+0x68>)
 80014ba:	681b      	ldr	r3, [r3, #0]
 80014bc:	4a11      	ldr	r2, [pc, #68]	@ (8001504 <ADC1_Init+0x68>)
 80014be:	f043 0303 	orr.w	r3, r3, #3
 80014c2:	6013      	str	r3, [r2, #0]
    GPIOA->PUPDR &= ~(3 << (0 * 2));
 80014c4:	4b0f      	ldr	r3, [pc, #60]	@ (8001504 <ADC1_Init+0x68>)
 80014c6:	68db      	ldr	r3, [r3, #12]
 80014c8:	4a0e      	ldr	r2, [pc, #56]	@ (8001504 <ADC1_Init+0x68>)
 80014ca:	f023 0303 	bic.w	r3, r3, #3
 80014ce:	60d3      	str	r3, [r2, #12]

    ADC1->CR2 = 0;
 80014d0:	4b0d      	ldr	r3, [pc, #52]	@ (8001508 <ADC1_Init+0x6c>)
 80014d2:	2200      	movs	r2, #0
 80014d4:	609a      	str	r2, [r3, #8]
    ADC1->SQR3 = 0;
 80014d6:	4b0c      	ldr	r3, [pc, #48]	@ (8001508 <ADC1_Init+0x6c>)
 80014d8:	2200      	movs	r2, #0
 80014da:	635a      	str	r2, [r3, #52]	@ 0x34
    ADC1->SMPR2 |= (7 << 0);
 80014dc:	4b0a      	ldr	r3, [pc, #40]	@ (8001508 <ADC1_Init+0x6c>)
 80014de:	691b      	ldr	r3, [r3, #16]
 80014e0:	4a09      	ldr	r2, [pc, #36]	@ (8001508 <ADC1_Init+0x6c>)
 80014e2:	f043 0307 	orr.w	r3, r3, #7
 80014e6:	6113      	str	r3, [r2, #16]
    ADC1->CR2 |= ADC_CR2_ADON;
 80014e8:	4b07      	ldr	r3, [pc, #28]	@ (8001508 <ADC1_Init+0x6c>)
 80014ea:	689b      	ldr	r3, [r3, #8]
 80014ec:	4a06      	ldr	r2, [pc, #24]	@ (8001508 <ADC1_Init+0x6c>)
 80014ee:	f043 0301 	orr.w	r3, r3, #1
 80014f2:	6093      	str	r3, [r2, #8]
}
 80014f4:	bf00      	nop
 80014f6:	46bd      	mov	sp, r7
 80014f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014fc:	4770      	bx	lr
 80014fe:	bf00      	nop
 8001500:	40023800 	.word	0x40023800
 8001504:	40020000 	.word	0x40020000
 8001508:	40012000 	.word	0x40012000

0800150c <I2C1_Init>:

// Cấu hình I2C1 cho LCD
static void I2C1_Init(void) {
 800150c:	b480      	push	{r7}
 800150e:	af00      	add	r7, sp, #0
    RCC->AHB1ENR |= RCC_AHB1ENR_GPIOBEN;
 8001510:	4b21      	ldr	r3, [pc, #132]	@ (8001598 <I2C1_Init+0x8c>)
 8001512:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001514:	4a20      	ldr	r2, [pc, #128]	@ (8001598 <I2C1_Init+0x8c>)
 8001516:	f043 0302 	orr.w	r3, r3, #2
 800151a:	6313      	str	r3, [r2, #48]	@ 0x30
    RCC->APB1ENR |= RCC_APB1ENR_I2C1EN;
 800151c:	4b1e      	ldr	r3, [pc, #120]	@ (8001598 <I2C1_Init+0x8c>)
 800151e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001520:	4a1d      	ldr	r2, [pc, #116]	@ (8001598 <I2C1_Init+0x8c>)
 8001522:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8001526:	6413      	str	r3, [r2, #64]	@ 0x40

    GPIOB->MODER &= ~((3 << (8 * 2)) | (3 << (9 * 2)));
 8001528:	4b1c      	ldr	r3, [pc, #112]	@ (800159c <I2C1_Init+0x90>)
 800152a:	681b      	ldr	r3, [r3, #0]
 800152c:	4a1b      	ldr	r2, [pc, #108]	@ (800159c <I2C1_Init+0x90>)
 800152e:	f423 2370 	bic.w	r3, r3, #983040	@ 0xf0000
 8001532:	6013      	str	r3, [r2, #0]
    GPIOB->MODER |= (2 << (8 * 2)) | (2 << (9 * 2));
 8001534:	4b19      	ldr	r3, [pc, #100]	@ (800159c <I2C1_Init+0x90>)
 8001536:	681b      	ldr	r3, [r3, #0]
 8001538:	4a18      	ldr	r2, [pc, #96]	@ (800159c <I2C1_Init+0x90>)
 800153a:	f443 2320 	orr.w	r3, r3, #655360	@ 0xa0000
 800153e:	6013      	str	r3, [r2, #0]
    GPIOB->AFR[1] &= ~((0xF << 0) | (0xF << 4));
 8001540:	4b16      	ldr	r3, [pc, #88]	@ (800159c <I2C1_Init+0x90>)
 8001542:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001544:	4a15      	ldr	r2, [pc, #84]	@ (800159c <I2C1_Init+0x90>)
 8001546:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 800154a:	6253      	str	r3, [r2, #36]	@ 0x24
    GPIOB->AFR[1] |= (4 << 0) | (4 << 4);
 800154c:	4b13      	ldr	r3, [pc, #76]	@ (800159c <I2C1_Init+0x90>)
 800154e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001550:	4a12      	ldr	r2, [pc, #72]	@ (800159c <I2C1_Init+0x90>)
 8001552:	f043 0344 	orr.w	r3, r3, #68	@ 0x44
 8001556:	6253      	str	r3, [r2, #36]	@ 0x24
    GPIOB->OTYPER |= (1 << 8) | (1 << 9);
 8001558:	4b10      	ldr	r3, [pc, #64]	@ (800159c <I2C1_Init+0x90>)
 800155a:	685b      	ldr	r3, [r3, #4]
 800155c:	4a0f      	ldr	r2, [pc, #60]	@ (800159c <I2C1_Init+0x90>)
 800155e:	f443 7340 	orr.w	r3, r3, #768	@ 0x300
 8001562:	6053      	str	r3, [r2, #4]
    GPIOB->PUPDR &= ~((3 << (8 * 2)) | (3 << (9 * 2)));
 8001564:	4b0d      	ldr	r3, [pc, #52]	@ (800159c <I2C1_Init+0x90>)
 8001566:	68db      	ldr	r3, [r3, #12]
 8001568:	4a0c      	ldr	r2, [pc, #48]	@ (800159c <I2C1_Init+0x90>)
 800156a:	f423 2370 	bic.w	r3, r3, #983040	@ 0xf0000
 800156e:	60d3      	str	r3, [r2, #12]

    I2C1->CR2 = 16;
 8001570:	4b0b      	ldr	r3, [pc, #44]	@ (80015a0 <I2C1_Init+0x94>)
 8001572:	2210      	movs	r2, #16
 8001574:	605a      	str	r2, [r3, #4]
    I2C1->CCR = 80;
 8001576:	4b0a      	ldr	r3, [pc, #40]	@ (80015a0 <I2C1_Init+0x94>)
 8001578:	2250      	movs	r2, #80	@ 0x50
 800157a:	61da      	str	r2, [r3, #28]
    I2C1->TRISE = 17;
 800157c:	4b08      	ldr	r3, [pc, #32]	@ (80015a0 <I2C1_Init+0x94>)
 800157e:	2211      	movs	r2, #17
 8001580:	621a      	str	r2, [r3, #32]
    I2C1->CR1 |= I2C_CR1_PE;
 8001582:	4b07      	ldr	r3, [pc, #28]	@ (80015a0 <I2C1_Init+0x94>)
 8001584:	681b      	ldr	r3, [r3, #0]
 8001586:	4a06      	ldr	r2, [pc, #24]	@ (80015a0 <I2C1_Init+0x94>)
 8001588:	f043 0301 	orr.w	r3, r3, #1
 800158c:	6013      	str	r3, [r2, #0]
}
 800158e:	bf00      	nop
 8001590:	46bd      	mov	sp, r7
 8001592:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001596:	4770      	bx	lr
 8001598:	40023800 	.word	0x40023800
 800159c:	40020400 	.word	0x40020400
 80015a0:	40005400 	.word	0x40005400

080015a4 <Timer2_Init>:

// Cấu hình Timer2 cho nhấp nháy LED
static void Timer2_Init(void) {
 80015a4:	b580      	push	{r7, lr}
 80015a6:	af00      	add	r7, sp, #0
    RCC->APB1ENR |= RCC_APB1ENR_TIM2EN;
 80015a8:	4b14      	ldr	r3, [pc, #80]	@ (80015fc <Timer2_Init+0x58>)
 80015aa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80015ac:	4a13      	ldr	r2, [pc, #76]	@ (80015fc <Timer2_Init+0x58>)
 80015ae:	f043 0301 	orr.w	r3, r3, #1
 80015b2:	6413      	str	r3, [r2, #64]	@ 0x40
    TIM2->PSC = 16000 - 1;
 80015b4:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 80015b8:	f643 627f 	movw	r2, #15999	@ 0x3e7f
 80015bc:	629a      	str	r2, [r3, #40]	@ 0x28
    TIM2->ARR = 1000;
 80015be:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 80015c2:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 80015c6:	62da      	str	r2, [r3, #44]	@ 0x2c
    TIM2->DIER |= TIM_DIER_UIE;
 80015c8:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 80015cc:	68db      	ldr	r3, [r3, #12]
 80015ce:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 80015d2:	f043 0301 	orr.w	r3, r3, #1
 80015d6:	60d3      	str	r3, [r2, #12]
    TIM2->CR1 |= TIM_CR1_CEN;
 80015d8:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 80015dc:	681b      	ldr	r3, [r3, #0]
 80015de:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 80015e2:	f043 0301 	orr.w	r3, r3, #1
 80015e6:	6013      	str	r3, [r2, #0]
    NVIC_EnableIRQ(TIM2_IRQn);
 80015e8:	201c      	movs	r0, #28
 80015ea:	f7ff fe4d 	bl	8001288 <__NVIC_EnableIRQ>
    NVIC_SetPriority(TIM2_IRQn, 0);
 80015ee:	2100      	movs	r1, #0
 80015f0:	201c      	movs	r0, #28
 80015f2:	f7ff fe8b 	bl	800130c <__NVIC_SetPriority>
}
 80015f6:	bf00      	nop
 80015f8:	bd80      	pop	{r7, pc}
 80015fa:	bf00      	nop
 80015fc:	40023800 	.word	0x40023800

08001600 <initHardware>:

// Khởi tạo tất cả phần cứng
void initHardware(void) {
 8001600:	b580      	push	{r7, lr}
 8001602:	af00      	add	r7, sp, #0
    SystemClock_Config();
 8001604:	f7ff fed6 	bl	80013b4 <SystemClock_Config>
    GPIO_Init();
 8001608:	f7ff fedc 	bl	80013c4 <GPIO_Init>
    ADC1_Init();
 800160c:	f7ff ff46 	bl	800149c <ADC1_Init>
    I2C1_Init();
 8001610:	f7ff ff7c 	bl	800150c <I2C1_Init>
    USART2_Init();
 8001614:	f000 f884 	bl	8001720 <USART2_Init>
    Timer2_Init();
 8001618:	f7ff ffc4 	bl	80015a4 <Timer2_Init>
}
 800161c:	bf00      	nop
 800161e:	bd80      	pop	{r7, pc}

08001620 <handleSystemState>:

// Xử lý trạng thái nút bấm
void handleSystemState(void) {
 8001620:	b580      	push	{r7, lr}
 8001622:	b082      	sub	sp, #8
 8001624:	af00      	add	r7, sp, #0
    uint8_t btn1 = (GPIOC->IDR & (1 << 13)) ? 1 : 0;  // SW1 - PC13
 8001626:	4b37      	ldr	r3, [pc, #220]	@ (8001704 <handleSystemState+0xe4>)
 8001628:	691b      	ldr	r3, [r3, #16]
 800162a:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800162e:	2b00      	cmp	r3, #0
 8001630:	bf14      	ite	ne
 8001632:	2301      	movne	r3, #1
 8001634:	2300      	moveq	r3, #0
 8001636:	b2db      	uxtb	r3, r3
 8001638:	71fb      	strb	r3, [r7, #7]
    uint8_t btn2 = (GPIOC->IDR & (1 << 12)) ? 1 : 0;  // SW2 - PC12
 800163a:	4b32      	ldr	r3, [pc, #200]	@ (8001704 <handleSystemState+0xe4>)
 800163c:	691b      	ldr	r3, [r3, #16]
 800163e:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8001642:	2b00      	cmp	r3, #0
 8001644:	bf14      	ite	ne
 8001646:	2301      	movne	r3, #1
 8001648:	2300      	moveq	r3, #0
 800164a:	b2db      	uxtb	r3, r3
 800164c:	71bb      	strb	r3, [r7, #6]

    // Phát hiện cạnh xuống SW1
    if (prev_btn1 == 1 && btn1 == 0) {
 800164e:	4b2e      	ldr	r3, [pc, #184]	@ (8001708 <handleSystemState+0xe8>)
 8001650:	781b      	ldrb	r3, [r3, #0]
 8001652:	b2db      	uxtb	r3, r3
 8001654:	2b01      	cmp	r3, #1
 8001656:	d11c      	bne.n	8001692 <handleSystemState+0x72>
 8001658:	79fb      	ldrb	r3, [r7, #7]
 800165a:	2b00      	cmp	r3, #0
 800165c:	d119      	bne.n	8001692 <handleSystemState+0x72>
        system_running = !system_running;
 800165e:	4b2b      	ldr	r3, [pc, #172]	@ (800170c <handleSystemState+0xec>)
 8001660:	781b      	ldrb	r3, [r3, #0]
 8001662:	b2db      	uxtb	r3, r3
 8001664:	2b00      	cmp	r3, #0
 8001666:	bf0c      	ite	eq
 8001668:	2301      	moveq	r3, #1
 800166a:	2300      	movne	r3, #0
 800166c:	b2db      	uxtb	r3, r3
 800166e:	461a      	mov	r2, r3
 8001670:	4b26      	ldr	r3, [pc, #152]	@ (800170c <handleSystemState+0xec>)
 8001672:	701a      	strb	r2, [r3, #0]
        GPIOB->ODR &= ~((1 << 1) | (1 << 2) | (1 << 3) | (1 << 4));
 8001674:	4b26      	ldr	r3, [pc, #152]	@ (8001710 <handleSystemState+0xf0>)
 8001676:	695b      	ldr	r3, [r3, #20]
 8001678:	4a25      	ldr	r2, [pc, #148]	@ (8001710 <handleSystemState+0xf0>)
 800167a:	f023 031e 	bic.w	r3, r3, #30
 800167e:	6153      	str	r3, [r2, #20]
        GPIOA->ODR &= ~((1 << 1) | (1 << 5) | (1 << 6));
 8001680:	4b24      	ldr	r3, [pc, #144]	@ (8001714 <handleSystemState+0xf4>)
 8001682:	695b      	ldr	r3, [r3, #20]
 8001684:	4a23      	ldr	r2, [pc, #140]	@ (8001714 <handleSystemState+0xf4>)
 8001686:	f023 0362 	bic.w	r3, r3, #98	@ 0x62
 800168a:	6153      	str	r3, [r2, #20]
        delay_ms(200);
 800168c:	20c8      	movs	r0, #200	@ 0xc8
 800168e:	f7ff fe67 	bl	8001360 <delay_ms>
    }
    prev_btn1 = btn1;
 8001692:	4a1d      	ldr	r2, [pc, #116]	@ (8001708 <handleSystemState+0xe8>)
 8001694:	79fb      	ldrb	r3, [r7, #7]
 8001696:	7013      	strb	r3, [r2, #0]

    // Phát hiện cạnh xuống SW2
    if (prev_btn2 == 1 && btn2 == 0) {
 8001698:	4b1f      	ldr	r3, [pc, #124]	@ (8001718 <handleSystemState+0xf8>)
 800169a:	781b      	ldrb	r3, [r3, #0]
 800169c:	b2db      	uxtb	r3, r3
 800169e:	2b01      	cmp	r3, #1
 80016a0:	d128      	bne.n	80016f4 <handleSystemState+0xd4>
 80016a2:	79bb      	ldrb	r3, [r7, #6]
 80016a4:	2b00      	cmp	r3, #0
 80016a6:	d125      	bne.n	80016f4 <handleSystemState+0xd4>
        system_running = 1; // Đảm bảo hệ thống hoạt động
 80016a8:	4b18      	ldr	r3, [pc, #96]	@ (800170c <handleSystemState+0xec>)
 80016aa:	2201      	movs	r2, #1
 80016ac:	701a      	strb	r2, [r3, #0]
        safe_timer = 5; // Đặt thời gian reset là 5 giây
 80016ae:	4b1b      	ldr	r3, [pc, #108]	@ (800171c <handleSystemState+0xfc>)
 80016b0:	2205      	movs	r2, #5
 80016b2:	601a      	str	r2, [r3, #0]
        TIM2->CR1 &= ~TIM_CR1_CEN;
 80016b4:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 80016b8:	681b      	ldr	r3, [r3, #0]
 80016ba:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 80016be:	f023 0301 	bic.w	r3, r3, #1
 80016c2:	6013      	str	r3, [r2, #0]
        NVIC_DisableIRQ(TIM2_IRQn);
 80016c4:	201c      	movs	r0, #28
 80016c6:	f7ff fdfd 	bl	80012c4 <__NVIC_DisableIRQ>
        GPIOB->ODR &= ~((1 << 1) | (1 << 2) | (1 << 4));
 80016ca:	4b11      	ldr	r3, [pc, #68]	@ (8001710 <handleSystemState+0xf0>)
 80016cc:	695b      	ldr	r3, [r3, #20]
 80016ce:	4a10      	ldr	r2, [pc, #64]	@ (8001710 <handleSystemState+0xf0>)
 80016d0:	f023 0316 	bic.w	r3, r3, #22
 80016d4:	6153      	str	r3, [r2, #20]
        GPIOB->ODR |= (1 << 3);
 80016d6:	4b0e      	ldr	r3, [pc, #56]	@ (8001710 <handleSystemState+0xf0>)
 80016d8:	695b      	ldr	r3, [r3, #20]
 80016da:	4a0d      	ldr	r2, [pc, #52]	@ (8001710 <handleSystemState+0xf0>)
 80016dc:	f043 0308 	orr.w	r3, r3, #8
 80016e0:	6153      	str	r3, [r2, #20]
        GPIOA->ODR &= ~((1 << 1) | (1 << 5) | (1 << 6));
 80016e2:	4b0c      	ldr	r3, [pc, #48]	@ (8001714 <handleSystemState+0xf4>)
 80016e4:	695b      	ldr	r3, [r3, #20]
 80016e6:	4a0b      	ldr	r2, [pc, #44]	@ (8001714 <handleSystemState+0xf4>)
 80016e8:	f023 0362 	bic.w	r3, r3, #98	@ 0x62
 80016ec:	6153      	str	r3, [r2, #20]
        delay_ms(200);
 80016ee:	20c8      	movs	r0, #200	@ 0xc8
 80016f0:	f7ff fe36 	bl	8001360 <delay_ms>
    }
    prev_btn2 = btn2;
 80016f4:	4a08      	ldr	r2, [pc, #32]	@ (8001718 <handleSystemState+0xf8>)
 80016f6:	79bb      	ldrb	r3, [r7, #6]
 80016f8:	7013      	strb	r3, [r2, #0]
}
 80016fa:	bf00      	nop
 80016fc:	3708      	adds	r7, #8
 80016fe:	46bd      	mov	sp, r7
 8001700:	bd80      	pop	{r7, pc}
 8001702:	bf00      	nop
 8001704:	40020800 	.word	0x40020800
 8001708:	20000010 	.word	0x20000010
 800170c:	20000012 	.word	0x20000012
 8001710:	40020400 	.word	0x40020400
 8001714:	40020000 	.word	0x40020000
 8001718:	20000011 	.word	0x20000011
 800171c:	20000098 	.word	0x20000098

08001720 <USART2_Init>:

// Khởi tạo USART2 @115200
void USART2_Init(void) {
 8001720:	b480      	push	{r7}
 8001722:	b083      	sub	sp, #12
 8001724:	af00      	add	r7, sp, #0
    RCC->AHB1ENR |= RCC_AHB1ENR_GPIOAEN;
 8001726:	4b1f      	ldr	r3, [pc, #124]	@ (80017a4 <USART2_Init+0x84>)
 8001728:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800172a:	4a1e      	ldr	r2, [pc, #120]	@ (80017a4 <USART2_Init+0x84>)
 800172c:	f043 0301 	orr.w	r3, r3, #1
 8001730:	6313      	str	r3, [r2, #48]	@ 0x30
    RCC->APB1ENR |= RCC_APB1ENR_USART2EN;
 8001732:	4b1c      	ldr	r3, [pc, #112]	@ (80017a4 <USART2_Init+0x84>)
 8001734:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001736:	4a1b      	ldr	r2, [pc, #108]	@ (80017a4 <USART2_Init+0x84>)
 8001738:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800173c:	6413      	str	r3, [r2, #64]	@ 0x40

    GPIOA->MODER &= ~((3 << (2 * 2)) | (3 << (3 * 2)));
 800173e:	4b1a      	ldr	r3, [pc, #104]	@ (80017a8 <USART2_Init+0x88>)
 8001740:	681b      	ldr	r3, [r3, #0]
 8001742:	4a19      	ldr	r2, [pc, #100]	@ (80017a8 <USART2_Init+0x88>)
 8001744:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8001748:	6013      	str	r3, [r2, #0]
    GPIOA->MODER |= (2 << (2 * 2)) | (2 << (3 * 2));
 800174a:	4b17      	ldr	r3, [pc, #92]	@ (80017a8 <USART2_Init+0x88>)
 800174c:	681b      	ldr	r3, [r3, #0]
 800174e:	4a16      	ldr	r2, [pc, #88]	@ (80017a8 <USART2_Init+0x88>)
 8001750:	f043 03a0 	orr.w	r3, r3, #160	@ 0xa0
 8001754:	6013      	str	r3, [r2, #0]
    GPIOA->AFR[0] &= ~((0xF << (2 * 4)) | (0xF << (3 * 4)));
 8001756:	4b14      	ldr	r3, [pc, #80]	@ (80017a8 <USART2_Init+0x88>)
 8001758:	6a1b      	ldr	r3, [r3, #32]
 800175a:	4a13      	ldr	r2, [pc, #76]	@ (80017a8 <USART2_Init+0x88>)
 800175c:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8001760:	6213      	str	r3, [r2, #32]
    GPIOA->AFR[0] |= (7 << (2 * 4)) | (7 << (3 * 4));
 8001762:	4b11      	ldr	r3, [pc, #68]	@ (80017a8 <USART2_Init+0x88>)
 8001764:	6a1b      	ldr	r3, [r3, #32]
 8001766:	4a10      	ldr	r2, [pc, #64]	@ (80017a8 <USART2_Init+0x88>)
 8001768:	f443 43ee 	orr.w	r3, r3, #30464	@ 0x7700
 800176c:	6213      	str	r3, [r2, #32]

    uint32_t div = (16 * 1000000 + 115200 / 2) / 115200;
 800176e:	238b      	movs	r3, #139	@ 0x8b
 8001770:	607b      	str	r3, [r7, #4]
    USART2->BRR = div;
 8001772:	4a0e      	ldr	r2, [pc, #56]	@ (80017ac <USART2_Init+0x8c>)
 8001774:	687b      	ldr	r3, [r7, #4]
 8001776:	6093      	str	r3, [r2, #8]
    USART2->CR1 = USART_CR1_TE | USART_CR1_RE | USART_CR1_UE;
 8001778:	4b0c      	ldr	r3, [pc, #48]	@ (80017ac <USART2_Init+0x8c>)
 800177a:	f242 020c 	movw	r2, #8204	@ 0x200c
 800177e:	60da      	str	r2, [r3, #12]
    for (volatile int i = 0; i < 1000; i++);
 8001780:	2300      	movs	r3, #0
 8001782:	603b      	str	r3, [r7, #0]
 8001784:	e002      	b.n	800178c <USART2_Init+0x6c>
 8001786:	683b      	ldr	r3, [r7, #0]
 8001788:	3301      	adds	r3, #1
 800178a:	603b      	str	r3, [r7, #0]
 800178c:	683b      	ldr	r3, [r7, #0]
 800178e:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8001792:	dbf8      	blt.n	8001786 <USART2_Init+0x66>
}
 8001794:	bf00      	nop
 8001796:	bf00      	nop
 8001798:	370c      	adds	r7, #12
 800179a:	46bd      	mov	sp, r7
 800179c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017a0:	4770      	bx	lr
 80017a2:	bf00      	nop
 80017a4:	40023800 	.word	0x40023800
 80017a8:	40020000 	.word	0x40020000
 80017ac:	40004400 	.word	0x40004400

080017b0 <UART2_SendChar>:

// Gửi 1 ký tự qua UART
void UART2_SendChar(char c) {
 80017b0:	b480      	push	{r7}
 80017b2:	b083      	sub	sp, #12
 80017b4:	af00      	add	r7, sp, #0
 80017b6:	4603      	mov	r3, r0
 80017b8:	71fb      	strb	r3, [r7, #7]
    while (!(USART2->SR & USART_SR_TXE));
 80017ba:	bf00      	nop
 80017bc:	4b07      	ldr	r3, [pc, #28]	@ (80017dc <UART2_SendChar+0x2c>)
 80017be:	681b      	ldr	r3, [r3, #0]
 80017c0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80017c4:	2b00      	cmp	r3, #0
 80017c6:	d0f9      	beq.n	80017bc <UART2_SendChar+0xc>
    USART2->DR = (c & 0xFF);
 80017c8:	4a04      	ldr	r2, [pc, #16]	@ (80017dc <UART2_SendChar+0x2c>)
 80017ca:	79fb      	ldrb	r3, [r7, #7]
 80017cc:	6053      	str	r3, [r2, #4]
}
 80017ce:	bf00      	nop
 80017d0:	370c      	adds	r7, #12
 80017d2:	46bd      	mov	sp, r7
 80017d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017d8:	4770      	bx	lr
 80017da:	bf00      	nop
 80017dc:	40004400 	.word	0x40004400

080017e0 <UART2_SendString>:

// Gửi chuỗi qua UART
void UART2_SendString(const char *s) {
 80017e0:	b580      	push	{r7, lr}
 80017e2:	b082      	sub	sp, #8
 80017e4:	af00      	add	r7, sp, #0
 80017e6:	6078      	str	r0, [r7, #4]
    while (*s) UART2_SendChar(*s++);
 80017e8:	e006      	b.n	80017f8 <UART2_SendString+0x18>
 80017ea:	687b      	ldr	r3, [r7, #4]
 80017ec:	1c5a      	adds	r2, r3, #1
 80017ee:	607a      	str	r2, [r7, #4]
 80017f0:	781b      	ldrb	r3, [r3, #0]
 80017f2:	4618      	mov	r0, r3
 80017f4:	f7ff ffdc 	bl	80017b0 <UART2_SendChar>
 80017f8:	687b      	ldr	r3, [r7, #4]
 80017fa:	781b      	ldrb	r3, [r3, #0]
 80017fc:	2b00      	cmp	r3, #0
 80017fe:	d1f4      	bne.n	80017ea <UART2_SendString+0xa>
}
 8001800:	bf00      	nop
 8001802:	bf00      	nop
 8001804:	3708      	adds	r7, #8
 8001806:	46bd      	mov	sp, r7
 8001808:	bd80      	pop	{r7, pc}
	...

0800180c <__NVIC_EnableIRQ>:
{
 800180c:	b480      	push	{r7}
 800180e:	b083      	sub	sp, #12
 8001810:	af00      	add	r7, sp, #0
 8001812:	4603      	mov	r3, r0
 8001814:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001816:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800181a:	2b00      	cmp	r3, #0
 800181c:	db0b      	blt.n	8001836 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800181e:	79fb      	ldrb	r3, [r7, #7]
 8001820:	f003 021f 	and.w	r2, r3, #31
 8001824:	4907      	ldr	r1, [pc, #28]	@ (8001844 <__NVIC_EnableIRQ+0x38>)
 8001826:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800182a:	095b      	lsrs	r3, r3, #5
 800182c:	2001      	movs	r0, #1
 800182e:	fa00 f202 	lsl.w	r2, r0, r2
 8001832:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8001836:	bf00      	nop
 8001838:	370c      	adds	r7, #12
 800183a:	46bd      	mov	sp, r7
 800183c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001840:	4770      	bx	lr
 8001842:	bf00      	nop
 8001844:	e000e100 	.word	0xe000e100

08001848 <main>:
#include "alarm.h"

volatile uint8_t system_running = 1;
volatile uint32_t safe_timer = 0;

int main(void) {
 8001848:	b580      	push	{r7, lr}
 800184a:	b082      	sub	sp, #8
 800184c:	af00      	add	r7, sp, #0
    initHardware();
 800184e:	f7ff fed7 	bl	8001600 <initHardware>
    display_init();
 8001852:	f7ff fc79 	bl	8001148 <display_init>
    while (1) {
        handleSystemState();
 8001856:	f7ff fee3 	bl	8001620 <handleSystemState>
        if (system_running) {
 800185a:	4b20      	ldr	r3, [pc, #128]	@ (80018dc <main+0x94>)
 800185c:	781b      	ldrb	r3, [r3, #0]
 800185e:	b2db      	uxtb	r3, r3
 8001860:	2b00      	cmp	r3, #0
 8001862:	d02e      	beq.n	80018c2 <main+0x7a>
            float gas_ppm;
            if (readGasSensor(&gas_ppm)) {
 8001864:	1d3b      	adds	r3, r7, #4
 8001866:	4618      	mov	r0, r3
 8001868:	f000 f85e 	bl	8001928 <readGasSensor>
 800186c:	4603      	mov	r3, r0
 800186e:	2b00      	cmp	r3, #0
 8001870:	d02f      	beq.n	80018d2 <main+0x8a>
                if (safe_timer > 0) {
 8001872:	4b1b      	ldr	r3, [pc, #108]	@ (80018e0 <main+0x98>)
 8001874:	681b      	ldr	r3, [r3, #0]
 8001876:	2b00      	cmp	r3, #0
 8001878:	d00a      	beq.n	8001890 <main+0x48>
                    // Trạng thái reset: Đặt hệ thống về trạng thái an toàn tạm thời
                    updateDisplay(0.0, true);
 800187a:	2001      	movs	r0, #1
 800187c:	ed9f 0a19 	vldr	s0, [pc, #100]	@ 80018e4 <main+0x9c>
 8001880:	f7ff fc7e 	bl	8001180 <updateDisplay>
                    safe_timer--; // Giảm thời gian reset
 8001884:	4b16      	ldr	r3, [pc, #88]	@ (80018e0 <main+0x98>)
 8001886:	681b      	ldr	r3, [r3, #0]
 8001888:	3b01      	subs	r3, #1
 800188a:	4a15      	ldr	r2, [pc, #84]	@ (80018e0 <main+0x98>)
 800188c:	6013      	str	r3, [r2, #0]
 800188e:	e020      	b.n	80018d2 <main+0x8a>
                } else {
                    // Hoạt động bình thường
                    TIM2->CR1 |= TIM_CR1_CEN;  // Bật counter của TIM2
 8001890:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8001894:	681b      	ldr	r3, [r3, #0]
 8001896:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 800189a:	f043 0301 	orr.w	r3, r3, #1
 800189e:	6013      	str	r3, [r2, #0]
                    NVIC_EnableIRQ(TIM2_IRQn); // Bật ngắt của TIM2
 80018a0:	201c      	movs	r0, #28
 80018a2:	f7ff ffb3 	bl	800180c <__NVIC_EnableIRQ>

                    handleAlarm(gas_ppm);
 80018a6:	edd7 7a01 	vldr	s15, [r7, #4]
 80018aa:	eeb0 0a67 	vmov.f32	s0, s15
 80018ae:	f7ff f9ed 	bl	8000c8c <handleAlarm>
                    updateDisplay(gas_ppm, false);
 80018b2:	edd7 7a01 	vldr	s15, [r7, #4]
 80018b6:	2000      	movs	r0, #0
 80018b8:	eeb0 0a67 	vmov.f32	s0, s15
 80018bc:	f7ff fc60 	bl	8001180 <updateDisplay>
 80018c0:	e007      	b.n	80018d2 <main+0x8a>
                }
            }
        } else {
            updateDisplayStopped();
 80018c2:	f7ff fccb 	bl	800125c <updateDisplayStopped>
            GPIOB->ODR |= (1 << 4);  // LED xanh lá
 80018c6:	4b08      	ldr	r3, [pc, #32]	@ (80018e8 <main+0xa0>)
 80018c8:	695b      	ldr	r3, [r3, #20]
 80018ca:	4a07      	ldr	r2, [pc, #28]	@ (80018e8 <main+0xa0>)
 80018cc:	f043 0310 	orr.w	r3, r3, #16
 80018d0:	6153      	str	r3, [r2, #20]
        }
        delay_ms(1000);
 80018d2:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 80018d6:	f7ff fd43 	bl	8001360 <delay_ms>
        handleSystemState();
 80018da:	e7bc      	b.n	8001856 <main+0xe>
 80018dc:	20000012 	.word	0x20000012
 80018e0:	20000098 	.word	0x20000098
 80018e4:	00000000 	.word	0x00000000
 80018e8:	40020400 	.word	0x40020400

080018ec <Read_ADC1>:
#include "sensor.h"
#include "stm32f4xx.h"
#include "config.h"
#include <math.h>

static uint16_t Read_ADC1(void) {
 80018ec:	b480      	push	{r7}
 80018ee:	af00      	add	r7, sp, #0
    ADC1->SR = 0;
 80018f0:	4b0b      	ldr	r3, [pc, #44]	@ (8001920 <Read_ADC1+0x34>)
 80018f2:	2200      	movs	r2, #0
 80018f4:	601a      	str	r2, [r3, #0]
    ADC1->CR2 |= ADC_CR2_SWSTART;
 80018f6:	4b0a      	ldr	r3, [pc, #40]	@ (8001920 <Read_ADC1+0x34>)
 80018f8:	689b      	ldr	r3, [r3, #8]
 80018fa:	4a09      	ldr	r2, [pc, #36]	@ (8001920 <Read_ADC1+0x34>)
 80018fc:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8001900:	6093      	str	r3, [r2, #8]
    while (!(ADC1->SR & ADC_SR_EOC));
 8001902:	bf00      	nop
 8001904:	4b06      	ldr	r3, [pc, #24]	@ (8001920 <Read_ADC1+0x34>)
 8001906:	681b      	ldr	r3, [r3, #0]
 8001908:	f003 0302 	and.w	r3, r3, #2
 800190c:	2b00      	cmp	r3, #0
 800190e:	d0f9      	beq.n	8001904 <Read_ADC1+0x18>
    return ADC1->DR;
 8001910:	4b03      	ldr	r3, [pc, #12]	@ (8001920 <Read_ADC1+0x34>)
 8001912:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001914:	b29b      	uxth	r3, r3
}
 8001916:	4618      	mov	r0, r3
 8001918:	46bd      	mov	sp, r7
 800191a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800191e:	4770      	bx	lr
 8001920:	40012000 	.word	0x40012000
 8001924:	00000000 	.word	0x00000000

08001928 <readGasSensor>:

bool readGasSensor(float *gas_ppm) {
 8001928:	b580      	push	{r7, lr}
 800192a:	b086      	sub	sp, #24
 800192c:	af00      	add	r7, sp, #0
 800192e:	6078      	str	r0, [r7, #4]
    uint16_t adc_val = Read_ADC1();
 8001930:	f7ff ffdc 	bl	80018ec <Read_ADC1>
 8001934:	4603      	mov	r3, r0
 8001936:	827b      	strh	r3, [r7, #18]
    float adc_voltage = (adc_val / 4095.0f) * VOLTAGE_REF; // Tính điện áp đầu ra
 8001938:	8a7b      	ldrh	r3, [r7, #18]
 800193a:	ee07 3a90 	vmov	s15, r3
 800193e:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001942:	eddf 6a2b 	vldr	s13, [pc, #172]	@ 80019f0 <readGasSensor+0xc8>
 8001946:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800194a:	ed9f 7a2a 	vldr	s14, [pc, #168]	@ 80019f4 <readGasSensor+0xcc>
 800194e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001952:	edc7 7a03 	vstr	s15, [r7, #12]
    float Rs;
    if (adc_voltage > 0.0f) {
 8001956:	edd7 7a03 	vldr	s15, [r7, #12]
 800195a:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800195e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001962:	dd0c      	ble.n	800197e <readGasSensor+0x56>
        Rs = (VCC * RL / adc_voltage) - RL;
 8001964:	eddf 6a24 	vldr	s13, [pc, #144]	@ 80019f8 <readGasSensor+0xd0>
 8001968:	ed97 7a03 	vldr	s14, [r7, #12]
 800196c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001970:	ed9f 7a22 	vldr	s14, [pc, #136]	@ 80019fc <readGasSensor+0xd4>
 8001974:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8001978:	edc7 7a05 	vstr	s15, [r7, #20]
 800197c:	e002      	b.n	8001984 <readGasSensor+0x5c>
    } else {
        Rs = 0.0f;
 800197e:	f04f 0300 	mov.w	r3, #0
 8001982:	617b      	str	r3, [r7, #20]
    }
    float ratio = (R0 > 0.0f) ? (Rs / R0) : 0.0f;
 8001984:	ed97 7a05 	vldr	s14, [r7, #20]
 8001988:	eddf 6a1d 	vldr	s13, [pc, #116]	@ 8001a00 <readGasSensor+0xd8>
 800198c:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001990:	edc7 7a02 	vstr	s15, [r7, #8]
    *gas_ppm = (ratio > 0.0f) ? (100.0f * pow(ratio, -2.5f)) : 0.0f;
 8001994:	edd7 7a02 	vldr	s15, [r7, #8]
 8001998:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800199c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80019a0:	dd19      	ble.n	80019d6 <readGasSensor+0xae>
 80019a2:	68b8      	ldr	r0, [r7, #8]
 80019a4:	f7fe fdd0 	bl	8000548 <__aeabi_f2d>
 80019a8:	4602      	mov	r2, r0
 80019aa:	460b      	mov	r3, r1
 80019ac:	ed9f 1b0e 	vldr	d1, [pc, #56]	@ 80019e8 <readGasSensor+0xc0>
 80019b0:	ec43 2b10 	vmov	d0, r2, r3
 80019b4:	f000 fd8a 	bl	80024cc <pow>
 80019b8:	ec51 0b10 	vmov	r0, r1, d0
 80019bc:	f04f 0200 	mov.w	r2, #0
 80019c0:	4b10      	ldr	r3, [pc, #64]	@ (8001a04 <readGasSensor+0xdc>)
 80019c2:	f7fe fe19 	bl	80005f8 <__aeabi_dmul>
 80019c6:	4602      	mov	r2, r0
 80019c8:	460b      	mov	r3, r1
 80019ca:	4610      	mov	r0, r2
 80019cc:	4619      	mov	r1, r3
 80019ce:	f7ff f8c3 	bl	8000b58 <__aeabi_d2f>
 80019d2:	4603      	mov	r3, r0
 80019d4:	e001      	b.n	80019da <readGasSensor+0xb2>
 80019d6:	f04f 0300 	mov.w	r3, #0
 80019da:	687a      	ldr	r2, [r7, #4]
 80019dc:	6013      	str	r3, [r2, #0]

    return true;
 80019de:	2301      	movs	r3, #1
}
 80019e0:	4618      	mov	r0, r3
 80019e2:	3718      	adds	r7, #24
 80019e4:	46bd      	mov	sp, r7
 80019e6:	bd80      	pop	{r7, pc}
 80019e8:	00000000 	.word	0x00000000
 80019ec:	c0040000 	.word	0xc0040000
 80019f0:	457ff000 	.word	0x457ff000
 80019f4:	40533333 	.word	0x40533333
 80019f8:	47435000 	.word	0x47435000
 80019fc:	461c4000 	.word	0x461c4000
 8001a00:	471a5100 	.word	0x471a5100
 8001a04:	40590000 	.word	0x40590000

08001a08 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001a08:	b480      	push	{r7}
 8001a0a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001a0c:	bf00      	nop
 8001a0e:	e7fd      	b.n	8001a0c <NMI_Handler+0x4>

08001a10 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001a10:	b480      	push	{r7}
 8001a12:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001a14:	bf00      	nop
 8001a16:	e7fd      	b.n	8001a14 <HardFault_Handler+0x4>

08001a18 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001a18:	b480      	push	{r7}
 8001a1a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001a1c:	bf00      	nop
 8001a1e:	e7fd      	b.n	8001a1c <MemManage_Handler+0x4>

08001a20 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001a20:	b480      	push	{r7}
 8001a22:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001a24:	bf00      	nop
 8001a26:	e7fd      	b.n	8001a24 <BusFault_Handler+0x4>

08001a28 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001a28:	b480      	push	{r7}
 8001a2a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001a2c:	bf00      	nop
 8001a2e:	e7fd      	b.n	8001a2c <UsageFault_Handler+0x4>

08001a30 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001a30:	b480      	push	{r7}
 8001a32:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001a34:	bf00      	nop
 8001a36:	46bd      	mov	sp, r7
 8001a38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a3c:	4770      	bx	lr

08001a3e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001a3e:	b480      	push	{r7}
 8001a40:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001a42:	bf00      	nop
 8001a44:	46bd      	mov	sp, r7
 8001a46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a4a:	4770      	bx	lr

08001a4c <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001a4c:	b480      	push	{r7}
 8001a4e:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001a50:	bf00      	nop
 8001a52:	46bd      	mov	sp, r7
 8001a54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a58:	4770      	bx	lr

08001a5a <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001a5a:	b580      	push	{r7, lr}
 8001a5c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001a5e:	f000 f875 	bl	8001b4c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001a62:	bf00      	nop
 8001a64:	bd80      	pop	{r7, pc}
	...

08001a68 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001a68:	b580      	push	{r7, lr}
 8001a6a:	b086      	sub	sp, #24
 8001a6c:	af00      	add	r7, sp, #0
 8001a6e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001a70:	4a14      	ldr	r2, [pc, #80]	@ (8001ac4 <_sbrk+0x5c>)
 8001a72:	4b15      	ldr	r3, [pc, #84]	@ (8001ac8 <_sbrk+0x60>)
 8001a74:	1ad3      	subs	r3, r2, r3
 8001a76:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001a78:	697b      	ldr	r3, [r7, #20]
 8001a7a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001a7c:	4b13      	ldr	r3, [pc, #76]	@ (8001acc <_sbrk+0x64>)
 8001a7e:	681b      	ldr	r3, [r3, #0]
 8001a80:	2b00      	cmp	r3, #0
 8001a82:	d102      	bne.n	8001a8a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001a84:	4b11      	ldr	r3, [pc, #68]	@ (8001acc <_sbrk+0x64>)
 8001a86:	4a12      	ldr	r2, [pc, #72]	@ (8001ad0 <_sbrk+0x68>)
 8001a88:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001a8a:	4b10      	ldr	r3, [pc, #64]	@ (8001acc <_sbrk+0x64>)
 8001a8c:	681a      	ldr	r2, [r3, #0]
 8001a8e:	687b      	ldr	r3, [r7, #4]
 8001a90:	4413      	add	r3, r2
 8001a92:	693a      	ldr	r2, [r7, #16]
 8001a94:	429a      	cmp	r2, r3
 8001a96:	d207      	bcs.n	8001aa8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001a98:	f000 f8a0 	bl	8001bdc <__errno>
 8001a9c:	4603      	mov	r3, r0
 8001a9e:	220c      	movs	r2, #12
 8001aa0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001aa2:	f04f 33ff 	mov.w	r3, #4294967295
 8001aa6:	e009      	b.n	8001abc <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001aa8:	4b08      	ldr	r3, [pc, #32]	@ (8001acc <_sbrk+0x64>)
 8001aaa:	681b      	ldr	r3, [r3, #0]
 8001aac:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001aae:	4b07      	ldr	r3, [pc, #28]	@ (8001acc <_sbrk+0x64>)
 8001ab0:	681a      	ldr	r2, [r3, #0]
 8001ab2:	687b      	ldr	r3, [r7, #4]
 8001ab4:	4413      	add	r3, r2
 8001ab6:	4a05      	ldr	r2, [pc, #20]	@ (8001acc <_sbrk+0x64>)
 8001ab8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001aba:	68fb      	ldr	r3, [r7, #12]
}
 8001abc:	4618      	mov	r0, r3
 8001abe:	3718      	adds	r7, #24
 8001ac0:	46bd      	mov	sp, r7
 8001ac2:	bd80      	pop	{r7, pc}
 8001ac4:	20020000 	.word	0x20020000
 8001ac8:	00000400 	.word	0x00000400
 8001acc:	2000009c 	.word	0x2000009c
 8001ad0:	200001f0 	.word	0x200001f0

08001ad4 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001ad4:	b480      	push	{r7}
 8001ad6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001ad8:	4b06      	ldr	r3, [pc, #24]	@ (8001af4 <SystemInit+0x20>)
 8001ada:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001ade:	4a05      	ldr	r2, [pc, #20]	@ (8001af4 <SystemInit+0x20>)
 8001ae0:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001ae4:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001ae8:	bf00      	nop
 8001aea:	46bd      	mov	sp, r7
 8001aec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001af0:	4770      	bx	lr
 8001af2:	bf00      	nop
 8001af4:	e000ed00 	.word	0xe000ed00

08001af8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8001af8:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8001b30 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8001afc:	f7ff ffea 	bl	8001ad4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001b00:	480c      	ldr	r0, [pc, #48]	@ (8001b34 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8001b02:	490d      	ldr	r1, [pc, #52]	@ (8001b38 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001b04:	4a0d      	ldr	r2, [pc, #52]	@ (8001b3c <LoopFillZerobss+0x1a>)
  movs r3, #0
 8001b06:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001b08:	e002      	b.n	8001b10 <LoopCopyDataInit>

08001b0a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001b0a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001b0c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001b0e:	3304      	adds	r3, #4

08001b10 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001b10:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001b12:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001b14:	d3f9      	bcc.n	8001b0a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001b16:	4a0a      	ldr	r2, [pc, #40]	@ (8001b40 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001b18:	4c0a      	ldr	r4, [pc, #40]	@ (8001b44 <LoopFillZerobss+0x22>)
  movs r3, #0
 8001b1a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001b1c:	e001      	b.n	8001b22 <LoopFillZerobss>

08001b1e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001b1e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001b20:	3204      	adds	r2, #4

08001b22 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001b22:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001b24:	d3fb      	bcc.n	8001b1e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001b26:	f000 f85f 	bl	8001be8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001b2a:	f7ff fe8d 	bl	8001848 <main>
  bx  lr    
 8001b2e:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8001b30:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001b34:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001b38:	20000078 	.word	0x20000078
  ldr r2, =_sidata
 8001b3c:	080034f0 	.word	0x080034f0
  ldr r2, =_sbss
 8001b40:	20000078 	.word	0x20000078
  ldr r4, =_ebss
 8001b44:	200001ec 	.word	0x200001ec

08001b48 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001b48:	e7fe      	b.n	8001b48 <ADC_IRQHandler>
	...

08001b4c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001b4c:	b480      	push	{r7}
 8001b4e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001b50:	4b06      	ldr	r3, [pc, #24]	@ (8001b6c <HAL_IncTick+0x20>)
 8001b52:	781b      	ldrb	r3, [r3, #0]
 8001b54:	461a      	mov	r2, r3
 8001b56:	4b06      	ldr	r3, [pc, #24]	@ (8001b70 <HAL_IncTick+0x24>)
 8001b58:	681b      	ldr	r3, [r3, #0]
 8001b5a:	4413      	add	r3, r2
 8001b5c:	4a04      	ldr	r2, [pc, #16]	@ (8001b70 <HAL_IncTick+0x24>)
 8001b5e:	6013      	str	r3, [r2, #0]
}
 8001b60:	bf00      	nop
 8001b62:	46bd      	mov	sp, r7
 8001b64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b68:	4770      	bx	lr
 8001b6a:	bf00      	nop
 8001b6c:	20000013 	.word	0x20000013
 8001b70:	200000a0 	.word	0x200000a0

08001b74 <sniprintf>:
 8001b74:	b40c      	push	{r2, r3}
 8001b76:	b530      	push	{r4, r5, lr}
 8001b78:	4b17      	ldr	r3, [pc, #92]	@ (8001bd8 <sniprintf+0x64>)
 8001b7a:	1e0c      	subs	r4, r1, #0
 8001b7c:	681d      	ldr	r5, [r3, #0]
 8001b7e:	b09d      	sub	sp, #116	@ 0x74
 8001b80:	da08      	bge.n	8001b94 <sniprintf+0x20>
 8001b82:	238b      	movs	r3, #139	@ 0x8b
 8001b84:	602b      	str	r3, [r5, #0]
 8001b86:	f04f 30ff 	mov.w	r0, #4294967295
 8001b8a:	b01d      	add	sp, #116	@ 0x74
 8001b8c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8001b90:	b002      	add	sp, #8
 8001b92:	4770      	bx	lr
 8001b94:	f44f 7302 	mov.w	r3, #520	@ 0x208
 8001b98:	f8ad 3014 	strh.w	r3, [sp, #20]
 8001b9c:	bf14      	ite	ne
 8001b9e:	f104 33ff 	addne.w	r3, r4, #4294967295
 8001ba2:	4623      	moveq	r3, r4
 8001ba4:	9304      	str	r3, [sp, #16]
 8001ba6:	9307      	str	r3, [sp, #28]
 8001ba8:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8001bac:	9002      	str	r0, [sp, #8]
 8001bae:	9006      	str	r0, [sp, #24]
 8001bb0:	f8ad 3016 	strh.w	r3, [sp, #22]
 8001bb4:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 8001bb6:	ab21      	add	r3, sp, #132	@ 0x84
 8001bb8:	a902      	add	r1, sp, #8
 8001bba:	4628      	mov	r0, r5
 8001bbc:	9301      	str	r3, [sp, #4]
 8001bbe:	f000 f98d 	bl	8001edc <_svfiprintf_r>
 8001bc2:	1c43      	adds	r3, r0, #1
 8001bc4:	bfbc      	itt	lt
 8001bc6:	238b      	movlt	r3, #139	@ 0x8b
 8001bc8:	602b      	strlt	r3, [r5, #0]
 8001bca:	2c00      	cmp	r4, #0
 8001bcc:	d0dd      	beq.n	8001b8a <sniprintf+0x16>
 8001bce:	9b02      	ldr	r3, [sp, #8]
 8001bd0:	2200      	movs	r2, #0
 8001bd2:	701a      	strb	r2, [r3, #0]
 8001bd4:	e7d9      	b.n	8001b8a <sniprintf+0x16>
 8001bd6:	bf00      	nop
 8001bd8:	20000014 	.word	0x20000014

08001bdc <__errno>:
 8001bdc:	4b01      	ldr	r3, [pc, #4]	@ (8001be4 <__errno+0x8>)
 8001bde:	6818      	ldr	r0, [r3, #0]
 8001be0:	4770      	bx	lr
 8001be2:	bf00      	nop
 8001be4:	20000014 	.word	0x20000014

08001be8 <__libc_init_array>:
 8001be8:	b570      	push	{r4, r5, r6, lr}
 8001bea:	4d0d      	ldr	r5, [pc, #52]	@ (8001c20 <__libc_init_array+0x38>)
 8001bec:	4c0d      	ldr	r4, [pc, #52]	@ (8001c24 <__libc_init_array+0x3c>)
 8001bee:	1b64      	subs	r4, r4, r5
 8001bf0:	10a4      	asrs	r4, r4, #2
 8001bf2:	2600      	movs	r6, #0
 8001bf4:	42a6      	cmp	r6, r4
 8001bf6:	d109      	bne.n	8001c0c <__libc_init_array+0x24>
 8001bf8:	4d0b      	ldr	r5, [pc, #44]	@ (8001c28 <__libc_init_array+0x40>)
 8001bfa:	4c0c      	ldr	r4, [pc, #48]	@ (8001c2c <__libc_init_array+0x44>)
 8001bfc:	f001 fbc6 	bl	800338c <_init>
 8001c00:	1b64      	subs	r4, r4, r5
 8001c02:	10a4      	asrs	r4, r4, #2
 8001c04:	2600      	movs	r6, #0
 8001c06:	42a6      	cmp	r6, r4
 8001c08:	d105      	bne.n	8001c16 <__libc_init_array+0x2e>
 8001c0a:	bd70      	pop	{r4, r5, r6, pc}
 8001c0c:	f855 3b04 	ldr.w	r3, [r5], #4
 8001c10:	4798      	blx	r3
 8001c12:	3601      	adds	r6, #1
 8001c14:	e7ee      	b.n	8001bf4 <__libc_init_array+0xc>
 8001c16:	f855 3b04 	ldr.w	r3, [r5], #4
 8001c1a:	4798      	blx	r3
 8001c1c:	3601      	adds	r6, #1
 8001c1e:	e7f2      	b.n	8001c06 <__libc_init_array+0x1e>
 8001c20:	080034e8 	.word	0x080034e8
 8001c24:	080034e8 	.word	0x080034e8
 8001c28:	080034e8 	.word	0x080034e8
 8001c2c:	080034ec 	.word	0x080034ec

08001c30 <__retarget_lock_acquire_recursive>:
 8001c30:	4770      	bx	lr

08001c32 <__retarget_lock_release_recursive>:
 8001c32:	4770      	bx	lr

08001c34 <_free_r>:
 8001c34:	b538      	push	{r3, r4, r5, lr}
 8001c36:	4605      	mov	r5, r0
 8001c38:	2900      	cmp	r1, #0
 8001c3a:	d041      	beq.n	8001cc0 <_free_r+0x8c>
 8001c3c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8001c40:	1f0c      	subs	r4, r1, #4
 8001c42:	2b00      	cmp	r3, #0
 8001c44:	bfb8      	it	lt
 8001c46:	18e4      	addlt	r4, r4, r3
 8001c48:	f000 f8e0 	bl	8001e0c <__malloc_lock>
 8001c4c:	4a1d      	ldr	r2, [pc, #116]	@ (8001cc4 <_free_r+0x90>)
 8001c4e:	6813      	ldr	r3, [r2, #0]
 8001c50:	b933      	cbnz	r3, 8001c60 <_free_r+0x2c>
 8001c52:	6063      	str	r3, [r4, #4]
 8001c54:	6014      	str	r4, [r2, #0]
 8001c56:	4628      	mov	r0, r5
 8001c58:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8001c5c:	f000 b8dc 	b.w	8001e18 <__malloc_unlock>
 8001c60:	42a3      	cmp	r3, r4
 8001c62:	d908      	bls.n	8001c76 <_free_r+0x42>
 8001c64:	6820      	ldr	r0, [r4, #0]
 8001c66:	1821      	adds	r1, r4, r0
 8001c68:	428b      	cmp	r3, r1
 8001c6a:	bf01      	itttt	eq
 8001c6c:	6819      	ldreq	r1, [r3, #0]
 8001c6e:	685b      	ldreq	r3, [r3, #4]
 8001c70:	1809      	addeq	r1, r1, r0
 8001c72:	6021      	streq	r1, [r4, #0]
 8001c74:	e7ed      	b.n	8001c52 <_free_r+0x1e>
 8001c76:	461a      	mov	r2, r3
 8001c78:	685b      	ldr	r3, [r3, #4]
 8001c7a:	b10b      	cbz	r3, 8001c80 <_free_r+0x4c>
 8001c7c:	42a3      	cmp	r3, r4
 8001c7e:	d9fa      	bls.n	8001c76 <_free_r+0x42>
 8001c80:	6811      	ldr	r1, [r2, #0]
 8001c82:	1850      	adds	r0, r2, r1
 8001c84:	42a0      	cmp	r0, r4
 8001c86:	d10b      	bne.n	8001ca0 <_free_r+0x6c>
 8001c88:	6820      	ldr	r0, [r4, #0]
 8001c8a:	4401      	add	r1, r0
 8001c8c:	1850      	adds	r0, r2, r1
 8001c8e:	4283      	cmp	r3, r0
 8001c90:	6011      	str	r1, [r2, #0]
 8001c92:	d1e0      	bne.n	8001c56 <_free_r+0x22>
 8001c94:	6818      	ldr	r0, [r3, #0]
 8001c96:	685b      	ldr	r3, [r3, #4]
 8001c98:	6053      	str	r3, [r2, #4]
 8001c9a:	4408      	add	r0, r1
 8001c9c:	6010      	str	r0, [r2, #0]
 8001c9e:	e7da      	b.n	8001c56 <_free_r+0x22>
 8001ca0:	d902      	bls.n	8001ca8 <_free_r+0x74>
 8001ca2:	230c      	movs	r3, #12
 8001ca4:	602b      	str	r3, [r5, #0]
 8001ca6:	e7d6      	b.n	8001c56 <_free_r+0x22>
 8001ca8:	6820      	ldr	r0, [r4, #0]
 8001caa:	1821      	adds	r1, r4, r0
 8001cac:	428b      	cmp	r3, r1
 8001cae:	bf04      	itt	eq
 8001cb0:	6819      	ldreq	r1, [r3, #0]
 8001cb2:	685b      	ldreq	r3, [r3, #4]
 8001cb4:	6063      	str	r3, [r4, #4]
 8001cb6:	bf04      	itt	eq
 8001cb8:	1809      	addeq	r1, r1, r0
 8001cba:	6021      	streq	r1, [r4, #0]
 8001cbc:	6054      	str	r4, [r2, #4]
 8001cbe:	e7ca      	b.n	8001c56 <_free_r+0x22>
 8001cc0:	bd38      	pop	{r3, r4, r5, pc}
 8001cc2:	bf00      	nop
 8001cc4:	200001e8 	.word	0x200001e8

08001cc8 <sbrk_aligned>:
 8001cc8:	b570      	push	{r4, r5, r6, lr}
 8001cca:	4e0f      	ldr	r6, [pc, #60]	@ (8001d08 <sbrk_aligned+0x40>)
 8001ccc:	460c      	mov	r4, r1
 8001cce:	6831      	ldr	r1, [r6, #0]
 8001cd0:	4605      	mov	r5, r0
 8001cd2:	b911      	cbnz	r1, 8001cda <sbrk_aligned+0x12>
 8001cd4:	f000 fba6 	bl	8002424 <_sbrk_r>
 8001cd8:	6030      	str	r0, [r6, #0]
 8001cda:	4621      	mov	r1, r4
 8001cdc:	4628      	mov	r0, r5
 8001cde:	f000 fba1 	bl	8002424 <_sbrk_r>
 8001ce2:	1c43      	adds	r3, r0, #1
 8001ce4:	d103      	bne.n	8001cee <sbrk_aligned+0x26>
 8001ce6:	f04f 34ff 	mov.w	r4, #4294967295
 8001cea:	4620      	mov	r0, r4
 8001cec:	bd70      	pop	{r4, r5, r6, pc}
 8001cee:	1cc4      	adds	r4, r0, #3
 8001cf0:	f024 0403 	bic.w	r4, r4, #3
 8001cf4:	42a0      	cmp	r0, r4
 8001cf6:	d0f8      	beq.n	8001cea <sbrk_aligned+0x22>
 8001cf8:	1a21      	subs	r1, r4, r0
 8001cfa:	4628      	mov	r0, r5
 8001cfc:	f000 fb92 	bl	8002424 <_sbrk_r>
 8001d00:	3001      	adds	r0, #1
 8001d02:	d1f2      	bne.n	8001cea <sbrk_aligned+0x22>
 8001d04:	e7ef      	b.n	8001ce6 <sbrk_aligned+0x1e>
 8001d06:	bf00      	nop
 8001d08:	200001e4 	.word	0x200001e4

08001d0c <_malloc_r>:
 8001d0c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8001d10:	1ccd      	adds	r5, r1, #3
 8001d12:	f025 0503 	bic.w	r5, r5, #3
 8001d16:	3508      	adds	r5, #8
 8001d18:	2d0c      	cmp	r5, #12
 8001d1a:	bf38      	it	cc
 8001d1c:	250c      	movcc	r5, #12
 8001d1e:	2d00      	cmp	r5, #0
 8001d20:	4606      	mov	r6, r0
 8001d22:	db01      	blt.n	8001d28 <_malloc_r+0x1c>
 8001d24:	42a9      	cmp	r1, r5
 8001d26:	d904      	bls.n	8001d32 <_malloc_r+0x26>
 8001d28:	230c      	movs	r3, #12
 8001d2a:	6033      	str	r3, [r6, #0]
 8001d2c:	2000      	movs	r0, #0
 8001d2e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8001d32:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8001e08 <_malloc_r+0xfc>
 8001d36:	f000 f869 	bl	8001e0c <__malloc_lock>
 8001d3a:	f8d8 3000 	ldr.w	r3, [r8]
 8001d3e:	461c      	mov	r4, r3
 8001d40:	bb44      	cbnz	r4, 8001d94 <_malloc_r+0x88>
 8001d42:	4629      	mov	r1, r5
 8001d44:	4630      	mov	r0, r6
 8001d46:	f7ff ffbf 	bl	8001cc8 <sbrk_aligned>
 8001d4a:	1c43      	adds	r3, r0, #1
 8001d4c:	4604      	mov	r4, r0
 8001d4e:	d158      	bne.n	8001e02 <_malloc_r+0xf6>
 8001d50:	f8d8 4000 	ldr.w	r4, [r8]
 8001d54:	4627      	mov	r7, r4
 8001d56:	2f00      	cmp	r7, #0
 8001d58:	d143      	bne.n	8001de2 <_malloc_r+0xd6>
 8001d5a:	2c00      	cmp	r4, #0
 8001d5c:	d04b      	beq.n	8001df6 <_malloc_r+0xea>
 8001d5e:	6823      	ldr	r3, [r4, #0]
 8001d60:	4639      	mov	r1, r7
 8001d62:	4630      	mov	r0, r6
 8001d64:	eb04 0903 	add.w	r9, r4, r3
 8001d68:	f000 fb5c 	bl	8002424 <_sbrk_r>
 8001d6c:	4581      	cmp	r9, r0
 8001d6e:	d142      	bne.n	8001df6 <_malloc_r+0xea>
 8001d70:	6821      	ldr	r1, [r4, #0]
 8001d72:	1a6d      	subs	r5, r5, r1
 8001d74:	4629      	mov	r1, r5
 8001d76:	4630      	mov	r0, r6
 8001d78:	f7ff ffa6 	bl	8001cc8 <sbrk_aligned>
 8001d7c:	3001      	adds	r0, #1
 8001d7e:	d03a      	beq.n	8001df6 <_malloc_r+0xea>
 8001d80:	6823      	ldr	r3, [r4, #0]
 8001d82:	442b      	add	r3, r5
 8001d84:	6023      	str	r3, [r4, #0]
 8001d86:	f8d8 3000 	ldr.w	r3, [r8]
 8001d8a:	685a      	ldr	r2, [r3, #4]
 8001d8c:	bb62      	cbnz	r2, 8001de8 <_malloc_r+0xdc>
 8001d8e:	f8c8 7000 	str.w	r7, [r8]
 8001d92:	e00f      	b.n	8001db4 <_malloc_r+0xa8>
 8001d94:	6822      	ldr	r2, [r4, #0]
 8001d96:	1b52      	subs	r2, r2, r5
 8001d98:	d420      	bmi.n	8001ddc <_malloc_r+0xd0>
 8001d9a:	2a0b      	cmp	r2, #11
 8001d9c:	d917      	bls.n	8001dce <_malloc_r+0xc2>
 8001d9e:	1961      	adds	r1, r4, r5
 8001da0:	42a3      	cmp	r3, r4
 8001da2:	6025      	str	r5, [r4, #0]
 8001da4:	bf18      	it	ne
 8001da6:	6059      	strne	r1, [r3, #4]
 8001da8:	6863      	ldr	r3, [r4, #4]
 8001daa:	bf08      	it	eq
 8001dac:	f8c8 1000 	streq.w	r1, [r8]
 8001db0:	5162      	str	r2, [r4, r5]
 8001db2:	604b      	str	r3, [r1, #4]
 8001db4:	4630      	mov	r0, r6
 8001db6:	f000 f82f 	bl	8001e18 <__malloc_unlock>
 8001dba:	f104 000b 	add.w	r0, r4, #11
 8001dbe:	1d23      	adds	r3, r4, #4
 8001dc0:	f020 0007 	bic.w	r0, r0, #7
 8001dc4:	1ac2      	subs	r2, r0, r3
 8001dc6:	bf1c      	itt	ne
 8001dc8:	1a1b      	subne	r3, r3, r0
 8001dca:	50a3      	strne	r3, [r4, r2]
 8001dcc:	e7af      	b.n	8001d2e <_malloc_r+0x22>
 8001dce:	6862      	ldr	r2, [r4, #4]
 8001dd0:	42a3      	cmp	r3, r4
 8001dd2:	bf0c      	ite	eq
 8001dd4:	f8c8 2000 	streq.w	r2, [r8]
 8001dd8:	605a      	strne	r2, [r3, #4]
 8001dda:	e7eb      	b.n	8001db4 <_malloc_r+0xa8>
 8001ddc:	4623      	mov	r3, r4
 8001dde:	6864      	ldr	r4, [r4, #4]
 8001de0:	e7ae      	b.n	8001d40 <_malloc_r+0x34>
 8001de2:	463c      	mov	r4, r7
 8001de4:	687f      	ldr	r7, [r7, #4]
 8001de6:	e7b6      	b.n	8001d56 <_malloc_r+0x4a>
 8001de8:	461a      	mov	r2, r3
 8001dea:	685b      	ldr	r3, [r3, #4]
 8001dec:	42a3      	cmp	r3, r4
 8001dee:	d1fb      	bne.n	8001de8 <_malloc_r+0xdc>
 8001df0:	2300      	movs	r3, #0
 8001df2:	6053      	str	r3, [r2, #4]
 8001df4:	e7de      	b.n	8001db4 <_malloc_r+0xa8>
 8001df6:	230c      	movs	r3, #12
 8001df8:	6033      	str	r3, [r6, #0]
 8001dfa:	4630      	mov	r0, r6
 8001dfc:	f000 f80c 	bl	8001e18 <__malloc_unlock>
 8001e00:	e794      	b.n	8001d2c <_malloc_r+0x20>
 8001e02:	6005      	str	r5, [r0, #0]
 8001e04:	e7d6      	b.n	8001db4 <_malloc_r+0xa8>
 8001e06:	bf00      	nop
 8001e08:	200001e8 	.word	0x200001e8

08001e0c <__malloc_lock>:
 8001e0c:	4801      	ldr	r0, [pc, #4]	@ (8001e14 <__malloc_lock+0x8>)
 8001e0e:	f7ff bf0f 	b.w	8001c30 <__retarget_lock_acquire_recursive>
 8001e12:	bf00      	nop
 8001e14:	200001e0 	.word	0x200001e0

08001e18 <__malloc_unlock>:
 8001e18:	4801      	ldr	r0, [pc, #4]	@ (8001e20 <__malloc_unlock+0x8>)
 8001e1a:	f7ff bf0a 	b.w	8001c32 <__retarget_lock_release_recursive>
 8001e1e:	bf00      	nop
 8001e20:	200001e0 	.word	0x200001e0

08001e24 <__ssputs_r>:
 8001e24:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8001e28:	688e      	ldr	r6, [r1, #8]
 8001e2a:	461f      	mov	r7, r3
 8001e2c:	42be      	cmp	r6, r7
 8001e2e:	680b      	ldr	r3, [r1, #0]
 8001e30:	4682      	mov	sl, r0
 8001e32:	460c      	mov	r4, r1
 8001e34:	4690      	mov	r8, r2
 8001e36:	d82d      	bhi.n	8001e94 <__ssputs_r+0x70>
 8001e38:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8001e3c:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8001e40:	d026      	beq.n	8001e90 <__ssputs_r+0x6c>
 8001e42:	6965      	ldr	r5, [r4, #20]
 8001e44:	6909      	ldr	r1, [r1, #16]
 8001e46:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8001e4a:	eba3 0901 	sub.w	r9, r3, r1
 8001e4e:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8001e52:	1c7b      	adds	r3, r7, #1
 8001e54:	444b      	add	r3, r9
 8001e56:	106d      	asrs	r5, r5, #1
 8001e58:	429d      	cmp	r5, r3
 8001e5a:	bf38      	it	cc
 8001e5c:	461d      	movcc	r5, r3
 8001e5e:	0553      	lsls	r3, r2, #21
 8001e60:	d527      	bpl.n	8001eb2 <__ssputs_r+0x8e>
 8001e62:	4629      	mov	r1, r5
 8001e64:	f7ff ff52 	bl	8001d0c <_malloc_r>
 8001e68:	4606      	mov	r6, r0
 8001e6a:	b360      	cbz	r0, 8001ec6 <__ssputs_r+0xa2>
 8001e6c:	6921      	ldr	r1, [r4, #16]
 8001e6e:	464a      	mov	r2, r9
 8001e70:	f000 fae8 	bl	8002444 <memcpy>
 8001e74:	89a3      	ldrh	r3, [r4, #12]
 8001e76:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8001e7a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001e7e:	81a3      	strh	r3, [r4, #12]
 8001e80:	6126      	str	r6, [r4, #16]
 8001e82:	6165      	str	r5, [r4, #20]
 8001e84:	444e      	add	r6, r9
 8001e86:	eba5 0509 	sub.w	r5, r5, r9
 8001e8a:	6026      	str	r6, [r4, #0]
 8001e8c:	60a5      	str	r5, [r4, #8]
 8001e8e:	463e      	mov	r6, r7
 8001e90:	42be      	cmp	r6, r7
 8001e92:	d900      	bls.n	8001e96 <__ssputs_r+0x72>
 8001e94:	463e      	mov	r6, r7
 8001e96:	6820      	ldr	r0, [r4, #0]
 8001e98:	4632      	mov	r2, r6
 8001e9a:	4641      	mov	r1, r8
 8001e9c:	f000 faa8 	bl	80023f0 <memmove>
 8001ea0:	68a3      	ldr	r3, [r4, #8]
 8001ea2:	1b9b      	subs	r3, r3, r6
 8001ea4:	60a3      	str	r3, [r4, #8]
 8001ea6:	6823      	ldr	r3, [r4, #0]
 8001ea8:	4433      	add	r3, r6
 8001eaa:	6023      	str	r3, [r4, #0]
 8001eac:	2000      	movs	r0, #0
 8001eae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8001eb2:	462a      	mov	r2, r5
 8001eb4:	f000 fad4 	bl	8002460 <_realloc_r>
 8001eb8:	4606      	mov	r6, r0
 8001eba:	2800      	cmp	r0, #0
 8001ebc:	d1e0      	bne.n	8001e80 <__ssputs_r+0x5c>
 8001ebe:	6921      	ldr	r1, [r4, #16]
 8001ec0:	4650      	mov	r0, sl
 8001ec2:	f7ff feb7 	bl	8001c34 <_free_r>
 8001ec6:	230c      	movs	r3, #12
 8001ec8:	f8ca 3000 	str.w	r3, [sl]
 8001ecc:	89a3      	ldrh	r3, [r4, #12]
 8001ece:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8001ed2:	81a3      	strh	r3, [r4, #12]
 8001ed4:	f04f 30ff 	mov.w	r0, #4294967295
 8001ed8:	e7e9      	b.n	8001eae <__ssputs_r+0x8a>
	...

08001edc <_svfiprintf_r>:
 8001edc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001ee0:	4698      	mov	r8, r3
 8001ee2:	898b      	ldrh	r3, [r1, #12]
 8001ee4:	061b      	lsls	r3, r3, #24
 8001ee6:	b09d      	sub	sp, #116	@ 0x74
 8001ee8:	4607      	mov	r7, r0
 8001eea:	460d      	mov	r5, r1
 8001eec:	4614      	mov	r4, r2
 8001eee:	d510      	bpl.n	8001f12 <_svfiprintf_r+0x36>
 8001ef0:	690b      	ldr	r3, [r1, #16]
 8001ef2:	b973      	cbnz	r3, 8001f12 <_svfiprintf_r+0x36>
 8001ef4:	2140      	movs	r1, #64	@ 0x40
 8001ef6:	f7ff ff09 	bl	8001d0c <_malloc_r>
 8001efa:	6028      	str	r0, [r5, #0]
 8001efc:	6128      	str	r0, [r5, #16]
 8001efe:	b930      	cbnz	r0, 8001f0e <_svfiprintf_r+0x32>
 8001f00:	230c      	movs	r3, #12
 8001f02:	603b      	str	r3, [r7, #0]
 8001f04:	f04f 30ff 	mov.w	r0, #4294967295
 8001f08:	b01d      	add	sp, #116	@ 0x74
 8001f0a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8001f0e:	2340      	movs	r3, #64	@ 0x40
 8001f10:	616b      	str	r3, [r5, #20]
 8001f12:	2300      	movs	r3, #0
 8001f14:	9309      	str	r3, [sp, #36]	@ 0x24
 8001f16:	2320      	movs	r3, #32
 8001f18:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8001f1c:	f8cd 800c 	str.w	r8, [sp, #12]
 8001f20:	2330      	movs	r3, #48	@ 0x30
 8001f22:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 80020c0 <_svfiprintf_r+0x1e4>
 8001f26:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8001f2a:	f04f 0901 	mov.w	r9, #1
 8001f2e:	4623      	mov	r3, r4
 8001f30:	469a      	mov	sl, r3
 8001f32:	f813 2b01 	ldrb.w	r2, [r3], #1
 8001f36:	b10a      	cbz	r2, 8001f3c <_svfiprintf_r+0x60>
 8001f38:	2a25      	cmp	r2, #37	@ 0x25
 8001f3a:	d1f9      	bne.n	8001f30 <_svfiprintf_r+0x54>
 8001f3c:	ebba 0b04 	subs.w	fp, sl, r4
 8001f40:	d00b      	beq.n	8001f5a <_svfiprintf_r+0x7e>
 8001f42:	465b      	mov	r3, fp
 8001f44:	4622      	mov	r2, r4
 8001f46:	4629      	mov	r1, r5
 8001f48:	4638      	mov	r0, r7
 8001f4a:	f7ff ff6b 	bl	8001e24 <__ssputs_r>
 8001f4e:	3001      	adds	r0, #1
 8001f50:	f000 80a7 	beq.w	80020a2 <_svfiprintf_r+0x1c6>
 8001f54:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8001f56:	445a      	add	r2, fp
 8001f58:	9209      	str	r2, [sp, #36]	@ 0x24
 8001f5a:	f89a 3000 	ldrb.w	r3, [sl]
 8001f5e:	2b00      	cmp	r3, #0
 8001f60:	f000 809f 	beq.w	80020a2 <_svfiprintf_r+0x1c6>
 8001f64:	2300      	movs	r3, #0
 8001f66:	f04f 32ff 	mov.w	r2, #4294967295
 8001f6a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8001f6e:	f10a 0a01 	add.w	sl, sl, #1
 8001f72:	9304      	str	r3, [sp, #16]
 8001f74:	9307      	str	r3, [sp, #28]
 8001f76:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8001f7a:	931a      	str	r3, [sp, #104]	@ 0x68
 8001f7c:	4654      	mov	r4, sl
 8001f7e:	2205      	movs	r2, #5
 8001f80:	f814 1b01 	ldrb.w	r1, [r4], #1
 8001f84:	484e      	ldr	r0, [pc, #312]	@ (80020c0 <_svfiprintf_r+0x1e4>)
 8001f86:	f7fe f92b 	bl	80001e0 <memchr>
 8001f8a:	9a04      	ldr	r2, [sp, #16]
 8001f8c:	b9d8      	cbnz	r0, 8001fc6 <_svfiprintf_r+0xea>
 8001f8e:	06d0      	lsls	r0, r2, #27
 8001f90:	bf44      	itt	mi
 8001f92:	2320      	movmi	r3, #32
 8001f94:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8001f98:	0711      	lsls	r1, r2, #28
 8001f9a:	bf44      	itt	mi
 8001f9c:	232b      	movmi	r3, #43	@ 0x2b
 8001f9e:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8001fa2:	f89a 3000 	ldrb.w	r3, [sl]
 8001fa6:	2b2a      	cmp	r3, #42	@ 0x2a
 8001fa8:	d015      	beq.n	8001fd6 <_svfiprintf_r+0xfa>
 8001faa:	9a07      	ldr	r2, [sp, #28]
 8001fac:	4654      	mov	r4, sl
 8001fae:	2000      	movs	r0, #0
 8001fb0:	f04f 0c0a 	mov.w	ip, #10
 8001fb4:	4621      	mov	r1, r4
 8001fb6:	f811 3b01 	ldrb.w	r3, [r1], #1
 8001fba:	3b30      	subs	r3, #48	@ 0x30
 8001fbc:	2b09      	cmp	r3, #9
 8001fbe:	d94b      	bls.n	8002058 <_svfiprintf_r+0x17c>
 8001fc0:	b1b0      	cbz	r0, 8001ff0 <_svfiprintf_r+0x114>
 8001fc2:	9207      	str	r2, [sp, #28]
 8001fc4:	e014      	b.n	8001ff0 <_svfiprintf_r+0x114>
 8001fc6:	eba0 0308 	sub.w	r3, r0, r8
 8001fca:	fa09 f303 	lsl.w	r3, r9, r3
 8001fce:	4313      	orrs	r3, r2
 8001fd0:	9304      	str	r3, [sp, #16]
 8001fd2:	46a2      	mov	sl, r4
 8001fd4:	e7d2      	b.n	8001f7c <_svfiprintf_r+0xa0>
 8001fd6:	9b03      	ldr	r3, [sp, #12]
 8001fd8:	1d19      	adds	r1, r3, #4
 8001fda:	681b      	ldr	r3, [r3, #0]
 8001fdc:	9103      	str	r1, [sp, #12]
 8001fde:	2b00      	cmp	r3, #0
 8001fe0:	bfbb      	ittet	lt
 8001fe2:	425b      	neglt	r3, r3
 8001fe4:	f042 0202 	orrlt.w	r2, r2, #2
 8001fe8:	9307      	strge	r3, [sp, #28]
 8001fea:	9307      	strlt	r3, [sp, #28]
 8001fec:	bfb8      	it	lt
 8001fee:	9204      	strlt	r2, [sp, #16]
 8001ff0:	7823      	ldrb	r3, [r4, #0]
 8001ff2:	2b2e      	cmp	r3, #46	@ 0x2e
 8001ff4:	d10a      	bne.n	800200c <_svfiprintf_r+0x130>
 8001ff6:	7863      	ldrb	r3, [r4, #1]
 8001ff8:	2b2a      	cmp	r3, #42	@ 0x2a
 8001ffa:	d132      	bne.n	8002062 <_svfiprintf_r+0x186>
 8001ffc:	9b03      	ldr	r3, [sp, #12]
 8001ffe:	1d1a      	adds	r2, r3, #4
 8002000:	681b      	ldr	r3, [r3, #0]
 8002002:	9203      	str	r2, [sp, #12]
 8002004:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8002008:	3402      	adds	r4, #2
 800200a:	9305      	str	r3, [sp, #20]
 800200c:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 80020d0 <_svfiprintf_r+0x1f4>
 8002010:	7821      	ldrb	r1, [r4, #0]
 8002012:	2203      	movs	r2, #3
 8002014:	4650      	mov	r0, sl
 8002016:	f7fe f8e3 	bl	80001e0 <memchr>
 800201a:	b138      	cbz	r0, 800202c <_svfiprintf_r+0x150>
 800201c:	9b04      	ldr	r3, [sp, #16]
 800201e:	eba0 000a 	sub.w	r0, r0, sl
 8002022:	2240      	movs	r2, #64	@ 0x40
 8002024:	4082      	lsls	r2, r0
 8002026:	4313      	orrs	r3, r2
 8002028:	3401      	adds	r4, #1
 800202a:	9304      	str	r3, [sp, #16]
 800202c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8002030:	4824      	ldr	r0, [pc, #144]	@ (80020c4 <_svfiprintf_r+0x1e8>)
 8002032:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8002036:	2206      	movs	r2, #6
 8002038:	f7fe f8d2 	bl	80001e0 <memchr>
 800203c:	2800      	cmp	r0, #0
 800203e:	d036      	beq.n	80020ae <_svfiprintf_r+0x1d2>
 8002040:	4b21      	ldr	r3, [pc, #132]	@ (80020c8 <_svfiprintf_r+0x1ec>)
 8002042:	bb1b      	cbnz	r3, 800208c <_svfiprintf_r+0x1b0>
 8002044:	9b03      	ldr	r3, [sp, #12]
 8002046:	3307      	adds	r3, #7
 8002048:	f023 0307 	bic.w	r3, r3, #7
 800204c:	3308      	adds	r3, #8
 800204e:	9303      	str	r3, [sp, #12]
 8002050:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8002052:	4433      	add	r3, r6
 8002054:	9309      	str	r3, [sp, #36]	@ 0x24
 8002056:	e76a      	b.n	8001f2e <_svfiprintf_r+0x52>
 8002058:	fb0c 3202 	mla	r2, ip, r2, r3
 800205c:	460c      	mov	r4, r1
 800205e:	2001      	movs	r0, #1
 8002060:	e7a8      	b.n	8001fb4 <_svfiprintf_r+0xd8>
 8002062:	2300      	movs	r3, #0
 8002064:	3401      	adds	r4, #1
 8002066:	9305      	str	r3, [sp, #20]
 8002068:	4619      	mov	r1, r3
 800206a:	f04f 0c0a 	mov.w	ip, #10
 800206e:	4620      	mov	r0, r4
 8002070:	f810 2b01 	ldrb.w	r2, [r0], #1
 8002074:	3a30      	subs	r2, #48	@ 0x30
 8002076:	2a09      	cmp	r2, #9
 8002078:	d903      	bls.n	8002082 <_svfiprintf_r+0x1a6>
 800207a:	2b00      	cmp	r3, #0
 800207c:	d0c6      	beq.n	800200c <_svfiprintf_r+0x130>
 800207e:	9105      	str	r1, [sp, #20]
 8002080:	e7c4      	b.n	800200c <_svfiprintf_r+0x130>
 8002082:	fb0c 2101 	mla	r1, ip, r1, r2
 8002086:	4604      	mov	r4, r0
 8002088:	2301      	movs	r3, #1
 800208a:	e7f0      	b.n	800206e <_svfiprintf_r+0x192>
 800208c:	ab03      	add	r3, sp, #12
 800208e:	9300      	str	r3, [sp, #0]
 8002090:	462a      	mov	r2, r5
 8002092:	4b0e      	ldr	r3, [pc, #56]	@ (80020cc <_svfiprintf_r+0x1f0>)
 8002094:	a904      	add	r1, sp, #16
 8002096:	4638      	mov	r0, r7
 8002098:	f3af 8000 	nop.w
 800209c:	1c42      	adds	r2, r0, #1
 800209e:	4606      	mov	r6, r0
 80020a0:	d1d6      	bne.n	8002050 <_svfiprintf_r+0x174>
 80020a2:	89ab      	ldrh	r3, [r5, #12]
 80020a4:	065b      	lsls	r3, r3, #25
 80020a6:	f53f af2d 	bmi.w	8001f04 <_svfiprintf_r+0x28>
 80020aa:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80020ac:	e72c      	b.n	8001f08 <_svfiprintf_r+0x2c>
 80020ae:	ab03      	add	r3, sp, #12
 80020b0:	9300      	str	r3, [sp, #0]
 80020b2:	462a      	mov	r2, r5
 80020b4:	4b05      	ldr	r3, [pc, #20]	@ (80020cc <_svfiprintf_r+0x1f0>)
 80020b6:	a904      	add	r1, sp, #16
 80020b8:	4638      	mov	r0, r7
 80020ba:	f000 f879 	bl	80021b0 <_printf_i>
 80020be:	e7ed      	b.n	800209c <_svfiprintf_r+0x1c0>
 80020c0:	0800347d 	.word	0x0800347d
 80020c4:	08003487 	.word	0x08003487
 80020c8:	00000000 	.word	0x00000000
 80020cc:	08001e25 	.word	0x08001e25
 80020d0:	08003483 	.word	0x08003483

080020d4 <_printf_common>:
 80020d4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80020d8:	4616      	mov	r6, r2
 80020da:	4698      	mov	r8, r3
 80020dc:	688a      	ldr	r2, [r1, #8]
 80020de:	690b      	ldr	r3, [r1, #16]
 80020e0:	f8dd 9020 	ldr.w	r9, [sp, #32]
 80020e4:	4293      	cmp	r3, r2
 80020e6:	bfb8      	it	lt
 80020e8:	4613      	movlt	r3, r2
 80020ea:	6033      	str	r3, [r6, #0]
 80020ec:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 80020f0:	4607      	mov	r7, r0
 80020f2:	460c      	mov	r4, r1
 80020f4:	b10a      	cbz	r2, 80020fa <_printf_common+0x26>
 80020f6:	3301      	adds	r3, #1
 80020f8:	6033      	str	r3, [r6, #0]
 80020fa:	6823      	ldr	r3, [r4, #0]
 80020fc:	0699      	lsls	r1, r3, #26
 80020fe:	bf42      	ittt	mi
 8002100:	6833      	ldrmi	r3, [r6, #0]
 8002102:	3302      	addmi	r3, #2
 8002104:	6033      	strmi	r3, [r6, #0]
 8002106:	6825      	ldr	r5, [r4, #0]
 8002108:	f015 0506 	ands.w	r5, r5, #6
 800210c:	d106      	bne.n	800211c <_printf_common+0x48>
 800210e:	f104 0a19 	add.w	sl, r4, #25
 8002112:	68e3      	ldr	r3, [r4, #12]
 8002114:	6832      	ldr	r2, [r6, #0]
 8002116:	1a9b      	subs	r3, r3, r2
 8002118:	42ab      	cmp	r3, r5
 800211a:	dc26      	bgt.n	800216a <_printf_common+0x96>
 800211c:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8002120:	6822      	ldr	r2, [r4, #0]
 8002122:	3b00      	subs	r3, #0
 8002124:	bf18      	it	ne
 8002126:	2301      	movne	r3, #1
 8002128:	0692      	lsls	r2, r2, #26
 800212a:	d42b      	bmi.n	8002184 <_printf_common+0xb0>
 800212c:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8002130:	4641      	mov	r1, r8
 8002132:	4638      	mov	r0, r7
 8002134:	47c8      	blx	r9
 8002136:	3001      	adds	r0, #1
 8002138:	d01e      	beq.n	8002178 <_printf_common+0xa4>
 800213a:	6823      	ldr	r3, [r4, #0]
 800213c:	6922      	ldr	r2, [r4, #16]
 800213e:	f003 0306 	and.w	r3, r3, #6
 8002142:	2b04      	cmp	r3, #4
 8002144:	bf02      	ittt	eq
 8002146:	68e5      	ldreq	r5, [r4, #12]
 8002148:	6833      	ldreq	r3, [r6, #0]
 800214a:	1aed      	subeq	r5, r5, r3
 800214c:	68a3      	ldr	r3, [r4, #8]
 800214e:	bf0c      	ite	eq
 8002150:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8002154:	2500      	movne	r5, #0
 8002156:	4293      	cmp	r3, r2
 8002158:	bfc4      	itt	gt
 800215a:	1a9b      	subgt	r3, r3, r2
 800215c:	18ed      	addgt	r5, r5, r3
 800215e:	2600      	movs	r6, #0
 8002160:	341a      	adds	r4, #26
 8002162:	42b5      	cmp	r5, r6
 8002164:	d11a      	bne.n	800219c <_printf_common+0xc8>
 8002166:	2000      	movs	r0, #0
 8002168:	e008      	b.n	800217c <_printf_common+0xa8>
 800216a:	2301      	movs	r3, #1
 800216c:	4652      	mov	r2, sl
 800216e:	4641      	mov	r1, r8
 8002170:	4638      	mov	r0, r7
 8002172:	47c8      	blx	r9
 8002174:	3001      	adds	r0, #1
 8002176:	d103      	bne.n	8002180 <_printf_common+0xac>
 8002178:	f04f 30ff 	mov.w	r0, #4294967295
 800217c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8002180:	3501      	adds	r5, #1
 8002182:	e7c6      	b.n	8002112 <_printf_common+0x3e>
 8002184:	18e1      	adds	r1, r4, r3
 8002186:	1c5a      	adds	r2, r3, #1
 8002188:	2030      	movs	r0, #48	@ 0x30
 800218a:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800218e:	4422      	add	r2, r4
 8002190:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8002194:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8002198:	3302      	adds	r3, #2
 800219a:	e7c7      	b.n	800212c <_printf_common+0x58>
 800219c:	2301      	movs	r3, #1
 800219e:	4622      	mov	r2, r4
 80021a0:	4641      	mov	r1, r8
 80021a2:	4638      	mov	r0, r7
 80021a4:	47c8      	blx	r9
 80021a6:	3001      	adds	r0, #1
 80021a8:	d0e6      	beq.n	8002178 <_printf_common+0xa4>
 80021aa:	3601      	adds	r6, #1
 80021ac:	e7d9      	b.n	8002162 <_printf_common+0x8e>
	...

080021b0 <_printf_i>:
 80021b0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80021b4:	7e0f      	ldrb	r7, [r1, #24]
 80021b6:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 80021b8:	2f78      	cmp	r7, #120	@ 0x78
 80021ba:	4691      	mov	r9, r2
 80021bc:	4680      	mov	r8, r0
 80021be:	460c      	mov	r4, r1
 80021c0:	469a      	mov	sl, r3
 80021c2:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 80021c6:	d807      	bhi.n	80021d8 <_printf_i+0x28>
 80021c8:	2f62      	cmp	r7, #98	@ 0x62
 80021ca:	d80a      	bhi.n	80021e2 <_printf_i+0x32>
 80021cc:	2f00      	cmp	r7, #0
 80021ce:	f000 80d2 	beq.w	8002376 <_printf_i+0x1c6>
 80021d2:	2f58      	cmp	r7, #88	@ 0x58
 80021d4:	f000 80b9 	beq.w	800234a <_printf_i+0x19a>
 80021d8:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80021dc:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 80021e0:	e03a      	b.n	8002258 <_printf_i+0xa8>
 80021e2:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 80021e6:	2b15      	cmp	r3, #21
 80021e8:	d8f6      	bhi.n	80021d8 <_printf_i+0x28>
 80021ea:	a101      	add	r1, pc, #4	@ (adr r1, 80021f0 <_printf_i+0x40>)
 80021ec:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80021f0:	08002249 	.word	0x08002249
 80021f4:	0800225d 	.word	0x0800225d
 80021f8:	080021d9 	.word	0x080021d9
 80021fc:	080021d9 	.word	0x080021d9
 8002200:	080021d9 	.word	0x080021d9
 8002204:	080021d9 	.word	0x080021d9
 8002208:	0800225d 	.word	0x0800225d
 800220c:	080021d9 	.word	0x080021d9
 8002210:	080021d9 	.word	0x080021d9
 8002214:	080021d9 	.word	0x080021d9
 8002218:	080021d9 	.word	0x080021d9
 800221c:	0800235d 	.word	0x0800235d
 8002220:	08002287 	.word	0x08002287
 8002224:	08002317 	.word	0x08002317
 8002228:	080021d9 	.word	0x080021d9
 800222c:	080021d9 	.word	0x080021d9
 8002230:	0800237f 	.word	0x0800237f
 8002234:	080021d9 	.word	0x080021d9
 8002238:	08002287 	.word	0x08002287
 800223c:	080021d9 	.word	0x080021d9
 8002240:	080021d9 	.word	0x080021d9
 8002244:	0800231f 	.word	0x0800231f
 8002248:	6833      	ldr	r3, [r6, #0]
 800224a:	1d1a      	adds	r2, r3, #4
 800224c:	681b      	ldr	r3, [r3, #0]
 800224e:	6032      	str	r2, [r6, #0]
 8002250:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8002254:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8002258:	2301      	movs	r3, #1
 800225a:	e09d      	b.n	8002398 <_printf_i+0x1e8>
 800225c:	6833      	ldr	r3, [r6, #0]
 800225e:	6820      	ldr	r0, [r4, #0]
 8002260:	1d19      	adds	r1, r3, #4
 8002262:	6031      	str	r1, [r6, #0]
 8002264:	0606      	lsls	r6, r0, #24
 8002266:	d501      	bpl.n	800226c <_printf_i+0xbc>
 8002268:	681d      	ldr	r5, [r3, #0]
 800226a:	e003      	b.n	8002274 <_printf_i+0xc4>
 800226c:	0645      	lsls	r5, r0, #25
 800226e:	d5fb      	bpl.n	8002268 <_printf_i+0xb8>
 8002270:	f9b3 5000 	ldrsh.w	r5, [r3]
 8002274:	2d00      	cmp	r5, #0
 8002276:	da03      	bge.n	8002280 <_printf_i+0xd0>
 8002278:	232d      	movs	r3, #45	@ 0x2d
 800227a:	426d      	negs	r5, r5
 800227c:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8002280:	4859      	ldr	r0, [pc, #356]	@ (80023e8 <_printf_i+0x238>)
 8002282:	230a      	movs	r3, #10
 8002284:	e011      	b.n	80022aa <_printf_i+0xfa>
 8002286:	6821      	ldr	r1, [r4, #0]
 8002288:	6833      	ldr	r3, [r6, #0]
 800228a:	0608      	lsls	r0, r1, #24
 800228c:	f853 5b04 	ldr.w	r5, [r3], #4
 8002290:	d402      	bmi.n	8002298 <_printf_i+0xe8>
 8002292:	0649      	lsls	r1, r1, #25
 8002294:	bf48      	it	mi
 8002296:	b2ad      	uxthmi	r5, r5
 8002298:	2f6f      	cmp	r7, #111	@ 0x6f
 800229a:	4853      	ldr	r0, [pc, #332]	@ (80023e8 <_printf_i+0x238>)
 800229c:	6033      	str	r3, [r6, #0]
 800229e:	bf14      	ite	ne
 80022a0:	230a      	movne	r3, #10
 80022a2:	2308      	moveq	r3, #8
 80022a4:	2100      	movs	r1, #0
 80022a6:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 80022aa:	6866      	ldr	r6, [r4, #4]
 80022ac:	60a6      	str	r6, [r4, #8]
 80022ae:	2e00      	cmp	r6, #0
 80022b0:	bfa2      	ittt	ge
 80022b2:	6821      	ldrge	r1, [r4, #0]
 80022b4:	f021 0104 	bicge.w	r1, r1, #4
 80022b8:	6021      	strge	r1, [r4, #0]
 80022ba:	b90d      	cbnz	r5, 80022c0 <_printf_i+0x110>
 80022bc:	2e00      	cmp	r6, #0
 80022be:	d04b      	beq.n	8002358 <_printf_i+0x1a8>
 80022c0:	4616      	mov	r6, r2
 80022c2:	fbb5 f1f3 	udiv	r1, r5, r3
 80022c6:	fb03 5711 	mls	r7, r3, r1, r5
 80022ca:	5dc7      	ldrb	r7, [r0, r7]
 80022cc:	f806 7d01 	strb.w	r7, [r6, #-1]!
 80022d0:	462f      	mov	r7, r5
 80022d2:	42bb      	cmp	r3, r7
 80022d4:	460d      	mov	r5, r1
 80022d6:	d9f4      	bls.n	80022c2 <_printf_i+0x112>
 80022d8:	2b08      	cmp	r3, #8
 80022da:	d10b      	bne.n	80022f4 <_printf_i+0x144>
 80022dc:	6823      	ldr	r3, [r4, #0]
 80022de:	07df      	lsls	r7, r3, #31
 80022e0:	d508      	bpl.n	80022f4 <_printf_i+0x144>
 80022e2:	6923      	ldr	r3, [r4, #16]
 80022e4:	6861      	ldr	r1, [r4, #4]
 80022e6:	4299      	cmp	r1, r3
 80022e8:	bfde      	ittt	le
 80022ea:	2330      	movle	r3, #48	@ 0x30
 80022ec:	f806 3c01 	strble.w	r3, [r6, #-1]
 80022f0:	f106 36ff 	addle.w	r6, r6, #4294967295
 80022f4:	1b92      	subs	r2, r2, r6
 80022f6:	6122      	str	r2, [r4, #16]
 80022f8:	f8cd a000 	str.w	sl, [sp]
 80022fc:	464b      	mov	r3, r9
 80022fe:	aa03      	add	r2, sp, #12
 8002300:	4621      	mov	r1, r4
 8002302:	4640      	mov	r0, r8
 8002304:	f7ff fee6 	bl	80020d4 <_printf_common>
 8002308:	3001      	adds	r0, #1
 800230a:	d14a      	bne.n	80023a2 <_printf_i+0x1f2>
 800230c:	f04f 30ff 	mov.w	r0, #4294967295
 8002310:	b004      	add	sp, #16
 8002312:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8002316:	6823      	ldr	r3, [r4, #0]
 8002318:	f043 0320 	orr.w	r3, r3, #32
 800231c:	6023      	str	r3, [r4, #0]
 800231e:	4833      	ldr	r0, [pc, #204]	@ (80023ec <_printf_i+0x23c>)
 8002320:	2778      	movs	r7, #120	@ 0x78
 8002322:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8002326:	6823      	ldr	r3, [r4, #0]
 8002328:	6831      	ldr	r1, [r6, #0]
 800232a:	061f      	lsls	r7, r3, #24
 800232c:	f851 5b04 	ldr.w	r5, [r1], #4
 8002330:	d402      	bmi.n	8002338 <_printf_i+0x188>
 8002332:	065f      	lsls	r7, r3, #25
 8002334:	bf48      	it	mi
 8002336:	b2ad      	uxthmi	r5, r5
 8002338:	6031      	str	r1, [r6, #0]
 800233a:	07d9      	lsls	r1, r3, #31
 800233c:	bf44      	itt	mi
 800233e:	f043 0320 	orrmi.w	r3, r3, #32
 8002342:	6023      	strmi	r3, [r4, #0]
 8002344:	b11d      	cbz	r5, 800234e <_printf_i+0x19e>
 8002346:	2310      	movs	r3, #16
 8002348:	e7ac      	b.n	80022a4 <_printf_i+0xf4>
 800234a:	4827      	ldr	r0, [pc, #156]	@ (80023e8 <_printf_i+0x238>)
 800234c:	e7e9      	b.n	8002322 <_printf_i+0x172>
 800234e:	6823      	ldr	r3, [r4, #0]
 8002350:	f023 0320 	bic.w	r3, r3, #32
 8002354:	6023      	str	r3, [r4, #0]
 8002356:	e7f6      	b.n	8002346 <_printf_i+0x196>
 8002358:	4616      	mov	r6, r2
 800235a:	e7bd      	b.n	80022d8 <_printf_i+0x128>
 800235c:	6833      	ldr	r3, [r6, #0]
 800235e:	6825      	ldr	r5, [r4, #0]
 8002360:	6961      	ldr	r1, [r4, #20]
 8002362:	1d18      	adds	r0, r3, #4
 8002364:	6030      	str	r0, [r6, #0]
 8002366:	062e      	lsls	r6, r5, #24
 8002368:	681b      	ldr	r3, [r3, #0]
 800236a:	d501      	bpl.n	8002370 <_printf_i+0x1c0>
 800236c:	6019      	str	r1, [r3, #0]
 800236e:	e002      	b.n	8002376 <_printf_i+0x1c6>
 8002370:	0668      	lsls	r0, r5, #25
 8002372:	d5fb      	bpl.n	800236c <_printf_i+0x1bc>
 8002374:	8019      	strh	r1, [r3, #0]
 8002376:	2300      	movs	r3, #0
 8002378:	6123      	str	r3, [r4, #16]
 800237a:	4616      	mov	r6, r2
 800237c:	e7bc      	b.n	80022f8 <_printf_i+0x148>
 800237e:	6833      	ldr	r3, [r6, #0]
 8002380:	1d1a      	adds	r2, r3, #4
 8002382:	6032      	str	r2, [r6, #0]
 8002384:	681e      	ldr	r6, [r3, #0]
 8002386:	6862      	ldr	r2, [r4, #4]
 8002388:	2100      	movs	r1, #0
 800238a:	4630      	mov	r0, r6
 800238c:	f7fd ff28 	bl	80001e0 <memchr>
 8002390:	b108      	cbz	r0, 8002396 <_printf_i+0x1e6>
 8002392:	1b80      	subs	r0, r0, r6
 8002394:	6060      	str	r0, [r4, #4]
 8002396:	6863      	ldr	r3, [r4, #4]
 8002398:	6123      	str	r3, [r4, #16]
 800239a:	2300      	movs	r3, #0
 800239c:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80023a0:	e7aa      	b.n	80022f8 <_printf_i+0x148>
 80023a2:	6923      	ldr	r3, [r4, #16]
 80023a4:	4632      	mov	r2, r6
 80023a6:	4649      	mov	r1, r9
 80023a8:	4640      	mov	r0, r8
 80023aa:	47d0      	blx	sl
 80023ac:	3001      	adds	r0, #1
 80023ae:	d0ad      	beq.n	800230c <_printf_i+0x15c>
 80023b0:	6823      	ldr	r3, [r4, #0]
 80023b2:	079b      	lsls	r3, r3, #30
 80023b4:	d413      	bmi.n	80023de <_printf_i+0x22e>
 80023b6:	68e0      	ldr	r0, [r4, #12]
 80023b8:	9b03      	ldr	r3, [sp, #12]
 80023ba:	4298      	cmp	r0, r3
 80023bc:	bfb8      	it	lt
 80023be:	4618      	movlt	r0, r3
 80023c0:	e7a6      	b.n	8002310 <_printf_i+0x160>
 80023c2:	2301      	movs	r3, #1
 80023c4:	4632      	mov	r2, r6
 80023c6:	4649      	mov	r1, r9
 80023c8:	4640      	mov	r0, r8
 80023ca:	47d0      	blx	sl
 80023cc:	3001      	adds	r0, #1
 80023ce:	d09d      	beq.n	800230c <_printf_i+0x15c>
 80023d0:	3501      	adds	r5, #1
 80023d2:	68e3      	ldr	r3, [r4, #12]
 80023d4:	9903      	ldr	r1, [sp, #12]
 80023d6:	1a5b      	subs	r3, r3, r1
 80023d8:	42ab      	cmp	r3, r5
 80023da:	dcf2      	bgt.n	80023c2 <_printf_i+0x212>
 80023dc:	e7eb      	b.n	80023b6 <_printf_i+0x206>
 80023de:	2500      	movs	r5, #0
 80023e0:	f104 0619 	add.w	r6, r4, #25
 80023e4:	e7f5      	b.n	80023d2 <_printf_i+0x222>
 80023e6:	bf00      	nop
 80023e8:	0800348e 	.word	0x0800348e
 80023ec:	0800349f 	.word	0x0800349f

080023f0 <memmove>:
 80023f0:	4288      	cmp	r0, r1
 80023f2:	b510      	push	{r4, lr}
 80023f4:	eb01 0402 	add.w	r4, r1, r2
 80023f8:	d902      	bls.n	8002400 <memmove+0x10>
 80023fa:	4284      	cmp	r4, r0
 80023fc:	4623      	mov	r3, r4
 80023fe:	d807      	bhi.n	8002410 <memmove+0x20>
 8002400:	1e43      	subs	r3, r0, #1
 8002402:	42a1      	cmp	r1, r4
 8002404:	d008      	beq.n	8002418 <memmove+0x28>
 8002406:	f811 2b01 	ldrb.w	r2, [r1], #1
 800240a:	f803 2f01 	strb.w	r2, [r3, #1]!
 800240e:	e7f8      	b.n	8002402 <memmove+0x12>
 8002410:	4402      	add	r2, r0
 8002412:	4601      	mov	r1, r0
 8002414:	428a      	cmp	r2, r1
 8002416:	d100      	bne.n	800241a <memmove+0x2a>
 8002418:	bd10      	pop	{r4, pc}
 800241a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800241e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8002422:	e7f7      	b.n	8002414 <memmove+0x24>

08002424 <_sbrk_r>:
 8002424:	b538      	push	{r3, r4, r5, lr}
 8002426:	4d06      	ldr	r5, [pc, #24]	@ (8002440 <_sbrk_r+0x1c>)
 8002428:	2300      	movs	r3, #0
 800242a:	4604      	mov	r4, r0
 800242c:	4608      	mov	r0, r1
 800242e:	602b      	str	r3, [r5, #0]
 8002430:	f7ff fb1a 	bl	8001a68 <_sbrk>
 8002434:	1c43      	adds	r3, r0, #1
 8002436:	d102      	bne.n	800243e <_sbrk_r+0x1a>
 8002438:	682b      	ldr	r3, [r5, #0]
 800243a:	b103      	cbz	r3, 800243e <_sbrk_r+0x1a>
 800243c:	6023      	str	r3, [r4, #0]
 800243e:	bd38      	pop	{r3, r4, r5, pc}
 8002440:	200001dc 	.word	0x200001dc

08002444 <memcpy>:
 8002444:	440a      	add	r2, r1
 8002446:	4291      	cmp	r1, r2
 8002448:	f100 33ff 	add.w	r3, r0, #4294967295
 800244c:	d100      	bne.n	8002450 <memcpy+0xc>
 800244e:	4770      	bx	lr
 8002450:	b510      	push	{r4, lr}
 8002452:	f811 4b01 	ldrb.w	r4, [r1], #1
 8002456:	f803 4f01 	strb.w	r4, [r3, #1]!
 800245a:	4291      	cmp	r1, r2
 800245c:	d1f9      	bne.n	8002452 <memcpy+0xe>
 800245e:	bd10      	pop	{r4, pc}

08002460 <_realloc_r>:
 8002460:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8002464:	4680      	mov	r8, r0
 8002466:	4615      	mov	r5, r2
 8002468:	460c      	mov	r4, r1
 800246a:	b921      	cbnz	r1, 8002476 <_realloc_r+0x16>
 800246c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8002470:	4611      	mov	r1, r2
 8002472:	f7ff bc4b 	b.w	8001d0c <_malloc_r>
 8002476:	b92a      	cbnz	r2, 8002484 <_realloc_r+0x24>
 8002478:	f7ff fbdc 	bl	8001c34 <_free_r>
 800247c:	2400      	movs	r4, #0
 800247e:	4620      	mov	r0, r4
 8002480:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8002484:	f000 f81a 	bl	80024bc <_malloc_usable_size_r>
 8002488:	4285      	cmp	r5, r0
 800248a:	4606      	mov	r6, r0
 800248c:	d802      	bhi.n	8002494 <_realloc_r+0x34>
 800248e:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 8002492:	d8f4      	bhi.n	800247e <_realloc_r+0x1e>
 8002494:	4629      	mov	r1, r5
 8002496:	4640      	mov	r0, r8
 8002498:	f7ff fc38 	bl	8001d0c <_malloc_r>
 800249c:	4607      	mov	r7, r0
 800249e:	2800      	cmp	r0, #0
 80024a0:	d0ec      	beq.n	800247c <_realloc_r+0x1c>
 80024a2:	42b5      	cmp	r5, r6
 80024a4:	462a      	mov	r2, r5
 80024a6:	4621      	mov	r1, r4
 80024a8:	bf28      	it	cs
 80024aa:	4632      	movcs	r2, r6
 80024ac:	f7ff ffca 	bl	8002444 <memcpy>
 80024b0:	4621      	mov	r1, r4
 80024b2:	4640      	mov	r0, r8
 80024b4:	f7ff fbbe 	bl	8001c34 <_free_r>
 80024b8:	463c      	mov	r4, r7
 80024ba:	e7e0      	b.n	800247e <_realloc_r+0x1e>

080024bc <_malloc_usable_size_r>:
 80024bc:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80024c0:	1f18      	subs	r0, r3, #4
 80024c2:	2b00      	cmp	r3, #0
 80024c4:	bfbc      	itt	lt
 80024c6:	580b      	ldrlt	r3, [r1, r0]
 80024c8:	18c0      	addlt	r0, r0, r3
 80024ca:	4770      	bx	lr

080024cc <pow>:
 80024cc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80024ce:	ed2d 8b02 	vpush	{d8}
 80024d2:	eeb0 8a40 	vmov.f32	s16, s0
 80024d6:	eef0 8a60 	vmov.f32	s17, s1
 80024da:	ec55 4b11 	vmov	r4, r5, d1
 80024de:	f000 f873 	bl	80025c8 <__ieee754_pow>
 80024e2:	4622      	mov	r2, r4
 80024e4:	462b      	mov	r3, r5
 80024e6:	4620      	mov	r0, r4
 80024e8:	4629      	mov	r1, r5
 80024ea:	ec57 6b10 	vmov	r6, r7, d0
 80024ee:	f7fe fb1d 	bl	8000b2c <__aeabi_dcmpun>
 80024f2:	2800      	cmp	r0, #0
 80024f4:	d13b      	bne.n	800256e <pow+0xa2>
 80024f6:	ec51 0b18 	vmov	r0, r1, d8
 80024fa:	2200      	movs	r2, #0
 80024fc:	2300      	movs	r3, #0
 80024fe:	f7fe fae3 	bl	8000ac8 <__aeabi_dcmpeq>
 8002502:	b1b8      	cbz	r0, 8002534 <pow+0x68>
 8002504:	2200      	movs	r2, #0
 8002506:	2300      	movs	r3, #0
 8002508:	4620      	mov	r0, r4
 800250a:	4629      	mov	r1, r5
 800250c:	f7fe fadc 	bl	8000ac8 <__aeabi_dcmpeq>
 8002510:	2800      	cmp	r0, #0
 8002512:	d146      	bne.n	80025a2 <pow+0xd6>
 8002514:	ec45 4b10 	vmov	d0, r4, r5
 8002518:	f000 f848 	bl	80025ac <finite>
 800251c:	b338      	cbz	r0, 800256e <pow+0xa2>
 800251e:	2200      	movs	r2, #0
 8002520:	2300      	movs	r3, #0
 8002522:	4620      	mov	r0, r4
 8002524:	4629      	mov	r1, r5
 8002526:	f7fe fad9 	bl	8000adc <__aeabi_dcmplt>
 800252a:	b300      	cbz	r0, 800256e <pow+0xa2>
 800252c:	f7ff fb56 	bl	8001bdc <__errno>
 8002530:	2322      	movs	r3, #34	@ 0x22
 8002532:	e01b      	b.n	800256c <pow+0xa0>
 8002534:	ec47 6b10 	vmov	d0, r6, r7
 8002538:	f000 f838 	bl	80025ac <finite>
 800253c:	b9e0      	cbnz	r0, 8002578 <pow+0xac>
 800253e:	eeb0 0a48 	vmov.f32	s0, s16
 8002542:	eef0 0a68 	vmov.f32	s1, s17
 8002546:	f000 f831 	bl	80025ac <finite>
 800254a:	b1a8      	cbz	r0, 8002578 <pow+0xac>
 800254c:	ec45 4b10 	vmov	d0, r4, r5
 8002550:	f000 f82c 	bl	80025ac <finite>
 8002554:	b180      	cbz	r0, 8002578 <pow+0xac>
 8002556:	4632      	mov	r2, r6
 8002558:	463b      	mov	r3, r7
 800255a:	4630      	mov	r0, r6
 800255c:	4639      	mov	r1, r7
 800255e:	f7fe fae5 	bl	8000b2c <__aeabi_dcmpun>
 8002562:	2800      	cmp	r0, #0
 8002564:	d0e2      	beq.n	800252c <pow+0x60>
 8002566:	f7ff fb39 	bl	8001bdc <__errno>
 800256a:	2321      	movs	r3, #33	@ 0x21
 800256c:	6003      	str	r3, [r0, #0]
 800256e:	ecbd 8b02 	vpop	{d8}
 8002572:	ec47 6b10 	vmov	d0, r6, r7
 8002576:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8002578:	2200      	movs	r2, #0
 800257a:	2300      	movs	r3, #0
 800257c:	4630      	mov	r0, r6
 800257e:	4639      	mov	r1, r7
 8002580:	f7fe faa2 	bl	8000ac8 <__aeabi_dcmpeq>
 8002584:	2800      	cmp	r0, #0
 8002586:	d0f2      	beq.n	800256e <pow+0xa2>
 8002588:	eeb0 0a48 	vmov.f32	s0, s16
 800258c:	eef0 0a68 	vmov.f32	s1, s17
 8002590:	f000 f80c 	bl	80025ac <finite>
 8002594:	2800      	cmp	r0, #0
 8002596:	d0ea      	beq.n	800256e <pow+0xa2>
 8002598:	ec45 4b10 	vmov	d0, r4, r5
 800259c:	f000 f806 	bl	80025ac <finite>
 80025a0:	e7c3      	b.n	800252a <pow+0x5e>
 80025a2:	4f01      	ldr	r7, [pc, #4]	@ (80025a8 <pow+0xdc>)
 80025a4:	2600      	movs	r6, #0
 80025a6:	e7e2      	b.n	800256e <pow+0xa2>
 80025a8:	3ff00000 	.word	0x3ff00000

080025ac <finite>:
 80025ac:	b082      	sub	sp, #8
 80025ae:	ed8d 0b00 	vstr	d0, [sp]
 80025b2:	9801      	ldr	r0, [sp, #4]
 80025b4:	f040 4000 	orr.w	r0, r0, #2147483648	@ 0x80000000
 80025b8:	f500 1080 	add.w	r0, r0, #1048576	@ 0x100000
 80025bc:	0fc0      	lsrs	r0, r0, #31
 80025be:	b002      	add	sp, #8
 80025c0:	4770      	bx	lr
 80025c2:	0000      	movs	r0, r0
 80025c4:	0000      	movs	r0, r0
	...

080025c8 <__ieee754_pow>:
 80025c8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80025cc:	b091      	sub	sp, #68	@ 0x44
 80025ce:	ed8d 1b00 	vstr	d1, [sp]
 80025d2:	e9dd 1900 	ldrd	r1, r9, [sp]
 80025d6:	f029 4a00 	bic.w	sl, r9, #2147483648	@ 0x80000000
 80025da:	ea5a 0001 	orrs.w	r0, sl, r1
 80025de:	ec57 6b10 	vmov	r6, r7, d0
 80025e2:	d113      	bne.n	800260c <__ieee754_pow+0x44>
 80025e4:	19b3      	adds	r3, r6, r6
 80025e6:	f487 2200 	eor.w	r2, r7, #524288	@ 0x80000
 80025ea:	4152      	adcs	r2, r2
 80025ec:	4298      	cmp	r0, r3
 80025ee:	4b98      	ldr	r3, [pc, #608]	@ (8002850 <__ieee754_pow+0x288>)
 80025f0:	4193      	sbcs	r3, r2
 80025f2:	f080 84ea 	bcs.w	8002fca <__ieee754_pow+0xa02>
 80025f6:	e9dd 2300 	ldrd	r2, r3, [sp]
 80025fa:	4630      	mov	r0, r6
 80025fc:	4639      	mov	r1, r7
 80025fe:	f7fd fe45 	bl	800028c <__adddf3>
 8002602:	ec41 0b10 	vmov	d0, r0, r1
 8002606:	b011      	add	sp, #68	@ 0x44
 8002608:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800260c:	4a91      	ldr	r2, [pc, #580]	@ (8002854 <__ieee754_pow+0x28c>)
 800260e:	f027 4800 	bic.w	r8, r7, #2147483648	@ 0x80000000
 8002612:	4590      	cmp	r8, r2
 8002614:	463d      	mov	r5, r7
 8002616:	4633      	mov	r3, r6
 8002618:	d806      	bhi.n	8002628 <__ieee754_pow+0x60>
 800261a:	d101      	bne.n	8002620 <__ieee754_pow+0x58>
 800261c:	2e00      	cmp	r6, #0
 800261e:	d1ea      	bne.n	80025f6 <__ieee754_pow+0x2e>
 8002620:	4592      	cmp	sl, r2
 8002622:	d801      	bhi.n	8002628 <__ieee754_pow+0x60>
 8002624:	d10e      	bne.n	8002644 <__ieee754_pow+0x7c>
 8002626:	b169      	cbz	r1, 8002644 <__ieee754_pow+0x7c>
 8002628:	f105 4540 	add.w	r5, r5, #3221225472	@ 0xc0000000
 800262c:	f505 1580 	add.w	r5, r5, #1048576	@ 0x100000
 8002630:	431d      	orrs	r5, r3
 8002632:	d1e0      	bne.n	80025f6 <__ieee754_pow+0x2e>
 8002634:	e9dd 3200 	ldrd	r3, r2, [sp]
 8002638:	18db      	adds	r3, r3, r3
 800263a:	f482 2200 	eor.w	r2, r2, #524288	@ 0x80000
 800263e:	4152      	adcs	r2, r2
 8002640:	429d      	cmp	r5, r3
 8002642:	e7d4      	b.n	80025ee <__ieee754_pow+0x26>
 8002644:	2d00      	cmp	r5, #0
 8002646:	46c3      	mov	fp, r8
 8002648:	da3a      	bge.n	80026c0 <__ieee754_pow+0xf8>
 800264a:	4a83      	ldr	r2, [pc, #524]	@ (8002858 <__ieee754_pow+0x290>)
 800264c:	4592      	cmp	sl, r2
 800264e:	d84d      	bhi.n	80026ec <__ieee754_pow+0x124>
 8002650:	f1a2 7254 	sub.w	r2, r2, #55574528	@ 0x3500000
 8002654:	4592      	cmp	sl, r2
 8002656:	f240 84c7 	bls.w	8002fe8 <__ieee754_pow+0xa20>
 800265a:	ea4f 522a 	mov.w	r2, sl, asr #20
 800265e:	f2a2 32ff 	subw	r2, r2, #1023	@ 0x3ff
 8002662:	2a14      	cmp	r2, #20
 8002664:	dd0f      	ble.n	8002686 <__ieee754_pow+0xbe>
 8002666:	f1c2 0234 	rsb	r2, r2, #52	@ 0x34
 800266a:	fa21 f402 	lsr.w	r4, r1, r2
 800266e:	fa04 f202 	lsl.w	r2, r4, r2
 8002672:	428a      	cmp	r2, r1
 8002674:	f040 84b8 	bne.w	8002fe8 <__ieee754_pow+0xa20>
 8002678:	f004 0401 	and.w	r4, r4, #1
 800267c:	f1c4 0402 	rsb	r4, r4, #2
 8002680:	2900      	cmp	r1, #0
 8002682:	d158      	bne.n	8002736 <__ieee754_pow+0x16e>
 8002684:	e00e      	b.n	80026a4 <__ieee754_pow+0xdc>
 8002686:	2900      	cmp	r1, #0
 8002688:	d154      	bne.n	8002734 <__ieee754_pow+0x16c>
 800268a:	f1c2 0214 	rsb	r2, r2, #20
 800268e:	fa4a f402 	asr.w	r4, sl, r2
 8002692:	fa04 f202 	lsl.w	r2, r4, r2
 8002696:	4552      	cmp	r2, sl
 8002698:	f040 84a3 	bne.w	8002fe2 <__ieee754_pow+0xa1a>
 800269c:	f004 0401 	and.w	r4, r4, #1
 80026a0:	f1c4 0402 	rsb	r4, r4, #2
 80026a4:	4a6d      	ldr	r2, [pc, #436]	@ (800285c <__ieee754_pow+0x294>)
 80026a6:	4592      	cmp	sl, r2
 80026a8:	d12e      	bne.n	8002708 <__ieee754_pow+0x140>
 80026aa:	f1b9 0f00 	cmp.w	r9, #0
 80026ae:	f280 8494 	bge.w	8002fda <__ieee754_pow+0xa12>
 80026b2:	496a      	ldr	r1, [pc, #424]	@ (800285c <__ieee754_pow+0x294>)
 80026b4:	4632      	mov	r2, r6
 80026b6:	463b      	mov	r3, r7
 80026b8:	2000      	movs	r0, #0
 80026ba:	f7fe f8c7 	bl	800084c <__aeabi_ddiv>
 80026be:	e7a0      	b.n	8002602 <__ieee754_pow+0x3a>
 80026c0:	2400      	movs	r4, #0
 80026c2:	bbc1      	cbnz	r1, 8002736 <__ieee754_pow+0x16e>
 80026c4:	4a63      	ldr	r2, [pc, #396]	@ (8002854 <__ieee754_pow+0x28c>)
 80026c6:	4592      	cmp	sl, r2
 80026c8:	d1ec      	bne.n	80026a4 <__ieee754_pow+0xdc>
 80026ca:	f108 4240 	add.w	r2, r8, #3221225472	@ 0xc0000000
 80026ce:	f502 1280 	add.w	r2, r2, #1048576	@ 0x100000
 80026d2:	431a      	orrs	r2, r3
 80026d4:	f000 8479 	beq.w	8002fca <__ieee754_pow+0xa02>
 80026d8:	4b61      	ldr	r3, [pc, #388]	@ (8002860 <__ieee754_pow+0x298>)
 80026da:	4598      	cmp	r8, r3
 80026dc:	d908      	bls.n	80026f0 <__ieee754_pow+0x128>
 80026de:	f1b9 0f00 	cmp.w	r9, #0
 80026e2:	f2c0 8476 	blt.w	8002fd2 <__ieee754_pow+0xa0a>
 80026e6:	e9dd 0100 	ldrd	r0, r1, [sp]
 80026ea:	e78a      	b.n	8002602 <__ieee754_pow+0x3a>
 80026ec:	2402      	movs	r4, #2
 80026ee:	e7e8      	b.n	80026c2 <__ieee754_pow+0xfa>
 80026f0:	f1b9 0f00 	cmp.w	r9, #0
 80026f4:	f04f 0000 	mov.w	r0, #0
 80026f8:	f04f 0100 	mov.w	r1, #0
 80026fc:	da81      	bge.n	8002602 <__ieee754_pow+0x3a>
 80026fe:	e9dd 0300 	ldrd	r0, r3, [sp]
 8002702:	f103 4100 	add.w	r1, r3, #2147483648	@ 0x80000000
 8002706:	e77c      	b.n	8002602 <__ieee754_pow+0x3a>
 8002708:	f1b9 4f80 	cmp.w	r9, #1073741824	@ 0x40000000
 800270c:	d106      	bne.n	800271c <__ieee754_pow+0x154>
 800270e:	4632      	mov	r2, r6
 8002710:	463b      	mov	r3, r7
 8002712:	4630      	mov	r0, r6
 8002714:	4639      	mov	r1, r7
 8002716:	f7fd ff6f 	bl	80005f8 <__aeabi_dmul>
 800271a:	e772      	b.n	8002602 <__ieee754_pow+0x3a>
 800271c:	4a51      	ldr	r2, [pc, #324]	@ (8002864 <__ieee754_pow+0x29c>)
 800271e:	4591      	cmp	r9, r2
 8002720:	d109      	bne.n	8002736 <__ieee754_pow+0x16e>
 8002722:	2d00      	cmp	r5, #0
 8002724:	db07      	blt.n	8002736 <__ieee754_pow+0x16e>
 8002726:	ec47 6b10 	vmov	d0, r6, r7
 800272a:	b011      	add	sp, #68	@ 0x44
 800272c:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002730:	f000 bd52 	b.w	80031d8 <__ieee754_sqrt>
 8002734:	2400      	movs	r4, #0
 8002736:	ec47 6b10 	vmov	d0, r6, r7
 800273a:	9302      	str	r3, [sp, #8]
 800273c:	f000 fc88 	bl	8003050 <fabs>
 8002740:	9b02      	ldr	r3, [sp, #8]
 8002742:	ec51 0b10 	vmov	r0, r1, d0
 8002746:	bb53      	cbnz	r3, 800279e <__ieee754_pow+0x1d6>
 8002748:	4b44      	ldr	r3, [pc, #272]	@ (800285c <__ieee754_pow+0x294>)
 800274a:	f025 4240 	bic.w	r2, r5, #3221225472	@ 0xc0000000
 800274e:	429a      	cmp	r2, r3
 8002750:	d002      	beq.n	8002758 <__ieee754_pow+0x190>
 8002752:	f1b8 0f00 	cmp.w	r8, #0
 8002756:	d122      	bne.n	800279e <__ieee754_pow+0x1d6>
 8002758:	f1b9 0f00 	cmp.w	r9, #0
 800275c:	da05      	bge.n	800276a <__ieee754_pow+0x1a2>
 800275e:	4602      	mov	r2, r0
 8002760:	460b      	mov	r3, r1
 8002762:	2000      	movs	r0, #0
 8002764:	493d      	ldr	r1, [pc, #244]	@ (800285c <__ieee754_pow+0x294>)
 8002766:	f7fe f871 	bl	800084c <__aeabi_ddiv>
 800276a:	2d00      	cmp	r5, #0
 800276c:	f6bf af49 	bge.w	8002602 <__ieee754_pow+0x3a>
 8002770:	f108 4840 	add.w	r8, r8, #3221225472	@ 0xc0000000
 8002774:	f508 1880 	add.w	r8, r8, #1048576	@ 0x100000
 8002778:	ea58 0804 	orrs.w	r8, r8, r4
 800277c:	d108      	bne.n	8002790 <__ieee754_pow+0x1c8>
 800277e:	4602      	mov	r2, r0
 8002780:	460b      	mov	r3, r1
 8002782:	4610      	mov	r0, r2
 8002784:	4619      	mov	r1, r3
 8002786:	f7fd fd7f 	bl	8000288 <__aeabi_dsub>
 800278a:	4602      	mov	r2, r0
 800278c:	460b      	mov	r3, r1
 800278e:	e794      	b.n	80026ba <__ieee754_pow+0xf2>
 8002790:	2c01      	cmp	r4, #1
 8002792:	f47f af36 	bne.w	8002602 <__ieee754_pow+0x3a>
 8002796:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 800279a:	4619      	mov	r1, r3
 800279c:	e731      	b.n	8002602 <__ieee754_pow+0x3a>
 800279e:	0feb      	lsrs	r3, r5, #31
 80027a0:	3b01      	subs	r3, #1
 80027a2:	ea53 0204 	orrs.w	r2, r3, r4
 80027a6:	d102      	bne.n	80027ae <__ieee754_pow+0x1e6>
 80027a8:	4632      	mov	r2, r6
 80027aa:	463b      	mov	r3, r7
 80027ac:	e7e9      	b.n	8002782 <__ieee754_pow+0x1ba>
 80027ae:	3c01      	subs	r4, #1
 80027b0:	431c      	orrs	r4, r3
 80027b2:	d016      	beq.n	80027e2 <__ieee754_pow+0x21a>
 80027b4:	ed9f 7b22 	vldr	d7, [pc, #136]	@ 8002840 <__ieee754_pow+0x278>
 80027b8:	f1ba 4f84 	cmp.w	sl, #1107296256	@ 0x42000000
 80027bc:	ed8d 7b02 	vstr	d7, [sp, #8]
 80027c0:	f240 8112 	bls.w	80029e8 <__ieee754_pow+0x420>
 80027c4:	4b28      	ldr	r3, [pc, #160]	@ (8002868 <__ieee754_pow+0x2a0>)
 80027c6:	459a      	cmp	sl, r3
 80027c8:	4b25      	ldr	r3, [pc, #148]	@ (8002860 <__ieee754_pow+0x298>)
 80027ca:	d916      	bls.n	80027fa <__ieee754_pow+0x232>
 80027cc:	4598      	cmp	r8, r3
 80027ce:	d80b      	bhi.n	80027e8 <__ieee754_pow+0x220>
 80027d0:	f1b9 0f00 	cmp.w	r9, #0
 80027d4:	da0b      	bge.n	80027ee <__ieee754_pow+0x226>
 80027d6:	2000      	movs	r0, #0
 80027d8:	b011      	add	sp, #68	@ 0x44
 80027da:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80027de:	f000 bcf3 	b.w	80031c8 <__math_oflow>
 80027e2:	ed9f 7b19 	vldr	d7, [pc, #100]	@ 8002848 <__ieee754_pow+0x280>
 80027e6:	e7e7      	b.n	80027b8 <__ieee754_pow+0x1f0>
 80027e8:	f1b9 0f00 	cmp.w	r9, #0
 80027ec:	dcf3      	bgt.n	80027d6 <__ieee754_pow+0x20e>
 80027ee:	2000      	movs	r0, #0
 80027f0:	b011      	add	sp, #68	@ 0x44
 80027f2:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80027f6:	f000 bcdf 	b.w	80031b8 <__math_uflow>
 80027fa:	4598      	cmp	r8, r3
 80027fc:	d20c      	bcs.n	8002818 <__ieee754_pow+0x250>
 80027fe:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8002802:	2200      	movs	r2, #0
 8002804:	2300      	movs	r3, #0
 8002806:	f7fe f969 	bl	8000adc <__aeabi_dcmplt>
 800280a:	3800      	subs	r0, #0
 800280c:	bf18      	it	ne
 800280e:	2001      	movne	r0, #1
 8002810:	f1b9 0f00 	cmp.w	r9, #0
 8002814:	daec      	bge.n	80027f0 <__ieee754_pow+0x228>
 8002816:	e7df      	b.n	80027d8 <__ieee754_pow+0x210>
 8002818:	4b10      	ldr	r3, [pc, #64]	@ (800285c <__ieee754_pow+0x294>)
 800281a:	4598      	cmp	r8, r3
 800281c:	f04f 0200 	mov.w	r2, #0
 8002820:	d924      	bls.n	800286c <__ieee754_pow+0x2a4>
 8002822:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8002826:	2300      	movs	r3, #0
 8002828:	f7fe f958 	bl	8000adc <__aeabi_dcmplt>
 800282c:	3800      	subs	r0, #0
 800282e:	bf18      	it	ne
 8002830:	2001      	movne	r0, #1
 8002832:	f1b9 0f00 	cmp.w	r9, #0
 8002836:	dccf      	bgt.n	80027d8 <__ieee754_pow+0x210>
 8002838:	e7da      	b.n	80027f0 <__ieee754_pow+0x228>
 800283a:	bf00      	nop
 800283c:	f3af 8000 	nop.w
 8002840:	00000000 	.word	0x00000000
 8002844:	3ff00000 	.word	0x3ff00000
 8002848:	00000000 	.word	0x00000000
 800284c:	bff00000 	.word	0xbff00000
 8002850:	fff00000 	.word	0xfff00000
 8002854:	7ff00000 	.word	0x7ff00000
 8002858:	433fffff 	.word	0x433fffff
 800285c:	3ff00000 	.word	0x3ff00000
 8002860:	3fefffff 	.word	0x3fefffff
 8002864:	3fe00000 	.word	0x3fe00000
 8002868:	43f00000 	.word	0x43f00000
 800286c:	4b5a      	ldr	r3, [pc, #360]	@ (80029d8 <__ieee754_pow+0x410>)
 800286e:	f7fd fd0b 	bl	8000288 <__aeabi_dsub>
 8002872:	a351      	add	r3, pc, #324	@ (adr r3, 80029b8 <__ieee754_pow+0x3f0>)
 8002874:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002878:	4604      	mov	r4, r0
 800287a:	460d      	mov	r5, r1
 800287c:	f7fd febc 	bl	80005f8 <__aeabi_dmul>
 8002880:	a34f      	add	r3, pc, #316	@ (adr r3, 80029c0 <__ieee754_pow+0x3f8>)
 8002882:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002886:	4606      	mov	r6, r0
 8002888:	460f      	mov	r7, r1
 800288a:	4620      	mov	r0, r4
 800288c:	4629      	mov	r1, r5
 800288e:	f7fd feb3 	bl	80005f8 <__aeabi_dmul>
 8002892:	4b52      	ldr	r3, [pc, #328]	@ (80029dc <__ieee754_pow+0x414>)
 8002894:	4682      	mov	sl, r0
 8002896:	468b      	mov	fp, r1
 8002898:	2200      	movs	r2, #0
 800289a:	4620      	mov	r0, r4
 800289c:	4629      	mov	r1, r5
 800289e:	f7fd feab 	bl	80005f8 <__aeabi_dmul>
 80028a2:	4602      	mov	r2, r0
 80028a4:	460b      	mov	r3, r1
 80028a6:	a148      	add	r1, pc, #288	@ (adr r1, 80029c8 <__ieee754_pow+0x400>)
 80028a8:	e9d1 0100 	ldrd	r0, r1, [r1]
 80028ac:	f7fd fcec 	bl	8000288 <__aeabi_dsub>
 80028b0:	4622      	mov	r2, r4
 80028b2:	462b      	mov	r3, r5
 80028b4:	f7fd fea0 	bl	80005f8 <__aeabi_dmul>
 80028b8:	4602      	mov	r2, r0
 80028ba:	460b      	mov	r3, r1
 80028bc:	2000      	movs	r0, #0
 80028be:	4948      	ldr	r1, [pc, #288]	@ (80029e0 <__ieee754_pow+0x418>)
 80028c0:	f7fd fce2 	bl	8000288 <__aeabi_dsub>
 80028c4:	4622      	mov	r2, r4
 80028c6:	4680      	mov	r8, r0
 80028c8:	4689      	mov	r9, r1
 80028ca:	462b      	mov	r3, r5
 80028cc:	4620      	mov	r0, r4
 80028ce:	4629      	mov	r1, r5
 80028d0:	f7fd fe92 	bl	80005f8 <__aeabi_dmul>
 80028d4:	4602      	mov	r2, r0
 80028d6:	460b      	mov	r3, r1
 80028d8:	4640      	mov	r0, r8
 80028da:	4649      	mov	r1, r9
 80028dc:	f7fd fe8c 	bl	80005f8 <__aeabi_dmul>
 80028e0:	a33b      	add	r3, pc, #236	@ (adr r3, 80029d0 <__ieee754_pow+0x408>)
 80028e2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80028e6:	f7fd fe87 	bl	80005f8 <__aeabi_dmul>
 80028ea:	4602      	mov	r2, r0
 80028ec:	460b      	mov	r3, r1
 80028ee:	4650      	mov	r0, sl
 80028f0:	4659      	mov	r1, fp
 80028f2:	f7fd fcc9 	bl	8000288 <__aeabi_dsub>
 80028f6:	4602      	mov	r2, r0
 80028f8:	460b      	mov	r3, r1
 80028fa:	4680      	mov	r8, r0
 80028fc:	4689      	mov	r9, r1
 80028fe:	4630      	mov	r0, r6
 8002900:	4639      	mov	r1, r7
 8002902:	f7fd fcc3 	bl	800028c <__adddf3>
 8002906:	2400      	movs	r4, #0
 8002908:	4632      	mov	r2, r6
 800290a:	463b      	mov	r3, r7
 800290c:	4620      	mov	r0, r4
 800290e:	460d      	mov	r5, r1
 8002910:	f7fd fcba 	bl	8000288 <__aeabi_dsub>
 8002914:	4602      	mov	r2, r0
 8002916:	460b      	mov	r3, r1
 8002918:	4640      	mov	r0, r8
 800291a:	4649      	mov	r1, r9
 800291c:	f7fd fcb4 	bl	8000288 <__aeabi_dsub>
 8002920:	e9dd 2300 	ldrd	r2, r3, [sp]
 8002924:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8002928:	2300      	movs	r3, #0
 800292a:	9304      	str	r3, [sp, #16]
 800292c:	e9dd ab04 	ldrd	sl, fp, [sp, #16]
 8002930:	4606      	mov	r6, r0
 8002932:	460f      	mov	r7, r1
 8002934:	4652      	mov	r2, sl
 8002936:	465b      	mov	r3, fp
 8002938:	e9dd 0100 	ldrd	r0, r1, [sp]
 800293c:	f7fd fca4 	bl	8000288 <__aeabi_dsub>
 8002940:	4622      	mov	r2, r4
 8002942:	462b      	mov	r3, r5
 8002944:	f7fd fe58 	bl	80005f8 <__aeabi_dmul>
 8002948:	e9dd 2300 	ldrd	r2, r3, [sp]
 800294c:	4680      	mov	r8, r0
 800294e:	4689      	mov	r9, r1
 8002950:	4630      	mov	r0, r6
 8002952:	4639      	mov	r1, r7
 8002954:	f7fd fe50 	bl	80005f8 <__aeabi_dmul>
 8002958:	4602      	mov	r2, r0
 800295a:	460b      	mov	r3, r1
 800295c:	4640      	mov	r0, r8
 800295e:	4649      	mov	r1, r9
 8002960:	f7fd fc94 	bl	800028c <__adddf3>
 8002964:	4652      	mov	r2, sl
 8002966:	465b      	mov	r3, fp
 8002968:	4606      	mov	r6, r0
 800296a:	460f      	mov	r7, r1
 800296c:	4620      	mov	r0, r4
 800296e:	4629      	mov	r1, r5
 8002970:	f7fd fe42 	bl	80005f8 <__aeabi_dmul>
 8002974:	460b      	mov	r3, r1
 8002976:	4602      	mov	r2, r0
 8002978:	4680      	mov	r8, r0
 800297a:	4689      	mov	r9, r1
 800297c:	4630      	mov	r0, r6
 800297e:	4639      	mov	r1, r7
 8002980:	f7fd fc84 	bl	800028c <__adddf3>
 8002984:	4b17      	ldr	r3, [pc, #92]	@ (80029e4 <__ieee754_pow+0x41c>)
 8002986:	4299      	cmp	r1, r3
 8002988:	4604      	mov	r4, r0
 800298a:	460d      	mov	r5, r1
 800298c:	468a      	mov	sl, r1
 800298e:	468b      	mov	fp, r1
 8002990:	f340 82ef 	ble.w	8002f72 <__ieee754_pow+0x9aa>
 8002994:	f101 433f 	add.w	r3, r1, #3204448256	@ 0xbf000000
 8002998:	f503 03e0 	add.w	r3, r3, #7340032	@ 0x700000
 800299c:	4303      	orrs	r3, r0
 800299e:	f000 81e8 	beq.w	8002d72 <__ieee754_pow+0x7aa>
 80029a2:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80029a6:	2200      	movs	r2, #0
 80029a8:	2300      	movs	r3, #0
 80029aa:	f7fe f897 	bl	8000adc <__aeabi_dcmplt>
 80029ae:	3800      	subs	r0, #0
 80029b0:	bf18      	it	ne
 80029b2:	2001      	movne	r0, #1
 80029b4:	e710      	b.n	80027d8 <__ieee754_pow+0x210>
 80029b6:	bf00      	nop
 80029b8:	60000000 	.word	0x60000000
 80029bc:	3ff71547 	.word	0x3ff71547
 80029c0:	f85ddf44 	.word	0xf85ddf44
 80029c4:	3e54ae0b 	.word	0x3e54ae0b
 80029c8:	55555555 	.word	0x55555555
 80029cc:	3fd55555 	.word	0x3fd55555
 80029d0:	652b82fe 	.word	0x652b82fe
 80029d4:	3ff71547 	.word	0x3ff71547
 80029d8:	3ff00000 	.word	0x3ff00000
 80029dc:	3fd00000 	.word	0x3fd00000
 80029e0:	3fe00000 	.word	0x3fe00000
 80029e4:	408fffff 	.word	0x408fffff
 80029e8:	4bd5      	ldr	r3, [pc, #852]	@ (8002d40 <__ieee754_pow+0x778>)
 80029ea:	402b      	ands	r3, r5
 80029ec:	2200      	movs	r2, #0
 80029ee:	b92b      	cbnz	r3, 80029fc <__ieee754_pow+0x434>
 80029f0:	4bd4      	ldr	r3, [pc, #848]	@ (8002d44 <__ieee754_pow+0x77c>)
 80029f2:	f7fd fe01 	bl	80005f8 <__aeabi_dmul>
 80029f6:	f06f 0234 	mvn.w	r2, #52	@ 0x34
 80029fa:	468b      	mov	fp, r1
 80029fc:	ea4f 532b 	mov.w	r3, fp, asr #20
 8002a00:	f2a3 33ff 	subw	r3, r3, #1023	@ 0x3ff
 8002a04:	4413      	add	r3, r2
 8002a06:	930a      	str	r3, [sp, #40]	@ 0x28
 8002a08:	4bcf      	ldr	r3, [pc, #828]	@ (8002d48 <__ieee754_pow+0x780>)
 8002a0a:	f3cb 0b13 	ubfx	fp, fp, #0, #20
 8002a0e:	f04b 557f 	orr.w	r5, fp, #1069547520	@ 0x3fc00000
 8002a12:	459b      	cmp	fp, r3
 8002a14:	f445 1540 	orr.w	r5, r5, #3145728	@ 0x300000
 8002a18:	dd08      	ble.n	8002a2c <__ieee754_pow+0x464>
 8002a1a:	4bcc      	ldr	r3, [pc, #816]	@ (8002d4c <__ieee754_pow+0x784>)
 8002a1c:	459b      	cmp	fp, r3
 8002a1e:	f340 81a5 	ble.w	8002d6c <__ieee754_pow+0x7a4>
 8002a22:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8002a24:	3301      	adds	r3, #1
 8002a26:	930a      	str	r3, [sp, #40]	@ 0x28
 8002a28:	f5a5 1580 	sub.w	r5, r5, #1048576	@ 0x100000
 8002a2c:	f04f 0a00 	mov.w	sl, #0
 8002a30:	ea4f 03ca 	mov.w	r3, sl, lsl #3
 8002a34:	930b      	str	r3, [sp, #44]	@ 0x2c
 8002a36:	4bc6      	ldr	r3, [pc, #792]	@ (8002d50 <__ieee754_pow+0x788>)
 8002a38:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 8002a3c:	ed93 7b00 	vldr	d7, [r3]
 8002a40:	4629      	mov	r1, r5
 8002a42:	ec53 2b17 	vmov	r2, r3, d7
 8002a46:	ed8d 7b06 	vstr	d7, [sp, #24]
 8002a4a:	e9cd 0108 	strd	r0, r1, [sp, #32]
 8002a4e:	f7fd fc1b 	bl	8000288 <__aeabi_dsub>
 8002a52:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8002a56:	4606      	mov	r6, r0
 8002a58:	460f      	mov	r7, r1
 8002a5a:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8002a5e:	f7fd fc15 	bl	800028c <__adddf3>
 8002a62:	4602      	mov	r2, r0
 8002a64:	460b      	mov	r3, r1
 8002a66:	2000      	movs	r0, #0
 8002a68:	49ba      	ldr	r1, [pc, #744]	@ (8002d54 <__ieee754_pow+0x78c>)
 8002a6a:	f7fd feef 	bl	800084c <__aeabi_ddiv>
 8002a6e:	e9cd 010c 	strd	r0, r1, [sp, #48]	@ 0x30
 8002a72:	4602      	mov	r2, r0
 8002a74:	460b      	mov	r3, r1
 8002a76:	4630      	mov	r0, r6
 8002a78:	4639      	mov	r1, r7
 8002a7a:	f7fd fdbd 	bl	80005f8 <__aeabi_dmul>
 8002a7e:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8002a82:	e9dd bc04 	ldrd	fp, ip, [sp, #16]
 8002a86:	106d      	asrs	r5, r5, #1
 8002a88:	f045 5500 	orr.w	r5, r5, #536870912	@ 0x20000000
 8002a8c:	f04f 0b00 	mov.w	fp, #0
 8002a90:	f505 2500 	add.w	r5, r5, #524288	@ 0x80000
 8002a94:	4661      	mov	r1, ip
 8002a96:	2200      	movs	r2, #0
 8002a98:	eb05 438a 	add.w	r3, r5, sl, lsl #18
 8002a9c:	4658      	mov	r0, fp
 8002a9e:	46e1      	mov	r9, ip
 8002aa0:	e9cd bc0e 	strd	fp, ip, [sp, #56]	@ 0x38
 8002aa4:	4614      	mov	r4, r2
 8002aa6:	461d      	mov	r5, r3
 8002aa8:	f7fd fda6 	bl	80005f8 <__aeabi_dmul>
 8002aac:	4602      	mov	r2, r0
 8002aae:	460b      	mov	r3, r1
 8002ab0:	4630      	mov	r0, r6
 8002ab2:	4639      	mov	r1, r7
 8002ab4:	f7fd fbe8 	bl	8000288 <__aeabi_dsub>
 8002ab8:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8002abc:	4606      	mov	r6, r0
 8002abe:	460f      	mov	r7, r1
 8002ac0:	4620      	mov	r0, r4
 8002ac2:	4629      	mov	r1, r5
 8002ac4:	f7fd fbe0 	bl	8000288 <__aeabi_dsub>
 8002ac8:	4602      	mov	r2, r0
 8002aca:	460b      	mov	r3, r1
 8002acc:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8002ad0:	f7fd fbda 	bl	8000288 <__aeabi_dsub>
 8002ad4:	465a      	mov	r2, fp
 8002ad6:	464b      	mov	r3, r9
 8002ad8:	f7fd fd8e 	bl	80005f8 <__aeabi_dmul>
 8002adc:	4602      	mov	r2, r0
 8002ade:	460b      	mov	r3, r1
 8002ae0:	4630      	mov	r0, r6
 8002ae2:	4639      	mov	r1, r7
 8002ae4:	f7fd fbd0 	bl	8000288 <__aeabi_dsub>
 8002ae8:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	@ 0x30
 8002aec:	f7fd fd84 	bl	80005f8 <__aeabi_dmul>
 8002af0:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8002af4:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8002af8:	4610      	mov	r0, r2
 8002afa:	4619      	mov	r1, r3
 8002afc:	f7fd fd7c 	bl	80005f8 <__aeabi_dmul>
 8002b00:	a37d      	add	r3, pc, #500	@ (adr r3, 8002cf8 <__ieee754_pow+0x730>)
 8002b02:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002b06:	4604      	mov	r4, r0
 8002b08:	460d      	mov	r5, r1
 8002b0a:	f7fd fd75 	bl	80005f8 <__aeabi_dmul>
 8002b0e:	a37c      	add	r3, pc, #496	@ (adr r3, 8002d00 <__ieee754_pow+0x738>)
 8002b10:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002b14:	f7fd fbba 	bl	800028c <__adddf3>
 8002b18:	4622      	mov	r2, r4
 8002b1a:	462b      	mov	r3, r5
 8002b1c:	f7fd fd6c 	bl	80005f8 <__aeabi_dmul>
 8002b20:	a379      	add	r3, pc, #484	@ (adr r3, 8002d08 <__ieee754_pow+0x740>)
 8002b22:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002b26:	f7fd fbb1 	bl	800028c <__adddf3>
 8002b2a:	4622      	mov	r2, r4
 8002b2c:	462b      	mov	r3, r5
 8002b2e:	f7fd fd63 	bl	80005f8 <__aeabi_dmul>
 8002b32:	a377      	add	r3, pc, #476	@ (adr r3, 8002d10 <__ieee754_pow+0x748>)
 8002b34:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002b38:	f7fd fba8 	bl	800028c <__adddf3>
 8002b3c:	4622      	mov	r2, r4
 8002b3e:	462b      	mov	r3, r5
 8002b40:	f7fd fd5a 	bl	80005f8 <__aeabi_dmul>
 8002b44:	a374      	add	r3, pc, #464	@ (adr r3, 8002d18 <__ieee754_pow+0x750>)
 8002b46:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002b4a:	f7fd fb9f 	bl	800028c <__adddf3>
 8002b4e:	4622      	mov	r2, r4
 8002b50:	462b      	mov	r3, r5
 8002b52:	f7fd fd51 	bl	80005f8 <__aeabi_dmul>
 8002b56:	a372      	add	r3, pc, #456	@ (adr r3, 8002d20 <__ieee754_pow+0x758>)
 8002b58:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002b5c:	f7fd fb96 	bl	800028c <__adddf3>
 8002b60:	4622      	mov	r2, r4
 8002b62:	4606      	mov	r6, r0
 8002b64:	460f      	mov	r7, r1
 8002b66:	462b      	mov	r3, r5
 8002b68:	4620      	mov	r0, r4
 8002b6a:	4629      	mov	r1, r5
 8002b6c:	f7fd fd44 	bl	80005f8 <__aeabi_dmul>
 8002b70:	4602      	mov	r2, r0
 8002b72:	460b      	mov	r3, r1
 8002b74:	4630      	mov	r0, r6
 8002b76:	4639      	mov	r1, r7
 8002b78:	f7fd fd3e 	bl	80005f8 <__aeabi_dmul>
 8002b7c:	465a      	mov	r2, fp
 8002b7e:	4604      	mov	r4, r0
 8002b80:	460d      	mov	r5, r1
 8002b82:	464b      	mov	r3, r9
 8002b84:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8002b88:	f7fd fb80 	bl	800028c <__adddf3>
 8002b8c:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8002b90:	f7fd fd32 	bl	80005f8 <__aeabi_dmul>
 8002b94:	4622      	mov	r2, r4
 8002b96:	462b      	mov	r3, r5
 8002b98:	f7fd fb78 	bl	800028c <__adddf3>
 8002b9c:	465a      	mov	r2, fp
 8002b9e:	e9cd 0108 	strd	r0, r1, [sp, #32]
 8002ba2:	464b      	mov	r3, r9
 8002ba4:	4658      	mov	r0, fp
 8002ba6:	4649      	mov	r1, r9
 8002ba8:	f7fd fd26 	bl	80005f8 <__aeabi_dmul>
 8002bac:	4b6a      	ldr	r3, [pc, #424]	@ (8002d58 <__ieee754_pow+0x790>)
 8002bae:	2200      	movs	r2, #0
 8002bb0:	4606      	mov	r6, r0
 8002bb2:	460f      	mov	r7, r1
 8002bb4:	f7fd fb6a 	bl	800028c <__adddf3>
 8002bb8:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8002bbc:	f7fd fb66 	bl	800028c <__adddf3>
 8002bc0:	46d8      	mov	r8, fp
 8002bc2:	e9dd bc0e 	ldrd	fp, ip, [sp, #56]	@ 0x38
 8002bc6:	460d      	mov	r5, r1
 8002bc8:	465a      	mov	r2, fp
 8002bca:	460b      	mov	r3, r1
 8002bcc:	4640      	mov	r0, r8
 8002bce:	4649      	mov	r1, r9
 8002bd0:	e9cd bc0c 	strd	fp, ip, [sp, #48]	@ 0x30
 8002bd4:	f7fd fd10 	bl	80005f8 <__aeabi_dmul>
 8002bd8:	465c      	mov	r4, fp
 8002bda:	4680      	mov	r8, r0
 8002bdc:	4689      	mov	r9, r1
 8002bde:	4b5e      	ldr	r3, [pc, #376]	@ (8002d58 <__ieee754_pow+0x790>)
 8002be0:	2200      	movs	r2, #0
 8002be2:	4620      	mov	r0, r4
 8002be4:	4629      	mov	r1, r5
 8002be6:	f7fd fb4f 	bl	8000288 <__aeabi_dsub>
 8002bea:	4632      	mov	r2, r6
 8002bec:	463b      	mov	r3, r7
 8002bee:	f7fd fb4b 	bl	8000288 <__aeabi_dsub>
 8002bf2:	4602      	mov	r2, r0
 8002bf4:	460b      	mov	r3, r1
 8002bf6:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8002bfa:	f7fd fb45 	bl	8000288 <__aeabi_dsub>
 8002bfe:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8002c02:	f7fd fcf9 	bl	80005f8 <__aeabi_dmul>
 8002c06:	4622      	mov	r2, r4
 8002c08:	4606      	mov	r6, r0
 8002c0a:	460f      	mov	r7, r1
 8002c0c:	462b      	mov	r3, r5
 8002c0e:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8002c12:	f7fd fcf1 	bl	80005f8 <__aeabi_dmul>
 8002c16:	4602      	mov	r2, r0
 8002c18:	460b      	mov	r3, r1
 8002c1a:	4630      	mov	r0, r6
 8002c1c:	4639      	mov	r1, r7
 8002c1e:	f7fd fb35 	bl	800028c <__adddf3>
 8002c22:	4606      	mov	r6, r0
 8002c24:	460f      	mov	r7, r1
 8002c26:	4602      	mov	r2, r0
 8002c28:	460b      	mov	r3, r1
 8002c2a:	4640      	mov	r0, r8
 8002c2c:	4649      	mov	r1, r9
 8002c2e:	f7fd fb2d 	bl	800028c <__adddf3>
 8002c32:	e9dd bc0c 	ldrd	fp, ip, [sp, #48]	@ 0x30
 8002c36:	a33c      	add	r3, pc, #240	@ (adr r3, 8002d28 <__ieee754_pow+0x760>)
 8002c38:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002c3c:	4658      	mov	r0, fp
 8002c3e:	e9cd bc08 	strd	fp, ip, [sp, #32]
 8002c42:	460d      	mov	r5, r1
 8002c44:	f7fd fcd8 	bl	80005f8 <__aeabi_dmul>
 8002c48:	465c      	mov	r4, fp
 8002c4a:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8002c4e:	4642      	mov	r2, r8
 8002c50:	464b      	mov	r3, r9
 8002c52:	4620      	mov	r0, r4
 8002c54:	4629      	mov	r1, r5
 8002c56:	f7fd fb17 	bl	8000288 <__aeabi_dsub>
 8002c5a:	4602      	mov	r2, r0
 8002c5c:	460b      	mov	r3, r1
 8002c5e:	4630      	mov	r0, r6
 8002c60:	4639      	mov	r1, r7
 8002c62:	f7fd fb11 	bl	8000288 <__aeabi_dsub>
 8002c66:	a332      	add	r3, pc, #200	@ (adr r3, 8002d30 <__ieee754_pow+0x768>)
 8002c68:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002c6c:	f7fd fcc4 	bl	80005f8 <__aeabi_dmul>
 8002c70:	a331      	add	r3, pc, #196	@ (adr r3, 8002d38 <__ieee754_pow+0x770>)
 8002c72:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002c76:	4606      	mov	r6, r0
 8002c78:	460f      	mov	r7, r1
 8002c7a:	4620      	mov	r0, r4
 8002c7c:	4629      	mov	r1, r5
 8002c7e:	f7fd fcbb 	bl	80005f8 <__aeabi_dmul>
 8002c82:	4602      	mov	r2, r0
 8002c84:	460b      	mov	r3, r1
 8002c86:	4630      	mov	r0, r6
 8002c88:	4639      	mov	r1, r7
 8002c8a:	f7fd faff 	bl	800028c <__adddf3>
 8002c8e:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 8002c90:	4b32      	ldr	r3, [pc, #200]	@ (8002d5c <__ieee754_pow+0x794>)
 8002c92:	4413      	add	r3, r2
 8002c94:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002c98:	f7fd faf8 	bl	800028c <__adddf3>
 8002c9c:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8002ca0:	980a      	ldr	r0, [sp, #40]	@ 0x28
 8002ca2:	f7fd fc3f 	bl	8000524 <__aeabi_i2d>
 8002ca6:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 8002ca8:	4b2d      	ldr	r3, [pc, #180]	@ (8002d60 <__ieee754_pow+0x798>)
 8002caa:	4413      	add	r3, r2
 8002cac:	e9d3 8900 	ldrd	r8, r9, [r3]
 8002cb0:	4606      	mov	r6, r0
 8002cb2:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8002cb6:	460f      	mov	r7, r1
 8002cb8:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8002cbc:	f7fd fae6 	bl	800028c <__adddf3>
 8002cc0:	4642      	mov	r2, r8
 8002cc2:	464b      	mov	r3, r9
 8002cc4:	f7fd fae2 	bl	800028c <__adddf3>
 8002cc8:	4632      	mov	r2, r6
 8002cca:	463b      	mov	r3, r7
 8002ccc:	f7fd fade 	bl	800028c <__adddf3>
 8002cd0:	e9dd bc08 	ldrd	fp, ip, [sp, #32]
 8002cd4:	4632      	mov	r2, r6
 8002cd6:	463b      	mov	r3, r7
 8002cd8:	4658      	mov	r0, fp
 8002cda:	460d      	mov	r5, r1
 8002cdc:	f7fd fad4 	bl	8000288 <__aeabi_dsub>
 8002ce0:	4642      	mov	r2, r8
 8002ce2:	464b      	mov	r3, r9
 8002ce4:	f7fd fad0 	bl	8000288 <__aeabi_dsub>
 8002ce8:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8002cec:	f7fd facc 	bl	8000288 <__aeabi_dsub>
 8002cf0:	465c      	mov	r4, fp
 8002cf2:	4602      	mov	r2, r0
 8002cf4:	e036      	b.n	8002d64 <__ieee754_pow+0x79c>
 8002cf6:	bf00      	nop
 8002cf8:	4a454eef 	.word	0x4a454eef
 8002cfc:	3fca7e28 	.word	0x3fca7e28
 8002d00:	93c9db65 	.word	0x93c9db65
 8002d04:	3fcd864a 	.word	0x3fcd864a
 8002d08:	a91d4101 	.word	0xa91d4101
 8002d0c:	3fd17460 	.word	0x3fd17460
 8002d10:	518f264d 	.word	0x518f264d
 8002d14:	3fd55555 	.word	0x3fd55555
 8002d18:	db6fabff 	.word	0xdb6fabff
 8002d1c:	3fdb6db6 	.word	0x3fdb6db6
 8002d20:	33333303 	.word	0x33333303
 8002d24:	3fe33333 	.word	0x3fe33333
 8002d28:	e0000000 	.word	0xe0000000
 8002d2c:	3feec709 	.word	0x3feec709
 8002d30:	dc3a03fd 	.word	0xdc3a03fd
 8002d34:	3feec709 	.word	0x3feec709
 8002d38:	145b01f5 	.word	0x145b01f5
 8002d3c:	be3e2fe0 	.word	0xbe3e2fe0
 8002d40:	7ff00000 	.word	0x7ff00000
 8002d44:	43400000 	.word	0x43400000
 8002d48:	0003988e 	.word	0x0003988e
 8002d4c:	000bb679 	.word	0x000bb679
 8002d50:	080034d0 	.word	0x080034d0
 8002d54:	3ff00000 	.word	0x3ff00000
 8002d58:	40080000 	.word	0x40080000
 8002d5c:	080034b0 	.word	0x080034b0
 8002d60:	080034c0 	.word	0x080034c0
 8002d64:	460b      	mov	r3, r1
 8002d66:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8002d6a:	e5d7      	b.n	800291c <__ieee754_pow+0x354>
 8002d6c:	f04f 0a01 	mov.w	sl, #1
 8002d70:	e65e      	b.n	8002a30 <__ieee754_pow+0x468>
 8002d72:	a3b4      	add	r3, pc, #720	@ (adr r3, 8003044 <__ieee754_pow+0xa7c>)
 8002d74:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002d78:	4630      	mov	r0, r6
 8002d7a:	4639      	mov	r1, r7
 8002d7c:	f7fd fa86 	bl	800028c <__adddf3>
 8002d80:	4642      	mov	r2, r8
 8002d82:	e9cd 0100 	strd	r0, r1, [sp]
 8002d86:	464b      	mov	r3, r9
 8002d88:	4620      	mov	r0, r4
 8002d8a:	4629      	mov	r1, r5
 8002d8c:	f7fd fa7c 	bl	8000288 <__aeabi_dsub>
 8002d90:	4602      	mov	r2, r0
 8002d92:	460b      	mov	r3, r1
 8002d94:	e9dd 0100 	ldrd	r0, r1, [sp]
 8002d98:	f7fd febe 	bl	8000b18 <__aeabi_dcmpgt>
 8002d9c:	2800      	cmp	r0, #0
 8002d9e:	f47f ae00 	bne.w	80029a2 <__ieee754_pow+0x3da>
 8002da2:	ea4f 5a2a 	mov.w	sl, sl, asr #20
 8002da6:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 8002daa:	f2aa 3afe 	subw	sl, sl, #1022	@ 0x3fe
 8002dae:	fa43 fa0a 	asr.w	sl, r3, sl
 8002db2:	44da      	add	sl, fp
 8002db4:	f3ca 510a 	ubfx	r1, sl, #20, #11
 8002db8:	489d      	ldr	r0, [pc, #628]	@ (8003030 <__ieee754_pow+0xa68>)
 8002dba:	f2a1 31ff 	subw	r1, r1, #1023	@ 0x3ff
 8002dbe:	4108      	asrs	r0, r1
 8002dc0:	ea00 030a 	and.w	r3, r0, sl
 8002dc4:	f3ca 0a13 	ubfx	sl, sl, #0, #20
 8002dc8:	f1c1 0114 	rsb	r1, r1, #20
 8002dcc:	f44a 1a80 	orr.w	sl, sl, #1048576	@ 0x100000
 8002dd0:	fa4a fa01 	asr.w	sl, sl, r1
 8002dd4:	f1bb 0f00 	cmp.w	fp, #0
 8002dd8:	4640      	mov	r0, r8
 8002dda:	4649      	mov	r1, r9
 8002ddc:	f04f 0200 	mov.w	r2, #0
 8002de0:	bfb8      	it	lt
 8002de2:	f1ca 0a00 	rsblt	sl, sl, #0
 8002de6:	f7fd fa4f 	bl	8000288 <__aeabi_dsub>
 8002dea:	4680      	mov	r8, r0
 8002dec:	4689      	mov	r9, r1
 8002dee:	4632      	mov	r2, r6
 8002df0:	463b      	mov	r3, r7
 8002df2:	4640      	mov	r0, r8
 8002df4:	4649      	mov	r1, r9
 8002df6:	f7fd fa49 	bl	800028c <__adddf3>
 8002dfa:	2400      	movs	r4, #0
 8002dfc:	a37c      	add	r3, pc, #496	@ (adr r3, 8002ff0 <__ieee754_pow+0xa28>)
 8002dfe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002e02:	4620      	mov	r0, r4
 8002e04:	460d      	mov	r5, r1
 8002e06:	f7fd fbf7 	bl	80005f8 <__aeabi_dmul>
 8002e0a:	4642      	mov	r2, r8
 8002e0c:	e9cd 0100 	strd	r0, r1, [sp]
 8002e10:	464b      	mov	r3, r9
 8002e12:	4620      	mov	r0, r4
 8002e14:	4629      	mov	r1, r5
 8002e16:	f7fd fa37 	bl	8000288 <__aeabi_dsub>
 8002e1a:	4602      	mov	r2, r0
 8002e1c:	460b      	mov	r3, r1
 8002e1e:	4630      	mov	r0, r6
 8002e20:	4639      	mov	r1, r7
 8002e22:	f7fd fa31 	bl	8000288 <__aeabi_dsub>
 8002e26:	a374      	add	r3, pc, #464	@ (adr r3, 8002ff8 <__ieee754_pow+0xa30>)
 8002e28:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002e2c:	f7fd fbe4 	bl	80005f8 <__aeabi_dmul>
 8002e30:	a373      	add	r3, pc, #460	@ (adr r3, 8003000 <__ieee754_pow+0xa38>)
 8002e32:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002e36:	4680      	mov	r8, r0
 8002e38:	4689      	mov	r9, r1
 8002e3a:	4620      	mov	r0, r4
 8002e3c:	4629      	mov	r1, r5
 8002e3e:	f7fd fbdb 	bl	80005f8 <__aeabi_dmul>
 8002e42:	4602      	mov	r2, r0
 8002e44:	460b      	mov	r3, r1
 8002e46:	4640      	mov	r0, r8
 8002e48:	4649      	mov	r1, r9
 8002e4a:	f7fd fa1f 	bl	800028c <__adddf3>
 8002e4e:	4604      	mov	r4, r0
 8002e50:	460d      	mov	r5, r1
 8002e52:	4602      	mov	r2, r0
 8002e54:	460b      	mov	r3, r1
 8002e56:	e9dd 0100 	ldrd	r0, r1, [sp]
 8002e5a:	f7fd fa17 	bl	800028c <__adddf3>
 8002e5e:	e9dd 2300 	ldrd	r2, r3, [sp]
 8002e62:	4680      	mov	r8, r0
 8002e64:	4689      	mov	r9, r1
 8002e66:	f7fd fa0f 	bl	8000288 <__aeabi_dsub>
 8002e6a:	4602      	mov	r2, r0
 8002e6c:	460b      	mov	r3, r1
 8002e6e:	4620      	mov	r0, r4
 8002e70:	4629      	mov	r1, r5
 8002e72:	f7fd fa09 	bl	8000288 <__aeabi_dsub>
 8002e76:	4642      	mov	r2, r8
 8002e78:	4606      	mov	r6, r0
 8002e7a:	460f      	mov	r7, r1
 8002e7c:	464b      	mov	r3, r9
 8002e7e:	4640      	mov	r0, r8
 8002e80:	4649      	mov	r1, r9
 8002e82:	f7fd fbb9 	bl	80005f8 <__aeabi_dmul>
 8002e86:	a360      	add	r3, pc, #384	@ (adr r3, 8003008 <__ieee754_pow+0xa40>)
 8002e88:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002e8c:	4604      	mov	r4, r0
 8002e8e:	460d      	mov	r5, r1
 8002e90:	f7fd fbb2 	bl	80005f8 <__aeabi_dmul>
 8002e94:	a35e      	add	r3, pc, #376	@ (adr r3, 8003010 <__ieee754_pow+0xa48>)
 8002e96:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002e9a:	f7fd f9f5 	bl	8000288 <__aeabi_dsub>
 8002e9e:	4622      	mov	r2, r4
 8002ea0:	462b      	mov	r3, r5
 8002ea2:	f7fd fba9 	bl	80005f8 <__aeabi_dmul>
 8002ea6:	a35c      	add	r3, pc, #368	@ (adr r3, 8003018 <__ieee754_pow+0xa50>)
 8002ea8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002eac:	f7fd f9ee 	bl	800028c <__adddf3>
 8002eb0:	4622      	mov	r2, r4
 8002eb2:	462b      	mov	r3, r5
 8002eb4:	f7fd fba0 	bl	80005f8 <__aeabi_dmul>
 8002eb8:	a359      	add	r3, pc, #356	@ (adr r3, 8003020 <__ieee754_pow+0xa58>)
 8002eba:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002ebe:	f7fd f9e3 	bl	8000288 <__aeabi_dsub>
 8002ec2:	4622      	mov	r2, r4
 8002ec4:	462b      	mov	r3, r5
 8002ec6:	f7fd fb97 	bl	80005f8 <__aeabi_dmul>
 8002eca:	a357      	add	r3, pc, #348	@ (adr r3, 8003028 <__ieee754_pow+0xa60>)
 8002ecc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002ed0:	f7fd f9dc 	bl	800028c <__adddf3>
 8002ed4:	4622      	mov	r2, r4
 8002ed6:	462b      	mov	r3, r5
 8002ed8:	f7fd fb8e 	bl	80005f8 <__aeabi_dmul>
 8002edc:	4602      	mov	r2, r0
 8002ede:	460b      	mov	r3, r1
 8002ee0:	4640      	mov	r0, r8
 8002ee2:	4649      	mov	r1, r9
 8002ee4:	f7fd f9d0 	bl	8000288 <__aeabi_dsub>
 8002ee8:	4604      	mov	r4, r0
 8002eea:	460d      	mov	r5, r1
 8002eec:	4602      	mov	r2, r0
 8002eee:	460b      	mov	r3, r1
 8002ef0:	4640      	mov	r0, r8
 8002ef2:	4649      	mov	r1, r9
 8002ef4:	f7fd fb80 	bl	80005f8 <__aeabi_dmul>
 8002ef8:	2200      	movs	r2, #0
 8002efa:	e9cd 0100 	strd	r0, r1, [sp]
 8002efe:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8002f02:	4620      	mov	r0, r4
 8002f04:	4629      	mov	r1, r5
 8002f06:	f7fd f9bf 	bl	8000288 <__aeabi_dsub>
 8002f0a:	4602      	mov	r2, r0
 8002f0c:	460b      	mov	r3, r1
 8002f0e:	e9dd 0100 	ldrd	r0, r1, [sp]
 8002f12:	f7fd fc9b 	bl	800084c <__aeabi_ddiv>
 8002f16:	4632      	mov	r2, r6
 8002f18:	4604      	mov	r4, r0
 8002f1a:	460d      	mov	r5, r1
 8002f1c:	463b      	mov	r3, r7
 8002f1e:	4640      	mov	r0, r8
 8002f20:	4649      	mov	r1, r9
 8002f22:	f7fd fb69 	bl	80005f8 <__aeabi_dmul>
 8002f26:	4632      	mov	r2, r6
 8002f28:	463b      	mov	r3, r7
 8002f2a:	f7fd f9af 	bl	800028c <__adddf3>
 8002f2e:	4602      	mov	r2, r0
 8002f30:	460b      	mov	r3, r1
 8002f32:	4620      	mov	r0, r4
 8002f34:	4629      	mov	r1, r5
 8002f36:	f7fd f9a7 	bl	8000288 <__aeabi_dsub>
 8002f3a:	4642      	mov	r2, r8
 8002f3c:	464b      	mov	r3, r9
 8002f3e:	f7fd f9a3 	bl	8000288 <__aeabi_dsub>
 8002f42:	460b      	mov	r3, r1
 8002f44:	4602      	mov	r2, r0
 8002f46:	493b      	ldr	r1, [pc, #236]	@ (8003034 <__ieee754_pow+0xa6c>)
 8002f48:	2000      	movs	r0, #0
 8002f4a:	f7fd f99d 	bl	8000288 <__aeabi_dsub>
 8002f4e:	ec41 0b10 	vmov	d0, r0, r1
 8002f52:	ee10 3a90 	vmov	r3, s1
 8002f56:	eb03 530a 	add.w	r3, r3, sl, lsl #20
 8002f5a:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8002f5e:	da30      	bge.n	8002fc2 <__ieee754_pow+0x9fa>
 8002f60:	4650      	mov	r0, sl
 8002f62:	f000 f87d 	bl	8003060 <scalbn>
 8002f66:	ec51 0b10 	vmov	r0, r1, d0
 8002f6a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8002f6e:	f7ff bbd2 	b.w	8002716 <__ieee754_pow+0x14e>
 8002f72:	4c31      	ldr	r4, [pc, #196]	@ (8003038 <__ieee754_pow+0xa70>)
 8002f74:	f021 4300 	bic.w	r3, r1, #2147483648	@ 0x80000000
 8002f78:	42a3      	cmp	r3, r4
 8002f7a:	d91a      	bls.n	8002fb2 <__ieee754_pow+0x9ea>
 8002f7c:	4b2f      	ldr	r3, [pc, #188]	@ (800303c <__ieee754_pow+0xa74>)
 8002f7e:	440b      	add	r3, r1
 8002f80:	4303      	orrs	r3, r0
 8002f82:	d009      	beq.n	8002f98 <__ieee754_pow+0x9d0>
 8002f84:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8002f88:	2200      	movs	r2, #0
 8002f8a:	2300      	movs	r3, #0
 8002f8c:	f7fd fda6 	bl	8000adc <__aeabi_dcmplt>
 8002f90:	3800      	subs	r0, #0
 8002f92:	bf18      	it	ne
 8002f94:	2001      	movne	r0, #1
 8002f96:	e42b      	b.n	80027f0 <__ieee754_pow+0x228>
 8002f98:	4642      	mov	r2, r8
 8002f9a:	464b      	mov	r3, r9
 8002f9c:	f7fd f974 	bl	8000288 <__aeabi_dsub>
 8002fa0:	4632      	mov	r2, r6
 8002fa2:	463b      	mov	r3, r7
 8002fa4:	f7fd fdae 	bl	8000b04 <__aeabi_dcmpge>
 8002fa8:	2800      	cmp	r0, #0
 8002faa:	d1eb      	bne.n	8002f84 <__ieee754_pow+0x9bc>
 8002fac:	f8df a09c 	ldr.w	sl, [pc, #156]	@ 800304c <__ieee754_pow+0xa84>
 8002fb0:	e6f7      	b.n	8002da2 <__ieee754_pow+0x7da>
 8002fb2:	469a      	mov	sl, r3
 8002fb4:	4b22      	ldr	r3, [pc, #136]	@ (8003040 <__ieee754_pow+0xa78>)
 8002fb6:	459a      	cmp	sl, r3
 8002fb8:	f63f aef3 	bhi.w	8002da2 <__ieee754_pow+0x7da>
 8002fbc:	f8dd a010 	ldr.w	sl, [sp, #16]
 8002fc0:	e715      	b.n	8002dee <__ieee754_pow+0x826>
 8002fc2:	ec51 0b10 	vmov	r0, r1, d0
 8002fc6:	4619      	mov	r1, r3
 8002fc8:	e7cf      	b.n	8002f6a <__ieee754_pow+0x9a2>
 8002fca:	491a      	ldr	r1, [pc, #104]	@ (8003034 <__ieee754_pow+0xa6c>)
 8002fcc:	2000      	movs	r0, #0
 8002fce:	f7ff bb18 	b.w	8002602 <__ieee754_pow+0x3a>
 8002fd2:	2000      	movs	r0, #0
 8002fd4:	2100      	movs	r1, #0
 8002fd6:	f7ff bb14 	b.w	8002602 <__ieee754_pow+0x3a>
 8002fda:	4630      	mov	r0, r6
 8002fdc:	4639      	mov	r1, r7
 8002fde:	f7ff bb10 	b.w	8002602 <__ieee754_pow+0x3a>
 8002fe2:	460c      	mov	r4, r1
 8002fe4:	f7ff bb5e 	b.w	80026a4 <__ieee754_pow+0xdc>
 8002fe8:	2400      	movs	r4, #0
 8002fea:	f7ff bb49 	b.w	8002680 <__ieee754_pow+0xb8>
 8002fee:	bf00      	nop
 8002ff0:	00000000 	.word	0x00000000
 8002ff4:	3fe62e43 	.word	0x3fe62e43
 8002ff8:	fefa39ef 	.word	0xfefa39ef
 8002ffc:	3fe62e42 	.word	0x3fe62e42
 8003000:	0ca86c39 	.word	0x0ca86c39
 8003004:	be205c61 	.word	0xbe205c61
 8003008:	72bea4d0 	.word	0x72bea4d0
 800300c:	3e663769 	.word	0x3e663769
 8003010:	c5d26bf1 	.word	0xc5d26bf1
 8003014:	3ebbbd41 	.word	0x3ebbbd41
 8003018:	af25de2c 	.word	0xaf25de2c
 800301c:	3f11566a 	.word	0x3f11566a
 8003020:	16bebd93 	.word	0x16bebd93
 8003024:	3f66c16c 	.word	0x3f66c16c
 8003028:	5555553e 	.word	0x5555553e
 800302c:	3fc55555 	.word	0x3fc55555
 8003030:	fff00000 	.word	0xfff00000
 8003034:	3ff00000 	.word	0x3ff00000
 8003038:	4090cbff 	.word	0x4090cbff
 800303c:	3f6f3400 	.word	0x3f6f3400
 8003040:	3fe00000 	.word	0x3fe00000
 8003044:	652b82fe 	.word	0x652b82fe
 8003048:	3c971547 	.word	0x3c971547
 800304c:	4090cc00 	.word	0x4090cc00

08003050 <fabs>:
 8003050:	ec51 0b10 	vmov	r0, r1, d0
 8003054:	4602      	mov	r2, r0
 8003056:	f021 4300 	bic.w	r3, r1, #2147483648	@ 0x80000000
 800305a:	ec43 2b10 	vmov	d0, r2, r3
 800305e:	4770      	bx	lr

08003060 <scalbn>:
 8003060:	b570      	push	{r4, r5, r6, lr}
 8003062:	ec55 4b10 	vmov	r4, r5, d0
 8003066:	f3c5 510a 	ubfx	r1, r5, #20, #11
 800306a:	4606      	mov	r6, r0
 800306c:	462b      	mov	r3, r5
 800306e:	b991      	cbnz	r1, 8003096 <scalbn+0x36>
 8003070:	f025 4300 	bic.w	r3, r5, #2147483648	@ 0x80000000
 8003074:	4323      	orrs	r3, r4
 8003076:	d03d      	beq.n	80030f4 <scalbn+0x94>
 8003078:	4b35      	ldr	r3, [pc, #212]	@ (8003150 <scalbn+0xf0>)
 800307a:	4620      	mov	r0, r4
 800307c:	4629      	mov	r1, r5
 800307e:	2200      	movs	r2, #0
 8003080:	f7fd faba 	bl	80005f8 <__aeabi_dmul>
 8003084:	4b33      	ldr	r3, [pc, #204]	@ (8003154 <scalbn+0xf4>)
 8003086:	429e      	cmp	r6, r3
 8003088:	4604      	mov	r4, r0
 800308a:	460d      	mov	r5, r1
 800308c:	da0f      	bge.n	80030ae <scalbn+0x4e>
 800308e:	a328      	add	r3, pc, #160	@ (adr r3, 8003130 <scalbn+0xd0>)
 8003090:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003094:	e01e      	b.n	80030d4 <scalbn+0x74>
 8003096:	f240 72ff 	movw	r2, #2047	@ 0x7ff
 800309a:	4291      	cmp	r1, r2
 800309c:	d10b      	bne.n	80030b6 <scalbn+0x56>
 800309e:	4622      	mov	r2, r4
 80030a0:	4620      	mov	r0, r4
 80030a2:	4629      	mov	r1, r5
 80030a4:	f7fd f8f2 	bl	800028c <__adddf3>
 80030a8:	4604      	mov	r4, r0
 80030aa:	460d      	mov	r5, r1
 80030ac:	e022      	b.n	80030f4 <scalbn+0x94>
 80030ae:	460b      	mov	r3, r1
 80030b0:	f3c1 510a 	ubfx	r1, r1, #20, #11
 80030b4:	3936      	subs	r1, #54	@ 0x36
 80030b6:	f24c 3250 	movw	r2, #50000	@ 0xc350
 80030ba:	4296      	cmp	r6, r2
 80030bc:	dd0d      	ble.n	80030da <scalbn+0x7a>
 80030be:	2d00      	cmp	r5, #0
 80030c0:	a11d      	add	r1, pc, #116	@ (adr r1, 8003138 <scalbn+0xd8>)
 80030c2:	e9d1 0100 	ldrd	r0, r1, [r1]
 80030c6:	da02      	bge.n	80030ce <scalbn+0x6e>
 80030c8:	a11d      	add	r1, pc, #116	@ (adr r1, 8003140 <scalbn+0xe0>)
 80030ca:	e9d1 0100 	ldrd	r0, r1, [r1]
 80030ce:	a31a      	add	r3, pc, #104	@ (adr r3, 8003138 <scalbn+0xd8>)
 80030d0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80030d4:	f7fd fa90 	bl	80005f8 <__aeabi_dmul>
 80030d8:	e7e6      	b.n	80030a8 <scalbn+0x48>
 80030da:	1872      	adds	r2, r6, r1
 80030dc:	f240 71fe 	movw	r1, #2046	@ 0x7fe
 80030e0:	428a      	cmp	r2, r1
 80030e2:	dcec      	bgt.n	80030be <scalbn+0x5e>
 80030e4:	2a00      	cmp	r2, #0
 80030e6:	dd08      	ble.n	80030fa <scalbn+0x9a>
 80030e8:	f023 43ff 	bic.w	r3, r3, #2139095040	@ 0x7f800000
 80030ec:	f423 03e0 	bic.w	r3, r3, #7340032	@ 0x700000
 80030f0:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 80030f4:	ec45 4b10 	vmov	d0, r4, r5
 80030f8:	bd70      	pop	{r4, r5, r6, pc}
 80030fa:	f112 0f35 	cmn.w	r2, #53	@ 0x35
 80030fe:	da08      	bge.n	8003112 <scalbn+0xb2>
 8003100:	2d00      	cmp	r5, #0
 8003102:	a10b      	add	r1, pc, #44	@ (adr r1, 8003130 <scalbn+0xd0>)
 8003104:	e9d1 0100 	ldrd	r0, r1, [r1]
 8003108:	dac1      	bge.n	800308e <scalbn+0x2e>
 800310a:	a10f      	add	r1, pc, #60	@ (adr r1, 8003148 <scalbn+0xe8>)
 800310c:	e9d1 0100 	ldrd	r0, r1, [r1]
 8003110:	e7bd      	b.n	800308e <scalbn+0x2e>
 8003112:	f023 43ff 	bic.w	r3, r3, #2139095040	@ 0x7f800000
 8003116:	3236      	adds	r2, #54	@ 0x36
 8003118:	f423 03e0 	bic.w	r3, r3, #7340032	@ 0x700000
 800311c:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 8003120:	4620      	mov	r0, r4
 8003122:	4b0d      	ldr	r3, [pc, #52]	@ (8003158 <scalbn+0xf8>)
 8003124:	4629      	mov	r1, r5
 8003126:	2200      	movs	r2, #0
 8003128:	e7d4      	b.n	80030d4 <scalbn+0x74>
 800312a:	bf00      	nop
 800312c:	f3af 8000 	nop.w
 8003130:	c2f8f359 	.word	0xc2f8f359
 8003134:	01a56e1f 	.word	0x01a56e1f
 8003138:	8800759c 	.word	0x8800759c
 800313c:	7e37e43c 	.word	0x7e37e43c
 8003140:	8800759c 	.word	0x8800759c
 8003144:	fe37e43c 	.word	0xfe37e43c
 8003148:	c2f8f359 	.word	0xc2f8f359
 800314c:	81a56e1f 	.word	0x81a56e1f
 8003150:	43500000 	.word	0x43500000
 8003154:	ffff3cb0 	.word	0xffff3cb0
 8003158:	3c900000 	.word	0x3c900000

0800315c <with_errno>:
 800315c:	b510      	push	{r4, lr}
 800315e:	ed2d 8b02 	vpush	{d8}
 8003162:	eeb0 8a40 	vmov.f32	s16, s0
 8003166:	eef0 8a60 	vmov.f32	s17, s1
 800316a:	4604      	mov	r4, r0
 800316c:	f7fe fd36 	bl	8001bdc <__errno>
 8003170:	eeb0 0a48 	vmov.f32	s0, s16
 8003174:	eef0 0a68 	vmov.f32	s1, s17
 8003178:	ecbd 8b02 	vpop	{d8}
 800317c:	6004      	str	r4, [r0, #0]
 800317e:	bd10      	pop	{r4, pc}

08003180 <xflow>:
 8003180:	4603      	mov	r3, r0
 8003182:	b507      	push	{r0, r1, r2, lr}
 8003184:	ec51 0b10 	vmov	r0, r1, d0
 8003188:	b183      	cbz	r3, 80031ac <xflow+0x2c>
 800318a:	4602      	mov	r2, r0
 800318c:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 8003190:	e9cd 2300 	strd	r2, r3, [sp]
 8003194:	e9dd 2300 	ldrd	r2, r3, [sp]
 8003198:	f7fd fa2e 	bl	80005f8 <__aeabi_dmul>
 800319c:	ec41 0b10 	vmov	d0, r0, r1
 80031a0:	2022      	movs	r0, #34	@ 0x22
 80031a2:	b003      	add	sp, #12
 80031a4:	f85d eb04 	ldr.w	lr, [sp], #4
 80031a8:	f7ff bfd8 	b.w	800315c <with_errno>
 80031ac:	4602      	mov	r2, r0
 80031ae:	460b      	mov	r3, r1
 80031b0:	e7ee      	b.n	8003190 <xflow+0x10>
 80031b2:	0000      	movs	r0, r0
 80031b4:	0000      	movs	r0, r0
	...

080031b8 <__math_uflow>:
 80031b8:	ed9f 0b01 	vldr	d0, [pc, #4]	@ 80031c0 <__math_uflow+0x8>
 80031bc:	f7ff bfe0 	b.w	8003180 <xflow>
 80031c0:	00000000 	.word	0x00000000
 80031c4:	10000000 	.word	0x10000000

080031c8 <__math_oflow>:
 80031c8:	ed9f 0b01 	vldr	d0, [pc, #4]	@ 80031d0 <__math_oflow+0x8>
 80031cc:	f7ff bfd8 	b.w	8003180 <xflow>
 80031d0:	00000000 	.word	0x00000000
 80031d4:	70000000 	.word	0x70000000

080031d8 <__ieee754_sqrt>:
 80031d8:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80031dc:	4a68      	ldr	r2, [pc, #416]	@ (8003380 <__ieee754_sqrt+0x1a8>)
 80031de:	ec55 4b10 	vmov	r4, r5, d0
 80031e2:	43aa      	bics	r2, r5
 80031e4:	462b      	mov	r3, r5
 80031e6:	4621      	mov	r1, r4
 80031e8:	d110      	bne.n	800320c <__ieee754_sqrt+0x34>
 80031ea:	4622      	mov	r2, r4
 80031ec:	4620      	mov	r0, r4
 80031ee:	4629      	mov	r1, r5
 80031f0:	f7fd fa02 	bl	80005f8 <__aeabi_dmul>
 80031f4:	4602      	mov	r2, r0
 80031f6:	460b      	mov	r3, r1
 80031f8:	4620      	mov	r0, r4
 80031fa:	4629      	mov	r1, r5
 80031fc:	f7fd f846 	bl	800028c <__adddf3>
 8003200:	4604      	mov	r4, r0
 8003202:	460d      	mov	r5, r1
 8003204:	ec45 4b10 	vmov	d0, r4, r5
 8003208:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800320c:	2d00      	cmp	r5, #0
 800320e:	dc0e      	bgt.n	800322e <__ieee754_sqrt+0x56>
 8003210:	f025 4200 	bic.w	r2, r5, #2147483648	@ 0x80000000
 8003214:	4322      	orrs	r2, r4
 8003216:	d0f5      	beq.n	8003204 <__ieee754_sqrt+0x2c>
 8003218:	b19d      	cbz	r5, 8003242 <__ieee754_sqrt+0x6a>
 800321a:	4622      	mov	r2, r4
 800321c:	4620      	mov	r0, r4
 800321e:	4629      	mov	r1, r5
 8003220:	f7fd f832 	bl	8000288 <__aeabi_dsub>
 8003224:	4602      	mov	r2, r0
 8003226:	460b      	mov	r3, r1
 8003228:	f7fd fb10 	bl	800084c <__aeabi_ddiv>
 800322c:	e7e8      	b.n	8003200 <__ieee754_sqrt+0x28>
 800322e:	152a      	asrs	r2, r5, #20
 8003230:	d115      	bne.n	800325e <__ieee754_sqrt+0x86>
 8003232:	2000      	movs	r0, #0
 8003234:	e009      	b.n	800324a <__ieee754_sqrt+0x72>
 8003236:	0acb      	lsrs	r3, r1, #11
 8003238:	3a15      	subs	r2, #21
 800323a:	0549      	lsls	r1, r1, #21
 800323c:	2b00      	cmp	r3, #0
 800323e:	d0fa      	beq.n	8003236 <__ieee754_sqrt+0x5e>
 8003240:	e7f7      	b.n	8003232 <__ieee754_sqrt+0x5a>
 8003242:	462a      	mov	r2, r5
 8003244:	e7fa      	b.n	800323c <__ieee754_sqrt+0x64>
 8003246:	005b      	lsls	r3, r3, #1
 8003248:	3001      	adds	r0, #1
 800324a:	02dc      	lsls	r4, r3, #11
 800324c:	d5fb      	bpl.n	8003246 <__ieee754_sqrt+0x6e>
 800324e:	1e44      	subs	r4, r0, #1
 8003250:	1b12      	subs	r2, r2, r4
 8003252:	f1c0 0420 	rsb	r4, r0, #32
 8003256:	fa21 f404 	lsr.w	r4, r1, r4
 800325a:	4323      	orrs	r3, r4
 800325c:	4081      	lsls	r1, r0
 800325e:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8003262:	f2a2 35ff 	subw	r5, r2, #1023	@ 0x3ff
 8003266:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800326a:	07d2      	lsls	r2, r2, #31
 800326c:	bf5c      	itt	pl
 800326e:	005b      	lslpl	r3, r3, #1
 8003270:	eb03 73d1 	addpl.w	r3, r3, r1, lsr #31
 8003274:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8003278:	bf58      	it	pl
 800327a:	0049      	lslpl	r1, r1, #1
 800327c:	2600      	movs	r6, #0
 800327e:	eb03 73d1 	add.w	r3, r3, r1, lsr #31
 8003282:	106d      	asrs	r5, r5, #1
 8003284:	0049      	lsls	r1, r1, #1
 8003286:	2016      	movs	r0, #22
 8003288:	4632      	mov	r2, r6
 800328a:	f44f 1400 	mov.w	r4, #2097152	@ 0x200000
 800328e:	1917      	adds	r7, r2, r4
 8003290:	429f      	cmp	r7, r3
 8003292:	bfde      	ittt	le
 8003294:	193a      	addle	r2, r7, r4
 8003296:	1bdb      	suble	r3, r3, r7
 8003298:	1936      	addle	r6, r6, r4
 800329a:	0fcf      	lsrs	r7, r1, #31
 800329c:	3801      	subs	r0, #1
 800329e:	eb07 0343 	add.w	r3, r7, r3, lsl #1
 80032a2:	ea4f 0141 	mov.w	r1, r1, lsl #1
 80032a6:	ea4f 0454 	mov.w	r4, r4, lsr #1
 80032aa:	d1f0      	bne.n	800328e <__ieee754_sqrt+0xb6>
 80032ac:	4604      	mov	r4, r0
 80032ae:	2720      	movs	r7, #32
 80032b0:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 80032b4:	429a      	cmp	r2, r3
 80032b6:	eb00 0e0c 	add.w	lr, r0, ip
 80032ba:	db02      	blt.n	80032c2 <__ieee754_sqrt+0xea>
 80032bc:	d113      	bne.n	80032e6 <__ieee754_sqrt+0x10e>
 80032be:	458e      	cmp	lr, r1
 80032c0:	d811      	bhi.n	80032e6 <__ieee754_sqrt+0x10e>
 80032c2:	f1be 0f00 	cmp.w	lr, #0
 80032c6:	eb0e 000c 	add.w	r0, lr, ip
 80032ca:	da42      	bge.n	8003352 <__ieee754_sqrt+0x17a>
 80032cc:	2800      	cmp	r0, #0
 80032ce:	db40      	blt.n	8003352 <__ieee754_sqrt+0x17a>
 80032d0:	f102 0801 	add.w	r8, r2, #1
 80032d4:	1a9b      	subs	r3, r3, r2
 80032d6:	458e      	cmp	lr, r1
 80032d8:	bf88      	it	hi
 80032da:	f103 33ff 	addhi.w	r3, r3, #4294967295
 80032de:	eba1 010e 	sub.w	r1, r1, lr
 80032e2:	4464      	add	r4, ip
 80032e4:	4642      	mov	r2, r8
 80032e6:	ea4f 7ed1 	mov.w	lr, r1, lsr #31
 80032ea:	3f01      	subs	r7, #1
 80032ec:	eb0e 0343 	add.w	r3, lr, r3, lsl #1
 80032f0:	ea4f 0141 	mov.w	r1, r1, lsl #1
 80032f4:	ea4f 0c5c 	mov.w	ip, ip, lsr #1
 80032f8:	d1dc      	bne.n	80032b4 <__ieee754_sqrt+0xdc>
 80032fa:	4319      	orrs	r1, r3
 80032fc:	d01b      	beq.n	8003336 <__ieee754_sqrt+0x15e>
 80032fe:	f8df a084 	ldr.w	sl, [pc, #132]	@ 8003384 <__ieee754_sqrt+0x1ac>
 8003302:	f8df b084 	ldr.w	fp, [pc, #132]	@ 8003388 <__ieee754_sqrt+0x1b0>
 8003306:	e9da 0100 	ldrd	r0, r1, [sl]
 800330a:	e9db 2300 	ldrd	r2, r3, [fp]
 800330e:	f7fc ffbb 	bl	8000288 <__aeabi_dsub>
 8003312:	e9da 8900 	ldrd	r8, r9, [sl]
 8003316:	4602      	mov	r2, r0
 8003318:	460b      	mov	r3, r1
 800331a:	4640      	mov	r0, r8
 800331c:	4649      	mov	r1, r9
 800331e:	f7fd fbe7 	bl	8000af0 <__aeabi_dcmple>
 8003322:	b140      	cbz	r0, 8003336 <__ieee754_sqrt+0x15e>
 8003324:	f1b4 3fff 	cmp.w	r4, #4294967295
 8003328:	e9da 0100 	ldrd	r0, r1, [sl]
 800332c:	e9db 2300 	ldrd	r2, r3, [fp]
 8003330:	d111      	bne.n	8003356 <__ieee754_sqrt+0x17e>
 8003332:	3601      	adds	r6, #1
 8003334:	463c      	mov	r4, r7
 8003336:	1072      	asrs	r2, r6, #1
 8003338:	0863      	lsrs	r3, r4, #1
 800333a:	07f1      	lsls	r1, r6, #31
 800333c:	f102 527f 	add.w	r2, r2, #1069547520	@ 0x3fc00000
 8003340:	f502 1200 	add.w	r2, r2, #2097152	@ 0x200000
 8003344:	bf48      	it	mi
 8003346:	f043 4300 	orrmi.w	r3, r3, #2147483648	@ 0x80000000
 800334a:	eb02 5105 	add.w	r1, r2, r5, lsl #20
 800334e:	4618      	mov	r0, r3
 8003350:	e756      	b.n	8003200 <__ieee754_sqrt+0x28>
 8003352:	4690      	mov	r8, r2
 8003354:	e7be      	b.n	80032d4 <__ieee754_sqrt+0xfc>
 8003356:	f7fc ff99 	bl	800028c <__adddf3>
 800335a:	e9da 8900 	ldrd	r8, r9, [sl]
 800335e:	4602      	mov	r2, r0
 8003360:	460b      	mov	r3, r1
 8003362:	4640      	mov	r0, r8
 8003364:	4649      	mov	r1, r9
 8003366:	f7fd fbb9 	bl	8000adc <__aeabi_dcmplt>
 800336a:	b120      	cbz	r0, 8003376 <__ieee754_sqrt+0x19e>
 800336c:	1ca0      	adds	r0, r4, #2
 800336e:	bf08      	it	eq
 8003370:	3601      	addeq	r6, #1
 8003372:	3402      	adds	r4, #2
 8003374:	e7df      	b.n	8003336 <__ieee754_sqrt+0x15e>
 8003376:	1c63      	adds	r3, r4, #1
 8003378:	f023 0401 	bic.w	r4, r3, #1
 800337c:	e7db      	b.n	8003336 <__ieee754_sqrt+0x15e>
 800337e:	bf00      	nop
 8003380:	7ff00000 	.word	0x7ff00000
 8003384:	20000070 	.word	0x20000070
 8003388:	20000068 	.word	0x20000068

0800338c <_init>:
 800338c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800338e:	bf00      	nop
 8003390:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003392:	bc08      	pop	{r3}
 8003394:	469e      	mov	lr, r3
 8003396:	4770      	bx	lr

08003398 <_fini>:
 8003398:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800339a:	bf00      	nop
 800339c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800339e:	bc08      	pop	{r3}
 80033a0:	469e      	mov	lr, r3
 80033a2:	4770      	bx	lr
